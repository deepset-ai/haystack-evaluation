questions,contexts,true_answers,predicted_answers,context_relevance,faithfulness,sas
What are the two main tasks BERT is pre-trained on?,"['steps in our\nframework: pre-training and ﬁne-tuning . Dur-\ning pre-training, the model is trained on unlabeled\ndata over different pre-training tasks. For ﬁne-\ntuning, the BERT model is ﬁrst initialized with\nthe pre-trained parameters, and all of the param-\neters are ﬁne-tuned using labeled data from the\ndownstream tasks. Each downstream task has sep-\narate ﬁne-tuned models, even though they are ini-\ntialized with the same pre-trained parameters. The\nquestion-answering example in Figure 1 will serve\nas a running example for this section.\nA distinctive feature of BERT is its uniﬁed ar-\nchitecture across different tasks. There is mini-mal difference between the pre-trained architec-\nture and the ﬁnal downstream architecture.\nModel Architecture BERT’s model architec-\nture is a multi-layer bidirectional Transformer en-\ncoder based on the original implementation de-\nscribed in Vaswani et al. (2017) and released in\nthetensor2tensor library.1Because the use\nof Transformers has become common and our im-\nplementation is almost identical to the original,\nwe will omit an exhaustive background descrip-\ntion of the model architecture and refer readers to\nVaswani et al. (2017) as well as excellent guides\nsuch as “The Annotated Transformer.”2\nIn this work, we denote the number of layers\n(i.e., Transformer blocks) as L, the hidden size as\nH, and the number of self-attention heads as A.3\nWe primarily report results on two model sizes:\nBERT BASE (L=12, H=768, A=12, Total Param-\neters=110M) and BERT LARGE (L=24, H=1024,\nA=16, Total Parameters=340M).\nBERT BASE was chosen to have the same model\nsize as OpenAI GPT for comparison purposes.\nCritically, however, the BERT Transformer uses\nbidirectional self-attention, while the GPT Trans-\nformer uses constrained self-attention where every\ntoken can only attend to context to its left.4\n1https://github.com/tensorﬂow/tensor2tensor\n2http://nlp.seas.harvard.edu/2018/04/03/attention.html\n3In all cases we set the feed-forward/ﬁlter size to be 4H,\ni.e., 3072 for ', 'is a\nlarge-scale reading comprehension dataset with\nmore than 28,000 passages and nearly 100,000\nquestions. The dataset is collected from English\nexaminations in China, which are designed for\nmiddle and high school students. In RACE, each\npassage is associated with multiple questions. For\nevery question, the task is to select one correct an-\nswer from four options. RACE has signiﬁcantly\nlonger context than other popular reading compre-\nhension datasets and the proportion of questions\nthat requires reasoning is very large.\n4 Training Procedure Analysis\nThis section explores and quantiﬁes which choices\nare important for successfully pretraining BERT\nmodels. We keep the model architecture ﬁxed.7\nSpeciﬁcally, we begin by training BERT models\nwith the same conﬁguration as BERT BASE (L=\n12,H= 768 ,A= 12 , 110M params).\n4.1 Static vs. Dynamic Masking\nAs discussed in Section 2, BERT relies on ran-\ndomly masking and predicting tokens. The orig-\ninal BERT implementation performed masking\nonce during data preprocessing, resulting in a sin-\nglestatic mask. To avoid using the same mask for\neach training instance in every epoch, training data\nwas duplicated 10 times so that each sequence is\nmasked in 10 different ways over the 40 epochs of\ntraining. Thus, each training sequence was seen\nwith the same mask four times during training.\nWe compare this strategy with dynamic mask-\ningwhere we generate the masking pattern every\ntime we feed a sequence to the model. This be-\ncomes crucial when pretraining for more steps or\nwith larger datasets.\n7Studying architectural changes, including larger archi-\ntectures, is an important area for future work.Masking SQuAD 2.0 MNLI-m SST-2\nreference 76.3 84.3 92.8\nOur reimplementation:\nstatic 78.3 84.3 92.5\ndynamic 78.7 84.0 92.9\nTable 1: Comparison between static and dynamic\nmasking for BERT BASE. We report F1 for SQuAD and\naccuracy for MNLI-m and ', 'improves performance on down-\nstream tasks; (3) Our training improvements show\nthat masked language model pretraining, under\nthe right design choices, is competitive with all\nother recently published methods. We release our\nmodel, pretraining and ﬁne-tuning code imple-\nmented in PyTorch ( Paszke et al. ,2017 ).\n2 Background\nIn this section, we give a brief overview of the\nBERT ( Devlin et al. ,2019 ) pretraining approach\nand some of the training choices that we will ex-\namine experimentally in the following section.\n2.1 Setup\nBERT takes as input a concatenation of two\nsegments (sequences of tokens), x1,...,x N\nandy1,...,yM. Segments usually consist of\nmore than one natural sentence. The two seg-\nments are presented as a single input sequence\nto BERT with special tokens delimiting them:\n[CLS],x1,...,x N,[SEP],y1,...,yM,[EOS].\nMandNare constrained such that M+N < T ,\nwhereTis a parameter that controls the maximum\nsequence length during training.\nThe model is ﬁrst pretrained on a large unla-\nbeled text corpus and subsequently ﬁnetuned us-\ning end-task labeled data.\n2.2 Architecture\nBERT uses the now ubiquitous transformer archi-\ntecture ( Vaswani et al. ,2017 ), which we will not\nreview in detail. We use a transformer architecture\nwithLlayers. Each block uses Aself-attention\nheads and hidden dimension H.\n2.3 Training Objectives\nDuring pretraining, BERT uses two objectives:\nmasked language modeling and next sentence pre-\ndiction.\nMasked Language Model (MLM) A random\nsample of the tokens in the input sequence is\nselected and replaced with the special token\n[MASK]. The MLM objective is a cross-entropy\nloss on predicting the masked tokens. BERT uni-\nformly selects 15% of the input tokens for possi-\nble replacement. Of the selected tokens, 80% are\nreplaced with [MASK], 10% are left unchanged,and 10% are replaced by a randomly selected vo-\ncabulary token.\nIn the original implementation, random mask-\ning ']",Masked LM (MLM) and Next Sentence Prediction (NSP).,masked language modeling and next sentence prediction,1.0,1.0,0.7825278639793396
"What model sizes are reported for BERT, and what are their specifications?","['and conﬁgurations listed in Table 2. The 355M\nmodel is equivalent in size and conﬁguration of BERT-Large\nmodel (Devlin et al., 2018). The 2.5B model is bigger than\nthe previous largest GPT-2 model, and the 8.3B model is\nlarger than any left-to-right transformer language model\never trained, to the best of our knowledge. To train and eval-\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 2. Model conﬁgurations used for GPT-2.\nHidden Time\nParameter Layers Hidden Attn Size Total per\nCount Size Heads per GPUs Epoch\nHead (days)\n355M 24 1024 16 64 64 0.86\n2.5B 54 1920 20 96 128 2.27\n8.3B 72 3072 24 128 512 2.10\nTable 3. Zero-shot results. SOTA are from (Khandelwal et al.,\n2019) for Wikitext103 and (Radford et al., 2019) for LAMBADA.\nModel Wikitext103 LAMBADA\nPerplexity↓ Accuracy↑\n355M 19.31 45.18%\n2.5B 12.76 61.73%\n8.3B 10.81 66.51%\nPrevious SOTA 15.79 63.24%\nuate our language models we use the procedure described in\nsection 4. Table 2 also lists the time it takes to advance one\nepoch which is equivalent to 68,507 iterations. For example,\nfor the 8.3B model on 512 GPUs, each epoch takes around\ntwo days. Compared to the conﬁgurations used for our scal-\ning studies in Table 1, the 2.5B model is the same, the 8.3B\nmodel has 24 attention heads instead of 32, and the 355M is\nmuch smaller than any seen previously while still using 64\nGPUs to train, leading to the much lower time per epoch.\nFigure 6 shows validation perpelixity as a function of num-\nber of iterations. As the model size increases, the validation\nperpelixity decreases and reaches a validation perplexity of\n9.27 for the 8.3B model. We report the zero-shot evaluation\nof the trained models on the ', 'in\nour training data.\n5.3. Bi-directional Transformer Results Using BERT\nIn this section, we apply our methodology to BERT-style\ntransformer models and study the effect of model scaling\non several downstream tasks. Prior work (Lan et al., 2019)\nfound that increasing model size beyond BERT-large with\n336M parameters results in unexpected model degradation.\nTo address this degradation, the authors of that work (Lan\net al., 2019) introduced parameter sharing and showed that\nthat their models scale much better compared to the original\nBERT model.\nWe further investigated this behaviour and empirically\ndemonstrated that rearranging the order of the layer nor-\nmalization and the residual connections as shown in Figure\n7 is critical to enable the scaling of the BERT-style mod-\nels beyond BERT-Large. The architecture (b) in Figure 7\neliminates instabilities observed using the original BERT\narchitecture in (a) and also has a lower training loss. To\nthe best of our knowledge, we are the ﬁrst to report such a\nchange enables training larger BERT models.\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 5. Development set results for MNLI, QQP, SQuAD 1.1 and SQuAD 2.0 and test set results for RACE. The trained tokens represents\nconsumed tokens during model pretraining (proportional to batch size times number of iterations) normalized by consumed tokens during\nmodel pretraining for our 336M model.\nModeltrained tokens MNLI m/mm QQP SQuAD 1.1 SQuAD 2.0 RACE m/h\nratio accuracy accuracy F1 / EM F1 / EM accuracy\n(dev set) (dev set) (dev set) (dev set) (test set)\nRoBERTa (Liu et al., 2019b) 2 90.2 / 90.2 92.2 94.6 / 88.9 89.4 / 86.5 83.2 (86.5 / 81.8)\nALBERT (Lan et al., 2019) 3 90.8 92.2 94.8 / 89.3 90.2 ', '80.5, compared to OpenAI GPT, which obtains\n72.8 as of the date of writing.\nWe ﬁnd that BERT LARGE signiﬁcantly outper-\nforms BERT BASE across all tasks, especially those\nwith very little training data. The effect of model\nsize is explored more thoroughly in Section 5.2.\n4.2 SQuAD v1.1\nThe Stanford Question Answering Dataset\n(SQuAD v1.1) is a collection of 100k crowd-\nsourced question/answer pairs (Rajpurkar et al.,\n2016). Given a question and a passage from\n9The GLUE data set distribution does not include the Test\nlabels, and we only made a single GLUE evaluation server\nsubmission for each of BERT BASE and BERT LARGE .\n10https://gluebenchmark.com/leaderboardWikipedia containing the answer, the task is to\npredict the answer text span in the passage.\nAs shown in Figure 1, in the question answer-\ning task, we represent the input question and pas-\nsage as a single packed sequence, with the ques-\ntion using the Aembedding and the passage using\ntheBembedding. We only introduce a start vec-\ntorS∈RHand an end vector E∈RHduring\nﬁne-tuning. The probability of word ibeing the\nstart of the answer span is computed as a dot prod-\nuct between TiandSfollowed by a softmax over\nall of the words in the paragraph: Pi=eS·Ti∑\njeS·Tj.\nThe analogous formula is used for the end of the\nanswer span. The score of a candidate span from\npositionito positionjis deﬁned as S·Ti+E·Tj,\nand the maximum scoring span where j≥iis\nused as a prediction. The training objective is the\nsum of the log-likelihoods of the correct start and\nend positions. We ﬁne-tune for 3 epochs with a\nlearning rate of 5e-5 and a batch size of 32.\nTable 2 shows top leaderboard entries as well\nas results from top published systems (Seo et al.,\n2017; Clark and Gardner, 2018; ']","BERTBASE (L=12, H=768, A=12, Total Parameters=110M) and BERTLARGE (L=24, H=1024, A=16, Total Parameters=340M).","355M, 2.5B, and 8.3B models are reported for BERT. Their specifications are as follows:
- 355M model: 24 layers, 1024 hidden size, 16 attention heads, total of 64 GPUs, 0.86 days per epoch
- 2.5B model: 54 layers, 1920 hidden size, 20 attention heads, total of 96 GPUs, 2.27 days per epoch
- 8.3B model: 72 layers, 3072 hidden size, 24 attention heads, total of 128 GPUs, 2.10 days per epoch",1.0,1.0,0.6087031364440918
How does BERT's architecture facilitate the use of a unified model across diverse NLP tasks?,"['the H= 768 and 4096 for the H= 1024 .\n4We note that in the literature the bidirectional Trans-\x0cInput/Output Representations To make BERT\nhandle a variety of down-stream tasks, our input\nrepresentation is able to unambiguously represent\nboth a single sentence and a pair of sentences\n(e.g.,⟨Question, Answer⟩) in one token sequence.\nThroughout this work, a “sentence” can be an arbi-\ntrary span of contiguous text, rather than an actual\nlinguistic sentence. A “sequence” refers to the in-\nput token sequence to BERT, which may be a sin-\ngle sentence or two sentences packed together.\nWe use WordPiece embeddings (Wu et al.,\n2016) with a 30,000 token vocabulary. The ﬁrst\ntoken of every sequence is always a special clas-\nsiﬁcation token ( [CLS] ). The ﬁnal hidden state\ncorresponding to this token is used as the ag-\ngregate sequence representation for classiﬁcation\ntasks. Sentence pairs are packed together into a\nsingle sequence. We differentiate the sentences in\ntwo ways. First, we separate them with a special\ntoken ( [SEP] ). Second, we add a learned embed-\nding to every token indicating whether it belongs\nto sentence Aor sentence B. As shown in Figure 1,\nwe denote input embedding as E, the ﬁnal hidden\nvector of the special [CLS] token asC∈RH,\nand the ﬁnal hidden vector for the ithinput token\nasTi∈RH.\nFor a given token, its input representation is\nconstructed by summing the corresponding token,\nsegment, and position embeddings. A visualiza-\ntion of this construction can be seen in Figure 2.\n3.1 Pre-training BERT\nUnlike Peters et al. (2018a) and Radford et al.\n(2018), we do not use traditional left-to-right or\nright-to-left language models to pre-train BERT.\nInstead, we pre-train BERT using two unsuper-\nvised tasks, described in this section. This step\nis presented ', 'BERT: Pre-training of Deep Bidirectional Transformers for\nLanguage Understanding\nJacob Devlin Ming-Wei Chang Kenton Lee Kristina Toutanova\nGoogle AI Language\n{jacobdevlin,mingweichang,kentonl,kristout }@google.com\nAbstract\nWe introduce a new language representa-\ntion model called BERT , which stands for\nBidirectional Encoder Representations from\nTransformers. Unlike recent language repre-\nsentation models (Peters et al., 2018a; Rad-\nford et al., 2018), BERT is designed to pre-\ntrain deep bidirectional representations from\nunlabeled text by jointly conditioning on both\nleft and right context in all layers. As a re-\nsult, the pre-trained BERT model can be ﬁne-\ntuned with just one additional output layer\nto create state-of-the-art models for a wide\nrange of tasks, such as question answering and\nlanguage inference, without substantial task-\nspeciﬁc architecture modiﬁcations.\nBERT is conceptually simple and empirically\npowerful. It obtains new state-of-the-art re-\nsults on eleven natural language processing\ntasks, including pushing the GLUE score to\n80.5% (7.7% point absolute improvement),\nMultiNLI accuracy to 86.7% (4.6% absolute\nimprovement), SQuAD v1.1 question answer-\ning Test F1 to 93.2 (1.5 point absolute im-\nprovement) and SQuAD v2.0 Test F1 to 83.1\n(5.1 point absolute improvement).\n1 Introduction\nLanguage model pre-training has been shown to\nbe effective for improving many natural language\nprocessing tasks (Dai and Le, 2015; Peters et al.,\n2018a; Radford et al., 2018; Howard and Ruder,\n2018). These include sentence-level tasks such as\nnatural language inference (Bowman et al., 2015;\nWilliams et al., 2018) and paraphrasing (Dolan\nand Brockett, 2005), which aim to predict the re-\nlationships between sentences by analyzing them\nholistically, as well as token-level tasks such as\nnamed entity recognition and question answering,\nwhere models are required to produce ﬁne-grained\noutput at the token level (Tjong Kim Sang and\nDe Meulder, 2003; Rajpurkar et al., 2016).There are two existing strategies for apply-\ning pre-trained language representations to down-\nstream ', 'is a\nlarge-scale reading comprehension dataset with\nmore than 28,000 passages and nearly 100,000\nquestions. The dataset is collected from English\nexaminations in China, which are designed for\nmiddle and high school students. In RACE, each\npassage is associated with multiple questions. For\nevery question, the task is to select one correct an-\nswer from four options. RACE has signiﬁcantly\nlonger context than other popular reading compre-\nhension datasets and the proportion of questions\nthat requires reasoning is very large.\n4 Training Procedure Analysis\nThis section explores and quantiﬁes which choices\nare important for successfully pretraining BERT\nmodels. We keep the model architecture ﬁxed.7\nSpeciﬁcally, we begin by training BERT models\nwith the same conﬁguration as BERT BASE (L=\n12,H= 768 ,A= 12 , 110M params).\n4.1 Static vs. Dynamic Masking\nAs discussed in Section 2, BERT relies on ran-\ndomly masking and predicting tokens. The orig-\ninal BERT implementation performed masking\nonce during data preprocessing, resulting in a sin-\nglestatic mask. To avoid using the same mask for\neach training instance in every epoch, training data\nwas duplicated 10 times so that each sequence is\nmasked in 10 different ways over the 40 epochs of\ntraining. Thus, each training sequence was seen\nwith the same mask four times during training.\nWe compare this strategy with dynamic mask-\ningwhere we generate the masking pattern every\ntime we feed a sequence to the model. This be-\ncomes crucial when pretraining for more steps or\nwith larger datasets.\n7Studying architectural changes, including larger archi-\ntectures, is an important area for future work.Masking SQuAD 2.0 MNLI-m SST-2\nreference 76.3 84.3 92.8\nOur reimplementation:\nstatic 78.3 84.3 92.5\ndynamic 78.7 84.0 92.9\nTable 1: Comparison between static and dynamic\nmasking for BERT BASE. We report F1 for SQuAD and\naccuracy for MNLI-m and ']","BERT uses a multi-layer bidirectional Transformer encoder architecture, allowing for minimal task-specific architecture modifications in fine-tuning.","BERT's architecture facilitates the use of a unified model across diverse NLP tasks by pretraining deep bidirectional representations from unlabeled text, jointly conditioning on both left and right context in all layers. This allows the pre-trained BERT model to be fine-tuned with just one additional output layer to achieve state-of-the-art performance on a wide range of tasks without substantial task-specific architecture modifications.",1.0,1.0,0.6946385502815247
Can you describe the modifications LLaMA makes to the transformer architecture for improved performance?,"['to\nthe existing PyTorch transformer implementations. We ef-\nﬁciently trained transformer based models up to 8.3 bil-\nlion parameter on 512 NVIDIA V100 GPUs with 8-way\nmodel parallelism and achieved up to 15.1 PetaFLOPs sus-\ntained over the entire application. We also showed that for\nBERT models, careful attention to the placement of layer\nnormalization in BERT-like models is critical to achieving\nincreased accuracies as the model size increases. We study\nthe effect of model size on down-stream task accuracy and\nachieve far superior results on downstream tasks and estab-\nlish new SOTA for WikiText103, LAMBADA, and RACE\ndatasets. Finally, we open sourced our code to enable future\nwork leveraging model parallel transformers.\nThere are several directions for future work. Continuing\nto increase the scale of pretraining is a promising line of\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\ninvestigation that will further test existing deep learning\nhardware and software. To realize this, improvements in\nthe efﬁciency and memory footprint of optimizers will be\nneeded. In addition, training a model with more than 16\nbillion parameters will demand more memory than is avail-\nable within 16 GPUs of a DGX-2H box. For such models, a\nhybrid intra-layer and inter-layer model parallelism along\nwith inter-node model parallelism would be more suitable.\nThree other directions of investigation include (a) pretrain-\ning different model families (XLNet, T5), (b) evaluating per-\nformance of large models across more difﬁcult and diverse\ndownstream tasks (e.g. Generative Question Answering,\nSummarization, and Conversation), and (c) using knowl-\nedge distillation to train small student models from these\nlarge pretrained teacher models.\nReferences\nAbadi, M., Agarwal, A., Barham, P., Brevdo, E., Chen, Z.,\nCitro, C., Corrado, G. S., Davis, A., Dean, J., Devin, M.,\nGhemawat, S., Goodfellow, I., Harp, ', 'Murtadha,\nBo Wen, and Yunfeng Liu. 2021. Roformer: En-\nhanced transformer with rotary position embedding.\narXiv preprint arXiv:2104.09864 .\nRomal Thoppilan, Daniel De Freitas, Jamie Hall,\nNoam Shazeer, Apoorv Kulshreshtha, Heng-Tze\nCheng, Alicia Jin, Taylor Bos, Leslie Baker, Yu Du,\nYaGuang Li, Hongrae Lee, Huaixiu Steven Zheng,\nAmin Ghafouri, Marcelo Menegali, Yanping Huang,\nMaxim Krikun, Dmitry Lepikhin, James Qin, De-\nhao Chen, Yuanzhong Xu, Zhifeng Chen, Adam\nRoberts, Maarten Bosma, Vincent Zhao, Yanqi\nZhou, Chung-Ching Chang, Igor Krivokon, Will\nRusch, Marc Pickett, Pranesh Srinivasan, Laichee\nMan, Kathleen Meier-Hellstern, Meredith Ringel\nMorris, Tulsee Doshi, Renelito Delos Santos, Toju\nDuke, Johnny Soraker, Ben Zevenbergen, Vinod-\nkumar Prabhakaran, Mark Diaz, Ben Hutchinson,\nKristen Olson, Alejandra Molina, Erin Hoffman-\nJohn, Josh Lee, Lora Aroyo, Ravi Rajakumar,\nAlena Butryna, Matthew Lamm, Viktoriya Kuzmina,\nJoe Fenton, Aaron Cohen, Rachel Bernstein, Ray\nKurzweil, Blaise Aguera-Arcas, Claire Cui, Marian\nCroak, Ed Chi, and Quoc Le. 2022. Lamda: Lan-\nguage models for dialog applications.\nA. M. Turing. 1950. Computing Machinery and Intel-\nligence . [Oxford University Press, Mind Associa-\ntion].\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob\nUszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz\nKaiser, and Illia Polosukhin. 2017. Attention is all\nyou need. In Advances in Neural Information Pro-\ncessing Systems 30 , pages 5998–6008.\nBen Wang and Aran Komatsuzaki. 2021. GPT-J-\n6B: A 6 Billion Parameter Autoregressive Lan-\nguage Model. https://github.com/kingoflolz/\nmesh-transformer-jax .\nXuezhi Wang, Jason Wei, Dale Schuurmans, Quoc\nLe, Ed Chi, Sharan Narang, Aakanksha Chowdhery,\x0cand Denny Zhou. 2022. Self-consistency improves\nchain of thought reasoning in language models.\nJason Wei, Yi Tay, Rishi Bommasani, Colin Raffel,\nBarret Zoph, Sebastian Borgeaud, Dani Yogatama,\nMaarten Bosma, Denny Zhou, Donald Metzler, et al.\n2022. Emergent abilities of large language models.\narXiv preprint arXiv:2206.07682 .\nGuillaume Wenzek, Marie-Anne Lachaux, Alexis Con-\nneau, Vishrav Chaudhary, Francisco Guzmán, Ar-\nmand Joulin, and Edouard Grave. ', 'fastest to train but the\nfastest at inference, and although it may be cheaper\nto train a large model to reach a certain level of\n∗Equal contribution. Correspondence: {htouvron,\nthibautlav,gizacard,egrave,glample}@meta.com\n1https://github.com/facebookresearch/llamaperformance, a smaller one trained longer will\nultimately be cheaper at inference. For instance,\nalthough Hoffmann et al. (2022) recommends\ntraining a 10B model on 200B tokens, we ﬁnd\nthat the performance of a 7B model continues to\nimprove even after 1T tokens.\nThe focus of this work is to train a series of\nlanguage models that achieve the best possible per-\nformance at various inference budgets, by training\non more tokens than what is typically used. The\nresulting models, called LLaMA , ranges from 7B\nto 65B parameters with competitive performance\ncompared to the best existing LLMs. For instance,\nLLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 ×smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. “Books – 2TB” or\n“Social media conversations”). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modiﬁcations we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our\ntraining method. We ']"," LLaMA incorporates pre-normalization (using RMSNorm), the SwiGLU activation function, and rotary embeddings (RoPE) into its transformer architecture for enhanced training stability and performance.",The context does not provide specific details on the modifications LLaMA makes to the transformer architecture for improved performance.,0.8,0.0,0.5163401365280151
"How does LLaMA's approach to embedding layer optimization differ from traditional transformer models, and what are the specific benefits of these modifications?","['the same general architec-\nture as BERT. The token-type embeddings and the pooler are removed while the number of layers\nis reduced by a factor of 2. Most of the operations used in the Transformer architecture ( linear\nlayer andlayer normalisation ) are highly optimized in modern linear algebra frameworks and our\ninvestigations showed that variations on the last dimension of the tensor (hidden size dimension) have\na smaller impact on computation efﬁciency (for a ﬁxed parameters budget) than variations on other\nfactors like the number of layers. Thus we focus on reducing the number of layers.\nStudent initialization In addition to the previously described optimization and architectural choices,\nan important element in our training procedure is to ﬁnd the right initialization for the sub-network to\nconverge. Taking advantage of the common dimensionality between teacher and student networks,\nwe initialize the student from the teacher by taking one layer out of two.\n2https://github.com/huggingface/transformers\n3E.g. BERT-base’s predictions for a masked token in "" I think this is the beginning of a\nbeautiful [MASK] "" comprise two high probability tokens ( dayandlife) and a long tail of valid predictions\n(future ,story ,world . . . ).\n2\x0cTable 1: DistilBERT retains 97% of BERT performance. Comparison on the dev sets of the\nGLUE benchmark. ELMo results as reported by the authors. BERT and DistilBERT results are the\nmedians of 5 runs with different seeds.\nModel Score CoLA MNLI MRPC QNLI QQP RTE SST-2 STS-B WNLI\nELMo 68.7 44.1 68.6 76.6 71.1 86.2 53.4 91.5 70.4 56.3\nBERT-base 79.5 56.3 86.7 88.6 91.8 89.6 69.3 92.7 89.0 53.5\nDistilBERT 77.0 51.3 82.2 87.5 89.2 88.5 59.9 91.3 86.9 56.3\nTable 2: DistilBERT ', 'in\nour training data.\n5.3. Bi-directional Transformer Results Using BERT\nIn this section, we apply our methodology to BERT-style\ntransformer models and study the effect of model scaling\non several downstream tasks. Prior work (Lan et al., 2019)\nfound that increasing model size beyond BERT-large with\n336M parameters results in unexpected model degradation.\nTo address this degradation, the authors of that work (Lan\net al., 2019) introduced parameter sharing and showed that\nthat their models scale much better compared to the original\nBERT model.\nWe further investigated this behaviour and empirically\ndemonstrated that rearranging the order of the layer nor-\nmalization and the residual connections as shown in Figure\n7 is critical to enable the scaling of the BERT-style mod-\nels beyond BERT-Large. The architecture (b) in Figure 7\neliminates instabilities observed using the original BERT\narchitecture in (a) and also has a lower training loss. To\nthe best of our knowledge, we are the ﬁrst to report such a\nchange enables training larger BERT models.\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 5. Development set results for MNLI, QQP, SQuAD 1.1 and SQuAD 2.0 and test set results for RACE. The trained tokens represents\nconsumed tokens during model pretraining (proportional to batch size times number of iterations) normalized by consumed tokens during\nmodel pretraining for our 336M model.\nModeltrained tokens MNLI m/mm QQP SQuAD 1.1 SQuAD 2.0 RACE m/h\nratio accuracy accuracy F1 / EM F1 / EM accuracy\n(dev set) (dev set) (dev set) (dev set) (test set)\nRoBERTa (Liu et al., 2019b) 2 90.2 / 90.2 92.2 94.6 / 88.9 89.4 / 86.5 83.2 (86.5 / 81.8)\nALBERT (Lan et al., 2019) 3 90.8 92.2 94.8 / 89.3 90.2 ', 'self-attention. The subsequent GEMM from the output\nlinear layer (after self attention) is parallelized along its\nrows and takes the output of the parallel attention layer di-\nrectly, without requiring communication between the GPUs.\nThis approach for both the MLP and self attention layer\nfuses groups of two GEMMs, eliminates a synchronization\npoint in between, and results in better scaling. This enables\nus to perform all GEMMs in a simple transformer layer\nusing only two all-reduces in the forward path and two in\nthe backward path (see Figure 4).\nThe transformer language model has an output embedding\nwith the dimension of hidden-size ( H) times vocabulary-\nsize (v). Since the vocabulary size is on the order of tens\nof thousands of tokens for modern language models (for\nexample, GPT-2 used a vocabulary size of 50,257), it is ben-\neﬁcial to parallelize the output embedding GEMM. How-\never, in transformer language models, the output embed-\nding layer shares weights with the input embedding, requir-\ning modiﬁcations to both. We parallelize the input embed-\nding weight matrix EH×valong the vocabulary dimension\nE= [E1,E2](column-wise). Since each partition now only\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nFigure 4. Communication operations in a transformer layer. There\nare 4 total communication operations in the forward and backward\npass of a single model parallel transformer layer.\ncontains a portion of the embedding table, an all-reduce ( g\noperator) is required after the input embedding. For the\noutput embedding, one approach is to perform the parallel\nGEMM [Y1,Y2] = [XE 1,XE 2]to obtain the logits, add an\nall-gatherY=all-gather ([Y1,Y2]), and send the results to\nthe cross-entropy loss function. However, for this case, the\nall-gather will communicate b×s×velements (bis the\nbatch-size and sis the ']","LLaMA introduces optimizations in its embedding layer through techniques like factorized embeddings and the use of advanced activation functions, such as SwiGLU, for efficient computation and memory usage. These modifications benefit the model by enhancing learning efficiency and enabling the scaling of model parameters without a proportional increase in computational demand.","LLaMA's approach to embedding layer optimization differs from traditional transformer models by parallelizing the output embedding GEMM and modifying weights to enable better scaling and efficiency. This allows for faster computation of the output embedding layer, which is crucial for large language models with extensive vocabulary sizes. The specific benefits of these modifications include improved parallelization of operations in the transformer layer, reduced synchronization points, and better scaling of the model. This ultimately leads to increased training efficiency and the ability to train larger language models effectively.",1.0,1.0,0.7325854301452637
"How were the questions for the multitask test sourced, and what was the criteria for their inclusion?","['and undergraduate students from freely available\nsources online. These include practice questions for tests such as the Graduate Record Examination\nand the United States Medical Licensing Examination. It also includes questions designed for\nundergraduate courses and questions designed for readers of Oxford University Press books. Some\ntasks cover a subject, like psychology, but at a speciﬁc level of difﬁculty, such as “Elementary,”\n“High School,” “College,” or “Professional.” For example, the “Professional Psychology” task draws\non questions from freely available practice questions for the Examination for Professional Practice\nin Psychology, while the “High School Psychology” task has questions like those from Advanced\nPlacement Psychology examinations.\nWe collected 15908 questions in total, which we split into a few-shot development set, a validation\nset, and a test set. The few-shot development set has 5questions per subject, the validation set may\nbe used for selecting hyperparameters and is made of 1540 questions, and the test set has 14079\nquestions. Each subject contains 100test examples at the minimum, which is longer than most exams\ndesigned to assess people.\nHuman-level accuracy on this test varies. Unspecialized humans from Amazon Mechanical Turk\nobtain 34.5%accuracy on this test. Meanwhile, expert-level performance can be far higher. For\nexample, real-world test-taker human accuracy at the 95th percentile is around 87% for US Medical\nLicensing Examinations, and these questions make up our “Professional Medicine” task. If we take\nthe 95th percentile human test-taker accuracy for exams that build up our test, and if we make an\neducated guess when such information is unavailable, we then estimate that expert-level accuracy is\napproximately 89.8%.\nSince our test aggregates different subjects and several levels of difﬁculty, we measure more than\nstraightforward commonsense ', 'Published as a conference paper at ICLR 2021\nMEASURING MASSIVE MULTITASK\nLANGUAGE UNDERSTANDING\nDan Hendrycks\nUC BerkeleyCollin Burns\nColumbia UniversitySteven Basart\nUChicagoAndy Zou\nUC Berkeley\nMantas Mazeika\nUIUCDawn Song\nUC BerkeleyJacob Steinhardt\nUC Berkeley\nABSTRACT\nWe propose a new test to measure a text model’s multitask accuracy. The test\ncovers 57 tasks including elementary mathematics, US history, computer science,\nlaw, and more. To attain high accuracy on this test, models must possess extensive\nworld knowledge and problem solving ability. We ﬁnd that while most recent\nmodels have near random-chance accuracy, the very largest GPT-3 model improves\nover random chance by almost 20 percentage points on average. However, on every\none of the 57 tasks, the best models still need substantial improvements before\nthey can reach expert-level accuracy. Models also have lopsided performance\nand frequently do not know when they are wrong. Worse, they still have near-\nrandom accuracy on some socially important subjects such as morality and law.\nBy comprehensively evaluating the breadth and depth of a model’s academic and\nprofessional understanding, our test can be used to analyze models across many\ntasks and to identify important shortcomings.\n1 I NTRODUCTION\nNatural Language Processing (NLP) models have achieved superhuman performance on a number of\nrecently proposed benchmarks. However, these models are still well below human level performance\nfor language understanding as a whole, suggesting a disconnect between our benchmarks and the\nactual capabilities of these models. The General Language Understanding Evaluation benchmark\n(GLUE) (Wang et al., 2018) was introduced in 2018 to evaluate performance on a wide range of NLP\ntasks, and top models achieved superhuman performance within a year. To address the shortcomings\nof GLUE, researchers designed the SuperGLUE benchmark with more difﬁcult tasks (Wang et al.,\n2019). About ', 'for humans, we exclude this task from our benchmark.\nInstructions tables begin on the following page.\n10https://www.kaggle.com/c/quora-insincere-questions-classification/data\n18\x0cTable 5: The instructions given to crowd-sourced worker describing the training phase for the Choice\nof Plausible Answers (COPA) task.\nThe New York University Center for Data Science is collecting your answers for use in research\non computer understanding of English. Thank you for your help!\nThis project is a training task that needs to be completed before working on the main project\non AMT named Human Performance: Plausible Answer. Once you are done with the training,\nplease proceed to the main task! The qualiﬁcation approval is not immediate but we will add\nyou to our qualiﬁed workers list within a day.\nIn this training, you must answer the question on the page and then, to see how you did, click\ntheCheck Work button at the bottom of the page before hitting Submit. The Check Work\nbutton will reveal the true label. Please use this training and the provided answers to build\nan understanding of what the answers to these questions look like (the main project, Human\nPerformance: Plausible Answer, does not have the answers on the page).\nTable 6: Task-speciﬁc instructions for Choice of Plausible Alternatives (COPA). These instructions\nwere provided during both training and annotation phases.\nPlausible Answer Instructions\nThe New York University Center for Data Science is collecting your answers for use in research\non computer understanding of English. Thank you for your help!\nWe will present you with a prompt sentence and a question. The question will either be about\nwhat caused the situation described in the prompt, or what a possible effect of that situation is.\nWe ']","Questions were manually collected by graduate and undergraduate students from freely available online sources, including practice questions for standardized tests and undergraduate courses, ensuring a wide representation of difficulty levels and subjects.","The questions for the multitask test were sourced from freely available online sources, including practice questions for tests such as the Graduate Record Examination and United States Medical Licensing Examination, questions designed for undergraduate courses, and questions designed for readers of Oxford University Press books. The criteria for their inclusion were based on subjects and specific levels of difficulty, such as ""Elementary,"" ""High School,"" ""College,"" or ""Professional.""",1.0,1.0,0.6454999446868896
How does BERT's performance on the GLUE benchmark compare to previous state-of-the-art models?,"['56.0 75.1\nBERT BASE 84.6/83.4 71.2 90.5 93.5 52.1 85.8 88.9 66.4 79.6\nBERT LARGE 86.7/85.9 72.1 92.7 94.9 60.5 86.5 89.3 70.1 82.1\nTable 1: GLUE Test results, scored by the evaluation server ( https://gluebenchmark.com/leaderboard ).\nThe number below each task denotes the number of training examples. The “Average” column is slightly different\nthan the ofﬁcial GLUE score, since we exclude the problematic WNLI set.8BERT and OpenAI GPT are single-\nmodel, single task. F1 scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, and\naccuracy scores are reported for the other tasks. We exclude entries that use BERT as one of their components.\nWe use a batch size of 32 and ﬁne-tune for 3\nepochs over the data for all GLUE tasks. For each\ntask, we selected the best ﬁne-tuning learning rate\n(among 5e-5, 4e-5, 3e-5, and 2e-5) on the Dev set.\nAdditionally, for BERT LARGE we found that ﬁne-\ntuning was sometimes unstable on small datasets,\nso we ran several random restarts and selected the\nbest model on the Dev set. With random restarts,\nwe use the same pre-trained checkpoint but per-\nform different ﬁne-tuning data shufﬂing and clas-\nsiﬁer layer initialization.9\nResults are presented in Table 1. Both\nBERT BASE and BERT LARGE outperform all sys-\ntems on all tasks by a substantial margin, obtaining\n4.5% and 7.0% respective average accuracy im-\nprovement over the prior state of the art. Note that\nBERT BASE and OpenAI GPT are nearly identical\nin terms of model architecture apart from the at-\ntention masking. For the largest and most widely\nreported GLUE task, MNLI, BERT obtains a 4.6%\nabsolute accuracy improvement. On the ofﬁcial\nGLUE leaderboard10, BERT LARGE obtains a score\nof ', 'recent work in this area.\nSince its release, GLUE has been used as a testbed and showcase by the developers of several\ninﬂuential models, including GPT (Radford et al., 2018) and BERT (Devlin et al., 2019). As shown\nin Figure 1, progress on GLUE since its release has been striking. On GLUE, GPT and BERT\nachieved scores of 72.8 and 80.2 respectively, relative to 66.5 for an ELMo-based model (Peters\net al., 2018) and 63.7 for the strongest baseline with no multitask learning or pretraining above the\nword level. Recent models (Liu et al., 2019d; Yang et al., 2019) have clearly surpassed estimates of\nnon-expert human performance on GLUE (Nangia and Bowman, 2019). The success of these models\non GLUE has been driven by ever-increasing model capacity, compute power, and data quantity, as\nwell as innovations in model expressivity (from recurrent to bidirectional recurrent to multi-headed\ntransformer encoders) and degree of contextualization (from learning representation of words in\nisolation to using uni-directional contexts and ultimately to leveraging bidirectional contexts).\nIn parallel to work scaling up pretrained models, several studies have focused on complementary\nmethods for augmenting performance of pretrained models. Phang et al. (2018) show that BERT can\nbe improved using two-stage pretraining, i.e., ﬁne-tuning the pretrained model on an intermediate\ndata-rich supervised task before ﬁne-tuning it again on a data-poor target task. Liu et al. (2019d,c) and\nBach et al. (2018) get further improvements respectively via multi-task ﬁnetuning and using massive\namounts of weak supervision. Clark et al. (2019b) demonstrate that knowledge distillation (Hinton\net al., 2015; Furlanello et al., 2018) can lead to student networks that outperform their teachers.\nOverall, the quantity and ', '80.5, compared to OpenAI GPT, which obtains\n72.8 as of the date of writing.\nWe ﬁnd that BERT LARGE signiﬁcantly outper-\nforms BERT BASE across all tasks, especially those\nwith very little training data. The effect of model\nsize is explored more thoroughly in Section 5.2.\n4.2 SQuAD v1.1\nThe Stanford Question Answering Dataset\n(SQuAD v1.1) is a collection of 100k crowd-\nsourced question/answer pairs (Rajpurkar et al.,\n2016). Given a question and a passage from\n9The GLUE data set distribution does not include the Test\nlabels, and we only made a single GLUE evaluation server\nsubmission for each of BERT BASE and BERT LARGE .\n10https://gluebenchmark.com/leaderboardWikipedia containing the answer, the task is to\npredict the answer text span in the passage.\nAs shown in Figure 1, in the question answer-\ning task, we represent the input question and pas-\nsage as a single packed sequence, with the ques-\ntion using the Aembedding and the passage using\ntheBembedding. We only introduce a start vec-\ntorS∈RHand an end vector E∈RHduring\nﬁne-tuning. The probability of word ibeing the\nstart of the answer span is computed as a dot prod-\nuct between TiandSfollowed by a softmax over\nall of the words in the paragraph: Pi=eS·Ti∑\njeS·Tj.\nThe analogous formula is used for the end of the\nanswer span. The score of a candidate span from\npositionito positionjis deﬁned as S·Ti+E·Tj,\nand the maximum scoring span where j≥iis\nused as a prediction. The training objective is the\nsum of the log-likelihoods of the correct start and\nend positions. We ﬁne-tune for 3 epochs with a\nlearning rate of 5e-5 and a batch size of 32.\nTable 2 shows top leaderboard entries as well\nas results from top published systems (Seo et al.,\n2017; Clark and Gardner, 2018; ']","BERT achieved new state-of-the-art on the GLUE benchmark (80.5%), surpassing the previous best models.","BERT's performance on the GLUE benchmark outperforms all previous state-of-the-art models by a substantial margin, obtaining 4.5% and 7.0% respective average accuracy improvement.",1.0,1.0,0.9315898418426514
"What significant improvements does BERT bring to the SQuAD v1.1,v2.0 and v13.5 tasks compared to prior models?","['in\nour training data.\n5.3. Bi-directional Transformer Results Using BERT\nIn this section, we apply our methodology to BERT-style\ntransformer models and study the effect of model scaling\non several downstream tasks. Prior work (Lan et al., 2019)\nfound that increasing model size beyond BERT-large with\n336M parameters results in unexpected model degradation.\nTo address this degradation, the authors of that work (Lan\net al., 2019) introduced parameter sharing and showed that\nthat their models scale much better compared to the original\nBERT model.\nWe further investigated this behaviour and empirically\ndemonstrated that rearranging the order of the layer nor-\nmalization and the residual connections as shown in Figure\n7 is critical to enable the scaling of the BERT-style mod-\nels beyond BERT-Large. The architecture (b) in Figure 7\neliminates instabilities observed using the original BERT\narchitecture in (a) and also has a lower training loss. To\nthe best of our knowledge, we are the ﬁrst to report such a\nchange enables training larger BERT models.\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 5. Development set results for MNLI, QQP, SQuAD 1.1 and SQuAD 2.0 and test set results for RACE. The trained tokens represents\nconsumed tokens during model pretraining (proportional to batch size times number of iterations) normalized by consumed tokens during\nmodel pretraining for our 336M model.\nModeltrained tokens MNLI m/mm QQP SQuAD 1.1 SQuAD 2.0 RACE m/h\nratio accuracy accuracy F1 / EM F1 / EM accuracy\n(dev set) (dev set) (dev set) (dev set) (test set)\nRoBERTa (Liu et al., 2019b) 2 90.2 / 90.2 92.2 94.6 / 88.9 89.4 / 86.5 83.2 (86.5 / 81.8)\nALBERT (Lan et al., 2019) 3 90.8 92.2 94.8 / 89.3 90.2 ', 'by two BiLSTMs.4\nThe results on each of the 9 tasks are showed on Table 1 along with the macro-score (average of\nindividual scores). Among the 9 tasks, DistilBERT is always on par or improving over the ELMo\nbaseline (up to 19 points of accuracy on STS-B). DistilBERT also compares surprisingly well to\nBERT, retaining 97% of the performance with 40% fewer parameters.\n4.1 Downstream task benchmark\nDownstream tasks We further study the performances of DistilBERT on several downstream tasks\nunder efﬁcient inference constraints: a classiﬁcation task (IMDb sentiment classiﬁcation - Maas et al.\n[2011]) and a question answering task (SQuAD v1.1 - Rajpurkar et al. [2016]).\nAs shown in Table 2, DistilBERT is only 0.6% point behind BERT in test accuracy on the IMDb\nbenchmark while being 40% smaller. On SQuAD, DistilBERT is within 3.9 points of the full BERT.\nWe also studied whether we could add another step of distillation during the adaptation phase by\nﬁne-tuning DistilBERT on SQuAD using a BERT model previously ﬁne-tuned on SQuAD as a\n4We use jiant [Wang et al., 2019] to compute the baseline.\n3\x0cTable 4: Ablation study. Variations are relative to the model trained with triple loss and teacher\nweights initialization.\nAblation Variation on GLUE macro-score\n∅-Lcos-Lmlm -2.96\nLce-∅-Lmlm -1.46\nLce-Lcos-∅ -0.31\nTriple loss + random weights initialization -3.69\nteacher for an additional term in the loss (knowledge distillation). In this setting, there are thus two\nsuccessive steps of distillation, one during the pre-training phase and one during the adaptation phase.\nIn this case, we were able to reach interesting performances given the size of the model: 79.8 F1 and\n70.4 EM, i.e. within 3 points of the full model.\nSize and ', 'is a\nlarge-scale reading comprehension dataset with\nmore than 28,000 passages and nearly 100,000\nquestions. The dataset is collected from English\nexaminations in China, which are designed for\nmiddle and high school students. In RACE, each\npassage is associated with multiple questions. For\nevery question, the task is to select one correct an-\nswer from four options. RACE has signiﬁcantly\nlonger context than other popular reading compre-\nhension datasets and the proportion of questions\nthat requires reasoning is very large.\n4 Training Procedure Analysis\nThis section explores and quantiﬁes which choices\nare important for successfully pretraining BERT\nmodels. We keep the model architecture ﬁxed.7\nSpeciﬁcally, we begin by training BERT models\nwith the same conﬁguration as BERT BASE (L=\n12,H= 768 ,A= 12 , 110M params).\n4.1 Static vs. Dynamic Masking\nAs discussed in Section 2, BERT relies on ran-\ndomly masking and predicting tokens. The orig-\ninal BERT implementation performed masking\nonce during data preprocessing, resulting in a sin-\nglestatic mask. To avoid using the same mask for\neach training instance in every epoch, training data\nwas duplicated 10 times so that each sequence is\nmasked in 10 different ways over the 40 epochs of\ntraining. Thus, each training sequence was seen\nwith the same mask four times during training.\nWe compare this strategy with dynamic mask-\ningwhere we generate the masking pattern every\ntime we feed a sequence to the model. This be-\ncomes crucial when pretraining for more steps or\nwith larger datasets.\n7Studying architectural changes, including larger archi-\ntectures, is an important area for future work.Masking SQuAD 2.0 MNLI-m SST-2\nreference 76.3 84.3 92.8\nOur reimplementation:\nstatic 78.3 84.3 92.5\ndynamic 78.7 84.0 92.9\nTable 1: Comparison between static and dynamic\nmasking for BERT BASE. We report F1 for SQuAD and\naccuracy for MNLI-m and ']","BERT set new records on SQuAD v1.1 and v2.0, significantly outperforming the top leaderboard systems at the time. Version 13.5 doesn't exist. ","DistilBERT, a variant of BERT, brings significant improvements to the SQuAD v1.1, v2.0, and v1 3.5 tasks compared to prior models. It is always on par or improving over the ELMo baseline, up to 19 points of accuracy on STS-B. DistilBERT also compares surprisingly well to BERT, retaining 97% of the performance with 40% fewer parameters.",1.0,1.0,0.6024048328399658
"What unique aspect of the LLaMA training dataset distinguishes it from datasets used by models like GPT-3, Chinchilla, and PaLM?","['the ability of the model to\nfollow instructions. Since this is not the focus of\nthis paper, we only conducted a single experiment\nfollowing the same protocol as Chung et al. (2022)\nto train an instruct model, LLaMA-I.\nOPT 30B 26.1\nGLM 120B 44.8\nPaLM 62B 55.1\nPaLM-cont 62B 62.8\nChinchilla 70B 67.5\nLLaMA 65B 63.4\nOPT-IML-Max 30B 43.2\nFlan-T5-XXL 11B 55.1\nFlan-PaLM 62B 59.6\nFlan-PaLM-cont 62B 66.1\nLLaMA-I 65B 68.9\nTable 10: Instruction ﬁnetuning – MMLU (5-shot).\nComparison of models of moderate size with and with-\nout instruction ﬁnetuning on MMLU.In Table 10, we report the results of our instruct\nmodel LLaMA-I on MMLU and compare with ex-\nisting instruction ﬁnetuned models of moderate\nsizes, namely, OPT-IML (Iyer et al., 2022) and the\nFlan-PaLM series (Chung et al., 2022). All the re-\nported numbers are from the corresponding papers.\nDespite the simplicity of the instruction ﬁnetuning\napproach used here, we reach 68.9% on MMLU.\nLLaMA-I (65B) outperforms on MMLU existing\ninstruction ﬁnetuned models of moderate sizes, but\nare still far from the state-of-the-art, that is 77.4\nfor GPT code-davinci-002 on MMLU (numbers\ntaken from Iyer et al. (2022)). The details of the\nperformance on MMLU on the 57 tasks can be\nfound in Table 16 of the appendix.\n5 Bias, Toxicity and Misinformation\nLarge language models have been showed to re-\nproduce and amplify biases that are existing in\nthe training data (Sheng et al., 2019; Kurita et al.,\n2019), and to generate toxic or offensive con-\ntent (Gehman et al., 2020). As our training dataset\ncontains a large proportion of data from the Web,\nwe believe that it is crucial to determine the po-\ntential for our models to generate such content.\nTo understand the potential harm of LLaMA-65B,\nwe evaluate on different benchmarks that measure\ntoxic content ', 'fastest to train but the\nfastest at inference, and although it may be cheaper\nto train a large model to reach a certain level of\n∗Equal contribution. Correspondence: {htouvron,\nthibautlav,gizacard,egrave,glample}@meta.com\n1https://github.com/facebookresearch/llamaperformance, a smaller one trained longer will\nultimately be cheaper at inference. For instance,\nalthough Hoffmann et al. (2022) recommends\ntraining a 10B model on 200B tokens, we ﬁnd\nthat the performance of a 7B model continues to\nimprove even after 1T tokens.\nThe focus of this work is to train a series of\nlanguage models that achieve the best possible per-\nformance at various inference budgets, by training\non more tokens than what is typically used. The\nresulting models, called LLaMA , ranges from 7B\nto 65B parameters with competitive performance\ncompared to the best existing LLMs. For instance,\nLLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 ×smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. “Books – 2TB” or\n“Social media conversations”). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modiﬁcations we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our\ntraining method. We ', 'LLaMA: Open and Efﬁcient Foundation Language Models\nHugo Touvron∗, Thibaut Lavril∗, Gautier Izacard∗, Xavier Martinet\nMarie-Anne Lachaux, Timothee Lacroix, Baptiste Rozière, Naman Goyal\nEric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin\nEdouard Grave∗, Guillaume Lample∗\nMeta AI\nAbstract\nWe introduce LLaMA, a collection of founda-\ntion language models ranging from 7B to 65B\nparameters. We train our models on trillions\nof tokens, and show that it is possible to train\nstate-of-the-art models using publicly avail-\nable datasets exclusively, without resorting\nto proprietary and inaccessible datasets. In\nparticular, LLaMA-13B outperforms GPT-3\n(175B) on most benchmarks, and LLaMA-\n65B is competitive with the best models,\nChinchilla-70B and PaLM-540B. We release\nall our models to the research community1.\n1 Introduction\nLarge Languages Models (LLMs) trained on mas-\nsive corpora of texts have shown their ability to per-\nform new tasks from textual instructions or from a\nfew examples (Brown et al., 2020). These few-shot\nproperties ﬁrst appeared when scaling models to a\nsufﬁcient size (Kaplan et al., 2020), resulting in a\nline of work that focuses on further scaling these\nmodels (Chowdhery et al., 2022; Rae et al., 2021).\nThese efforts are based on the assumption that\nmore parameters will lead to better performance.\nHowever, recent work from Hoffmann et al. (2022)\nshows that, for a given compute budget, the best\nperformances are not achieved by the largest mod-\nels, but by smaller models trained on more data.\nThe objective of the scaling laws from Hoff-\nmann et al. (2022) is to determine how to best\nscale the dataset and model sizes for a particular\ntraining compute budget. However, this objective\ndisregards the inference budget, which becomes\ncritical when serving a language model at scale.\nIn this context, given a target level of performance,\nthe preferred model is not the ']"," LLaMA's training dataset is distinctive for being composed exclusively of publicly available data, unlike the datasets used for GPT-3, Chinchilla, and PaLM, which include proprietary or undocumented data.","The unique aspect of the LLaMA training dataset is that it is trained exclusively on publicly available datasets, without relying on proprietary and inaccessible datasets like other models such as GPT-3, Chinchilla, and PaLM.",1.0,1.0,0.9340405464172363
"What detailed methodology does LLaMA utilize to ensure the diversity of its pre-training data, particularly in the context of filtering and language identification?","['fastest to train but the\nfastest at inference, and although it may be cheaper\nto train a large model to reach a certain level of\n∗Equal contribution. Correspondence: {htouvron,\nthibautlav,gizacard,egrave,glample}@meta.com\n1https://github.com/facebookresearch/llamaperformance, a smaller one trained longer will\nultimately be cheaper at inference. For instance,\nalthough Hoffmann et al. (2022) recommends\ntraining a 10B model on 200B tokens, we ﬁnd\nthat the performance of a 7B model continues to\nimprove even after 1T tokens.\nThe focus of this work is to train a series of\nlanguage models that achieve the best possible per-\nformance at various inference budgets, by training\non more tokens than what is typically used. The\nresulting models, called LLaMA , ranges from 7B\nto 65B parameters with competitive performance\ncompared to the best existing LLMs. For instance,\nLLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 ×smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. “Books – 2TB” or\n“Social media conversations”). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modiﬁcations we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our\ntraining method. We ', 'then report the performance of\nour models and compare with others LLMs on a set\nof standard benchmarks. Finally, we expose some\nof the biases and toxicity encoded in our models,\nusing some of the most recent benchmarks from\nthe responsible AI community.arXiv:2302.13971v1 [cs.CL] 27 Feb 2023\x0c2 Approach\nOur training approach is similar to the methods\ndescribed in previous work (Brown et al., 2020;\nChowdhery et al., 2022), and is inspired by the\nChinchilla scaling laws (Hoffmann et al., 2022).\nWe train large transformers on a large quantity of\ntextual data using a standard optimizer.\n2.1 Pre-training Data\nOur training dataset is a mixture of several sources,\nreported in Table 1, that cover a diverse set of do-\nmains. For the most part, we reuse data sources\nthat have been leveraged to train other LLMs, with\nthe restriction of only using data that is publicly\navailable, and compatible with open sourcing. This\nleads to the following mixture of data and the per-\ncentage they represent in the training set:\nEnglish CommonCrawl [67%]. We preprocess\nﬁve CommonCrawl dumps, ranging from 2017\nto 2020, with the CCNet pipeline (Wenzek et al.,\n2020). This process deduplicates the data at the\nline level, performs language identiﬁcation with\na fastText linear classiﬁer to remove non-English\npages and ﬁlters low quality content with an n-\ngram language model. In addition, we trained a\nlinear model to classify pages used as references\nin Wikipedia v.s.randomly sampled pages, and\ndiscarded pages not classiﬁed as references.\nC4 [15%]. During exploratory experiments, we\nobserved that using diverse pre-processed Com-\nmonCrawl datasets improves performance. We thus\nincluded the publicly available C4 dataset (Raffel\net al., 2020) in our data. The preprocessing of C4\nalso contains deduplication and language identiﬁ-\ncation steps: the main difference with ', 'LLaMA: Open and Efﬁcient Foundation Language Models\nHugo Touvron∗, Thibaut Lavril∗, Gautier Izacard∗, Xavier Martinet\nMarie-Anne Lachaux, Timothee Lacroix, Baptiste Rozière, Naman Goyal\nEric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin\nEdouard Grave∗, Guillaume Lample∗\nMeta AI\nAbstract\nWe introduce LLaMA, a collection of founda-\ntion language models ranging from 7B to 65B\nparameters. We train our models on trillions\nof tokens, and show that it is possible to train\nstate-of-the-art models using publicly avail-\nable datasets exclusively, without resorting\nto proprietary and inaccessible datasets. In\nparticular, LLaMA-13B outperforms GPT-3\n(175B) on most benchmarks, and LLaMA-\n65B is competitive with the best models,\nChinchilla-70B and PaLM-540B. We release\nall our models to the research community1.\n1 Introduction\nLarge Languages Models (LLMs) trained on mas-\nsive corpora of texts have shown their ability to per-\nform new tasks from textual instructions or from a\nfew examples (Brown et al., 2020). These few-shot\nproperties ﬁrst appeared when scaling models to a\nsufﬁcient size (Kaplan et al., 2020), resulting in a\nline of work that focuses on further scaling these\nmodels (Chowdhery et al., 2022; Rae et al., 2021).\nThese efforts are based on the assumption that\nmore parameters will lead to better performance.\nHowever, recent work from Hoffmann et al. (2022)\nshows that, for a given compute budget, the best\nperformances are not achieved by the largest mod-\nels, but by smaller models trained on more data.\nThe objective of the scaling laws from Hoff-\nmann et al. (2022) is to determine how to best\nscale the dataset and model sizes for a particular\ntraining compute budget. However, this objective\ndisregards the inference budget, which becomes\ncritical when serving a language model at scale.\nIn this context, given a target level of performance,\nthe preferred model is not the ']","LLaMA's methodology for ensuring data diversity includes comprehensive filtering criteria to remove low-quality content, language identification to support multilingual capabilities, and a balanced inclusion of various data sources such as Wikipedia, web text, and books, emphasizing the representation of a wide range of topics and languages.","LLaMA utilizes a mixture of several sources for its training dataset to ensure diversity, including English CommonCrawl and C4. For English CommonCrawl, they preprocess five CommonCrawl dumps using the CCNet pipeline, which includes deduplication, language identification, and filtering of low-quality content. They also use a linear model to classify pages as references in Wikipedia or randomly sampled pages, discarding those not classified as references. For C4, they include the publicly available dataset in their data mix, with preprocessing steps such as deduplication and language identification. This approach helps LLaMA achieve a diverse set of domains in its training data while only using publicly available and open-sourcing compatible datasets.",0.5,1.0,0.7432723045349121
"What are the specific domains covered by the multitask test, and why were they selected?","['and undergraduate students from freely available\nsources online. These include practice questions for tests such as the Graduate Record Examination\nand the United States Medical Licensing Examination. It also includes questions designed for\nundergraduate courses and questions designed for readers of Oxford University Press books. Some\ntasks cover a subject, like psychology, but at a speciﬁc level of difﬁculty, such as “Elementary,”\n“High School,” “College,” or “Professional.” For example, the “Professional Psychology” task draws\non questions from freely available practice questions for the Examination for Professional Practice\nin Psychology, while the “High School Psychology” task has questions like those from Advanced\nPlacement Psychology examinations.\nWe collected 15908 questions in total, which we split into a few-shot development set, a validation\nset, and a test set. The few-shot development set has 5questions per subject, the validation set may\nbe used for selecting hyperparameters and is made of 1540 questions, and the test set has 14079\nquestions. Each subject contains 100test examples at the minimum, which is longer than most exams\ndesigned to assess people.\nHuman-level accuracy on this test varies. Unspecialized humans from Amazon Mechanical Turk\nobtain 34.5%accuracy on this test. Meanwhile, expert-level performance can be far higher. For\nexample, real-world test-taker human accuracy at the 95th percentile is around 87% for US Medical\nLicensing Examinations, and these questions make up our “Professional Medicine” task. If we take\nthe 95th percentile human test-taker accuracy for exams that build up our test, and if we make an\neducated guess when such information is unavailable, we then estimate that expert-level accuracy is\napproximately 89.8%.\nSince our test aggregates different subjects and several levels of difﬁculty, we measure more than\nstraightforward commonsense ', 'Published as a conference paper at ICLR 2021\nMEASURING MASSIVE MULTITASK\nLANGUAGE UNDERSTANDING\nDan Hendrycks\nUC BerkeleyCollin Burns\nColumbia UniversitySteven Basart\nUChicagoAndy Zou\nUC Berkeley\nMantas Mazeika\nUIUCDawn Song\nUC BerkeleyJacob Steinhardt\nUC Berkeley\nABSTRACT\nWe propose a new test to measure a text model’s multitask accuracy. The test\ncovers 57 tasks including elementary mathematics, US history, computer science,\nlaw, and more. To attain high accuracy on this test, models must possess extensive\nworld knowledge and problem solving ability. We ﬁnd that while most recent\nmodels have near random-chance accuracy, the very largest GPT-3 model improves\nover random chance by almost 20 percentage points on average. However, on every\none of the 57 tasks, the best models still need substantial improvements before\nthey can reach expert-level accuracy. Models also have lopsided performance\nand frequently do not know when they are wrong. Worse, they still have near-\nrandom accuracy on some socially important subjects such as morality and law.\nBy comprehensively evaluating the breadth and depth of a model’s academic and\nprofessional understanding, our test can be used to analyze models across many\ntasks and to identify important shortcomings.\n1 I NTRODUCTION\nNatural Language Processing (NLP) models have achieved superhuman performance on a number of\nrecently proposed benchmarks. However, these models are still well below human level performance\nfor language understanding as a whole, suggesting a disconnect between our benchmarks and the\nactual capabilities of these models. The General Language Understanding Evaluation benchmark\n(GLUE) (Wang et al., 2018) was introduced in 2018 to evaluate performance on a wide range of NLP\ntasks, and top models achieved superhuman performance within a year. To address the shortcomings\nof GLUE, researchers designed the SuperGLUE benchmark with more difﬁcult tasks (Wang et al.,\n2019). About ', '91.1 80.8 86.3\nMT-DNN 87.9/87.4 96.0 89.9 86.3 96.5 92.7 68.4 91.1 89.0 87.6\nXLNet 90.2/89.8 98.6 90.3 86.3 96.8 93.0 67.8 91.6 90.4 88.4\nRoBERTa 90.8/90.2 98.9 90.2 88.2 96.7 92.3 67.8 92.2 89.0 88.5\nTable 5: Results on GLUE. All results are based on a 24-layer a rchitecture. BERT LARGE and XLNet LARGE results\nare from Devlin et al. (2019 ) and Yang et al. (2019 ), respectively. RoBERTa results on the development set are a\nmedian over ﬁve runs. RoBERTa results on the test set are ense mbles of single-task models. For RTE, STS and\nMRPC we ﬁnetune starting from the MNLI model instead of the ba seline pretrained model. Averages are obtained\nfrom the GLUE leaderboard.\nTask-speciﬁc modiﬁcations Two of the GLUE\ntasks require task-speciﬁc ﬁnetuning approaches\nto achieve competitive leaderboard results.\nQNLI : Recent submissions on the GLUE\nleaderboard adopt a pairwise ranking formulation\nfor the QNLI task, in which candidate answers\nare mined from the training set and compared to\none another, and a single (question, candidate)\npair is classiﬁed as positive ( Liu et al. ,2019b ,a;\nYang et al. ,2019 ). This formulation signiﬁcantly\nsimpliﬁes the task, but is not directly comparable\nto BERT ( Devlin et al. ,2019 ). Following recent\nwork, we adopt the ranking approach for our test\nsubmission, but for direct comparison with BERT\nwe report development set results based on a pure\nclassiﬁcation approach.\nWNLI : We found the provided NLI-format\ndata to be challenging to work with. Instead\nwe use the reformatted WNLI data from Super-\nGLUE ( Wang et al. ,2019a ), which indicates the\nspan of the query pronoun and referent. We ﬁne-\ntune RoBERTa using the margin ranking loss ']","The test covers 57 subjects across STEM, humanities, social sciences, and more, selected to evaluate a model's world knowledge and problem-solving ability across a wide range of difficulty levels, from elementary to advanced professional levels.","The specific domains covered by the multitask test are elementary mathematics, US history, computer science, law, and more. These domains were selected because models need to possess extensive world knowledge and problem-solving ability to achieve high accuracy on the test.",0.8333333333333334,1.0,0.6046539545059204
What specific enhancements are recommended for language models to bridge the knowledge application gap identified through comprehensive multitask testing?,"['Published as a conference paper at ICLR 2021\nMEASURING MASSIVE MULTITASK\nLANGUAGE UNDERSTANDING\nDan Hendrycks\nUC BerkeleyCollin Burns\nColumbia UniversitySteven Basart\nUChicagoAndy Zou\nUC Berkeley\nMantas Mazeika\nUIUCDawn Song\nUC BerkeleyJacob Steinhardt\nUC Berkeley\nABSTRACT\nWe propose a new test to measure a text model’s multitask accuracy. The test\ncovers 57 tasks including elementary mathematics, US history, computer science,\nlaw, and more. To attain high accuracy on this test, models must possess extensive\nworld knowledge and problem solving ability. We ﬁnd that while most recent\nmodels have near random-chance accuracy, the very largest GPT-3 model improves\nover random chance by almost 20 percentage points on average. However, on every\none of the 57 tasks, the best models still need substantial improvements before\nthey can reach expert-level accuracy. Models also have lopsided performance\nand frequently do not know when they are wrong. Worse, they still have near-\nrandom accuracy on some socially important subjects such as morality and law.\nBy comprehensively evaluating the breadth and depth of a model’s academic and\nprofessional understanding, our test can be used to analyze models across many\ntasks and to identify important shortcomings.\n1 I NTRODUCTION\nNatural Language Processing (NLP) models have achieved superhuman performance on a number of\nrecently proposed benchmarks. However, these models are still well below human level performance\nfor language understanding as a whole, suggesting a disconnect between our benchmarks and the\nactual capabilities of these models. The General Language Understanding Evaluation benchmark\n(GLUE) (Wang et al., 2018) was introduced in 2018 to evaluate performance on a wide range of NLP\ntasks, and top models achieved superhuman performance within a year. To address the shortcomings\nof GLUE, researchers designed the SuperGLUE benchmark with more difﬁcult tasks (Wang et al.,\n2019). About ', 'shows that by performing such an analysis, one can\nhelp elucidate the successes and failures of existing models,\nas well as help to identify possible paths forward to improve\ntoday’s systems.\nAcknowledgements\nWe thank Sewon Min, Sameer Singh, Katherine Lee, and\nthe members of UNC NLP for their valuable feedback. Eric\nWallace is supported by the Apple Scholars in AI/ML Fel-\nlowship. This work was supported by NSF-AI Engage Insti-\ntute DRL-2112635.\nReferences\nAky¨urek, E., Bolukbasi, T., Liu, F., Xiong, B., Tenney, I.,\nAndreas, J., and Guu, K. Tracing knowledge in language\nmodels back to the training data. In Findings of EMNLP ,\n2022.\nBlack, S., Leo, G., Wang, P., Leahy, C., and Biderman, S.\nGPT-Neo: Large Scale Autoregressive Language Model-\ning with Mesh-Tensorflow, 2021.\nBlack, S., Biderman, S., Hallahan, E., Anthony, Q., Gao,\nL., Golding, L., He, H., Leahy, C., McDonell, K., Phang,\nJ., et al. GPT-Neox-20B: An open-source autoregressive\nlanguage model. arXiv preprint arXiv:2204.06745 , 2022.\nBrown, T., Mann, B., Ryder, N., Subbiah, M., Kaplan, J. D.,\nDhariwal, P., Neelakantan, A., Shyam, P., Sastry, G.,\nAskell, A., et al. Language models are few-shot learners.\nInNeurIPS , 2020.\nCarlini, N., Liu, C., Erlingsson, ´U., Kos, J., and Song,\nD. The secret sharer: Evaluating and testing unintended\nmemorization in neural networks. In USENIX Security\nSymposium , 2019.\nCarlini, N., Tramer, F., Wallace, E., Jagielski, M., Herbert-\nV oss, A., Lee, K., Roberts, A., Brown, T., Song, D.,\nErlingsson, U., Oprea, A., and Raffel, C. Extracting\ntraining data from large language models. In USENIX\nSecurity Symposium , 2021.\nDe Cao, N., Izacard, G., Riedel, S., and Petroni, F. Autore-\ngressive entity retrieval. In ICLR , 2021.Elazar, Y ., Kassner, N., Ravfogel, S., Feder, A., Ravichan-\nder, A., Mosbach, M., Belinkov, Y ., Sch ¨utze, ', 'from\nKocijan et al. (2019 ). For a given input sentence,\nwe use spaCy ( Honnibal and Montani ,2017 ) to\nextract additional candidate noun phrases from the\nsentence and ﬁnetune our model so that it assigns\nhigher scores to positive referent phrases than for\nany of the generated negative candidate phrases.\nOne unfortunate consequence of this formulation\nis that we can only make use of the positive train-\ning examples, which excludes over half of the pro-\nvided training examples.10\n10While we only use the provided WNLI training data, ourResults We present our results in Table 5. In the\nﬁrst setting ( single-task, dev ), RoBERTa achieves\nstate-of-the-art results on all 9 of the GLUE\ntask development sets. Crucially, RoBERTa uses\nthe same masked language modeling pretrain-\ning objective and architecture as BERT LARGE , yet\nconsistently outperforms both BERT LARGE and\nXLNet LARGE . This raises questions about the rel-\native importance of model architecture and pre-\ntraining objective, compared to more mundane de-\ntails like dataset size and training time that we ex-\nplore in this work.\nIn the second setting ( ensembles, test ), we\nsubmit RoBERTa to the GLUE leaderboard and\nachieve state-of-the-art results on 4 out of 9 tasks\nand the highest average score to date. This is espe-\ncially exciting because RoBERTa does not depend\non multi-task ﬁnetuning, unlike most of the other\ntop submissions. We expect future work may fur-\nther improve these results by incorporating more\nsophisticated multi-task ﬁnetuning procedures.\n5.2 SQuAD Results\nWe adopt a much simpler approach for SQuAD\ncompared to past work. In particular, while\nboth BERT ( Devlin et al. ,2019 ) and XL-\nNet ( Yang et al. ,2019 ) augment their training data\nwith additional QA datasets, we ']","Enhancements should focus on developing models with improved procedural knowledge, superior calculation abilities, and a more accurate calibration between confidence and actual performance, directly addressing the weaknesses uncovered in current evaluations.",None,0.6666666666666666,0.0,0.11169848591089249
What methodology does DetectGPT use to generate minor perturbations in the candidate passage for evaluation?,"['8. Impact of varying the number of perturbations (samples\nof mask and mask-fill) used by DetectGPT on AUROC for GPT-2\n(left) and GPT-J ( right ) to estimate the perturbation discrepancy\non detection. Averaging up to 100 perturbations greatly increases\nDetectGPT’s reliability. Perturbations sampled from T5-large.\nlarly how the domain impacts the threshold separating the\nperturbation discrepancy distributions of model-generated\nand human texts as well as the impact of passage length on\ndetection. Figure 9 shows the perturbation discrepancy dis-\ntributions for model-generated and human texts across four\ndata distributions, using GPT-Neo-2.7B to generate sam-\nples. A threshold of slightly below 0.1 separates human and\nmodel texts across data distributions, which is important for\npractical scenarios in which a passage may be analyzed with-\nout knowing its domain a priori. Finally, Figure 10 shows an\nanalysis of DetectGPT’s performance as a function of pas-\nsage length. We bin the paired human- and model-generated\nsequences by their average length into three bins of equal\nsize (bottom/middle/top third), and plot the AUROC within\neach bin. The relationship between detection performance\nand passage length generally depends on the dataset and\nmodel (or tokenizer). For very long sequences, DetectGPT\nmay see reduced performance because our implementation\nof DetectGPT applies all T5 mask-filling perturbations at\nonce, and T5 may fail to track many mask tokens at once.\nBy applying perturbations in multiple sequential rounds of\nsmaller numbers of masks, this effect may be mitigated.\n6. Discussion\nAs large language models continue to improve, they will\nbecome increasingly attractive tools for replacing human\nwriters in a variety of contexts, such as education, jour-\nnalism, and art. While legitimate uses of language model\ntechnologies exist in all of these settings, teachers, readers,\nand consumers are likely ', 'a move to the White House that included bringing along his pet German Shepherd…”\nDetectGPT\nx\n...GPT-3(1)Perturb(2) Score(3) Compare\n🤖 from GPT-3\nYes(reword with T5)\n“made a move” “moved”→“pet” “dog”→Delete “bringing along”\n...\n🤔 from other source\nNo\nFigure 1. We aim to determine whether a piece of text was gener-\nated by a particular LLM p, such as GPT-3. To classify a candidate\npassage x, DetectGPT first generates minor perturbations of the\npassage ˜xiusing a generic pre-trained model such as T5. Then\nDetectGPT compares the log probability under pof the original\nsample xwith each perturbed sample ˜xi. If the average log ratio\nis high, the sample is likely from the source model.\nWhile recent work has found that cogent-sounding LLM-\ngenerated responses are often simply wrong (Lin et al.,\n2022), the articulate nature of such generated text may still\nmake LLMs attractive for replacing human labor in some\ncontexts, notably student essay writing and journalism. At\nleast one major news source has released AI-written content\nwith limited human review, leading to substantial factual er-\nrors in some articles (Christian, 2023). Such applications of\nLLMs are problematic for a variety of reasons, making fair\nstudent assessment difficult, impairing student learning, and\nproliferating convincing-but-inaccurate news articles. Un-\nfortunately, humans perform only slightly better than chance\nwhen classifying machine-generated vs human-written text\n(Gehrmann et al., 2019), leading researchers to consider\nautomated detection methods that may identify signals dif-\nficult for humans to recognize. Such methods might give\nteachers and news-readers more confidence in the human\norigin of the text that they consume.\nAs in prior work (Jawahar et al., 2020), we study the\n1arXiv:2301.11305v2 [cs.CL] 23 Jul 2023\x0cZero-Shot Machine-Generated Text Detection using Probability Curvature\nmachine-generated text detection problem as a binary clas-\nsification problem. Specifically, we ', 'both top- k\nand nucleus sampling make detection easier, on average.\nAveraging across domains, DetectGPT provides the clearest\nsignal for zero-shot detection.\nDetection when the source model is unknown. While\nour experiments have focused on the white-box setting\nfor machine-generated text detection, in this section, we\nGPT-J GPT-Neo GPT-2Scoring ModelGPT-J GPT-Neo GPT-2Base Model0.92\n(0.02)0.83\n(0.04)0.79\n(0.02)\n0.64\n(0.06)0.97\n(0.01)0.83\n(0.02)\n0.60\n(0.09)0.85\n(0.05)0.99\n(0.00)0.85\n0.81\n0.81\n0.72 0.88 0.87\nFigure 6. DetectGPT performs\nbest when scoring samples\nwith the same model that gen-\nerated them (diagonal), but\nthe column means suggest that\nsome models (GPT-Neo, GPT-\n2) may be better ‘scorers’ than\nothers (GPT-J). White values\nshow mean (standard error)\nAUROC over XSum, SQuAD,\nand WritingPrompts; black\nshows row/column mean.explore the effect of using\na different model to score a\ncandidate passage (and per-\nturbed texts) than the model\nthat generated the passage.\nIn other words, we aim\nto classify between human-\ngenerated text and text from\nmodel A, but without ac-\ncess to model Ato com-\npute log probabilities. In-\nstead, we use log probabil-\nities computed by a surro-\ngate model B. We con-\nsider three models, GPT-J,\nGPT-Neo-2.7, and GPT-2,\nevaluating all possible com-\nbinations of source model\nand surrogate model (9 to-\ntal). We average the perfor-\nmance across 200 samples\nfrom XSum, SQuAD, and\n7\x0cZero-Shot Machine-Generated Text Detection using Probability Curvature\n60M 220M 770M 2.7B0.50.60.70.80.91.0Detection AUROC\n5 perturbations\n60M 220M 770M 2.7B\n25 perturbations\nRandom\nGPT2-sm\nGPT2-md\nGPT2-lg\nGPT2-xl\nMask filling model size (# parameters)\nFigure 7. There is a clear association between capacity of mask-\nfilling model and detection performance, across source model\nscales. Random mask filling (uniform sampling from mask filling\nmodel vocabulary) performs poorly, reinforcing the idea that the\nperturbation function should produce samples on the data manifold.\nCurves show AUROC scores on 200 SQuAD contexts.\nWritingPrompts. The results are presented in Figure 6,\nshowing that when the surrogate model is different from the\nsource model, detection performance is reduced, indicating\nthat DetectGPT ']","DetectGPT generates minor perturbations using a generic pre-trained model, such as T5, and then compares the log probability of the original sample with each perturbed sample.",DetectGPT generates minor perturbations in the candidate passage using a generic pre-trained model such as T5.,1.0,1.0,0.764353334903717
Discuss the significance of DetectGPT's detection approach in the context of evolving LLM capabilities and the potential for misuse.,"['a move to the White House that included bringing along his pet German Shepherd…”\nDetectGPT\nx\n...GPT-3(1)Perturb(2) Score(3) Compare\n🤖 from GPT-3\nYes(reword with T5)\n“made a move” “moved”→“pet” “dog”→Delete “bringing along”\n...\n🤔 from other source\nNo\nFigure 1. We aim to determine whether a piece of text was gener-\nated by a particular LLM p, such as GPT-3. To classify a candidate\npassage x, DetectGPT first generates minor perturbations of the\npassage ˜xiusing a generic pre-trained model such as T5. Then\nDetectGPT compares the log probability under pof the original\nsample xwith each perturbed sample ˜xi. If the average log ratio\nis high, the sample is likely from the source model.\nWhile recent work has found that cogent-sounding LLM-\ngenerated responses are often simply wrong (Lin et al.,\n2022), the articulate nature of such generated text may still\nmake LLMs attractive for replacing human labor in some\ncontexts, notably student essay writing and journalism. At\nleast one major news source has released AI-written content\nwith limited human review, leading to substantial factual er-\nrors in some articles (Christian, 2023). Such applications of\nLLMs are problematic for a variety of reasons, making fair\nstudent assessment difficult, impairing student learning, and\nproliferating convincing-but-inaccurate news articles. Un-\nfortunately, humans perform only slightly better than chance\nwhen classifying machine-generated vs human-written text\n(Gehrmann et al., 2019), leading researchers to consider\nautomated detection methods that may identify signals dif-\nficult for humans to recognize. Such methods might give\nteachers and news-readers more confidence in the human\norigin of the text that they consume.\nAs in prior work (Jawahar et al., 2020), we study the\n1arXiv:2301.11305v2 [cs.CL] 23 Jul 2023\x0cZero-Shot Machine-Generated Text Detection using Probability Curvature\nmachine-generated text detection problem as a binary clas-\nsification problem. Specifically, we ', 'both top- k\nand nucleus sampling make detection easier, on average.\nAveraging across domains, DetectGPT provides the clearest\nsignal for zero-shot detection.\nDetection when the source model is unknown. While\nour experiments have focused on the white-box setting\nfor machine-generated text detection, in this section, we\nGPT-J GPT-Neo GPT-2Scoring ModelGPT-J GPT-Neo GPT-2Base Model0.92\n(0.02)0.83\n(0.04)0.79\n(0.02)\n0.64\n(0.06)0.97\n(0.01)0.83\n(0.02)\n0.60\n(0.09)0.85\n(0.05)0.99\n(0.00)0.85\n0.81\n0.81\n0.72 0.88 0.87\nFigure 6. DetectGPT performs\nbest when scoring samples\nwith the same model that gen-\nerated them (diagonal), but\nthe column means suggest that\nsome models (GPT-Neo, GPT-\n2) may be better ‘scorers’ than\nothers (GPT-J). White values\nshow mean (standard error)\nAUROC over XSum, SQuAD,\nand WritingPrompts; black\nshows row/column mean.explore the effect of using\na different model to score a\ncandidate passage (and per-\nturbed texts) than the model\nthat generated the passage.\nIn other words, we aim\nto classify between human-\ngenerated text and text from\nmodel A, but without ac-\ncess to model Ato com-\npute log probabilities. In-\nstead, we use log probabil-\nities computed by a surro-\ngate model B. We con-\nsider three models, GPT-J,\nGPT-Neo-2.7, and GPT-2,\nevaluating all possible com-\nbinations of source model\nand surrogate model (9 to-\ntal). We average the perfor-\nmance across 200 samples\nfrom XSum, SQuAD, and\n7\x0cZero-Shot Machine-Generated Text Detection using Probability Curvature\n60M 220M 770M 2.7B0.50.60.70.80.91.0Detection AUROC\n5 perturbations\n60M 220M 770M 2.7B\n25 perturbations\nRandom\nGPT2-sm\nGPT2-md\nGPT2-lg\nGPT2-xl\nMask filling model size (# parameters)\nFigure 7. There is a clear association between capacity of mask-\nfilling model and detection performance, across source model\nscales. Random mask filling (uniform sampling from mask filling\nmodel vocabulary) performs poorly, reinforcing the idea that the\nperturbation function should produce samples on the data manifold.\nCurves show AUROC scores on 200 SQuAD contexts.\nWritingPrompts. The results are presented in Figure 6,\nshowing that when the surrogate model is different from the\nsource model, detection performance is reduced, indicating\nthat DetectGPT ', 'is most suited to the white-box setting. Yet\nwe also observe that if we fix the model used for scoring\nand average across source models whose generations are\ndetected (average within column), there is significant varia-\ntion in AUROC; GPT-2 and GPT-Neo-2.7 seem to be better\n‘scorers’ than GPT-J. These variations in cross-model scor-\ning performance suggest ensembling scoring models may\nbe a useful direction for future research; see Mireshghallah\net al. (2023) for reference.\n5.3.Other factors impacting performance of DetectGPT\nIn this section, we explore how factors such as the size of the\nmask-filling model, the number of perturbations used to es-\ntimate the expectation in Equation 1, or the data distribution\nof the text to be detected impact detection quality.\nSource and mask-filling model scale. Here we study the\nimpact of the size of the source model and mask-filling\nmodel on DetectGPT’s performance; the results are shown\nin Figure 7. In particular, the increased discrimination power\nof DetectGPT for larger mask-filling models supports the\ninterpretation that DetectGPT is estimating the curvature\nof the log probability in a latent semantic space, rather\nthan in raw token embedding space. Larger T5 models\nbetter represent this latent space, where random directions\ncorrespond to meaningful changes in the text.\nNumber of perturbations for DetectGPT. We evaluate the\nperformance of DetectGPT as a function of the number of\nperturbations used to estimate the expectation in Equation 1\non three datasets. The results are presented in Figure 8.\nDetection accuracy continues to improve until 100 pertur-\nbations, where it converges. Evaluations use 100 examples\nfrom each dataset.\nData distributional properties. We study more closely\nthe impact of the data distribution on DetectGPT, particu-\n1 10 100 10000.60.70.80.91.0Detection AUROC\nGPT-2\nXSum\nSQuAD\nWritingPrompts\n1 10 100 1000\nGPT-J\nNumber of perturbationsFigure ']","DtectGPT's approach is significant as it provides a robust, zero-shot detection method that does not require dataset collection or model retraining, addressing the challenge of rapidly evolving LLM capabilities and their potential misuse in generating misleading content.","DetectGPT's detection approach is significant in the context of evolving LLM capabilities and the potential for misuse because it highlights the challenges that arise with the increasing use of language models for generating text. As text generated by LLMs becomes more sophisticated and convincing, the need for reliable detection methods to differentiate between human and machine-generated text becomes crucial.

DetectGPT's approach, which involves generating perturbations of the text and comparing log probabilities to identify machine-generated text, provides a systematic way to detect text generated by specific models such as GPT-3. This approach is important in addressing the potential misuse of LLMs, as it allows for the identification of automatically generated content that may contain factual errors or misleading information.

The evolving capabilities of LLMs, as seen in models like GPT-Neo and GPT-2, pose a challenge in distinguishing between human and machine-generated text. DetectGPT's method of utilizing different models for scoring and generating text highlights the need for continued research and development in automated detection methods to keep up with advancements in LLM technology.

Overall, DetectGPT's detection approach plays a vital role in mitigating the potential misuse of LLMs by providing a tool for identifying machine-generated text and encouraging further research into creating more reliable methods for distinguishing between human and AI-generated content.",1.0,1.0,0.5719398260116577
"How is the student model, DistilBERT, initialized from the teacher model for effective training?","['the original\npretraining objective to train smaller student, then ﬁne-tuned via distillation. As shown in the abla-\ntion study, we found it beneﬁcial to leverage the teacher’s knowledge to pre-train with additional\ndistillation signal.\nMulti-distillation Yang et al. [2019] combine the knowledge of an ensemble of teachers using\nmulti-task learning to regularize the distillation. The authors apply Multi-Task Knowledge Distillation\nto learn a compact question answering model from a set of large question answering models. An\napplication of multi-distillation is multi-linguality: Tsai et al. [2019] adopts a similar approach to us\nby pre-training a multilingual model from scratch solely through distillation. However, as shown in\nthe ablation study, leveraging the teacher’s knowledge with initialization and additional losses leads\nto substantial gains.\nOther compression techniques have been studied to compress large models. Recent developments\nin weights pruning reveal that it is possible to remove some heads in the self-attention at test time\nwithout signiﬁcantly degrading the performance Michel et al. [2019]. Some layers can be reduced\nto one head. A separate line of study leverages quantization to derive smaller models (Gupta et al.\n[2015]). Pruning and quantization are orthogonal to the present work.\n5https://github.com/huggingface/swift-coreml-transformers\n4\x0c6 Conclusion and future work\nWe introduced DistilBERT, a general-purpose pre-trained version of BERT, 40% smaller, 60% faster,\nthat retains 97% of the language understanding capabilities. We showed that a general-purpose\nlanguage model can be successfully trained with distillation and analyzed the various components\nwith an ablation study. We further demonstrated that DistilBERT is a compelling option for edge\napplications.\nReferences\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional\ntransformers for language understanding. In NAACL-HLT , 2018.\nAlec Radford, Jeffrey Wu, Rewon Child, ', 'of models.\nIn supervised learning, a classiﬁcation model is generally trained to predict an instance class by\nmaximizing the estimated probability of gold labels. A standard training objective thus involves\nminimizing the cross-entropy between the model’s predicted distribution and the one-hot empirical\ndistribution of training labels. A model performing well on the training set will predict an output\ndistribution with high probability on the correct class and with near-zero probabilities on other\nclasses. But some of these ""near-zero"" probabilities are larger than others and reﬂect, in part, the\ngeneralization capabilities of the model and how well it will perform on the test set3.\nTraining loss The student is trained with a distillation loss over the soft target probabilities of\nthe teacher: Lce=∑\niti∗log(si)where ti(resp. si) is a probability estimated by the teacher\n(resp. the student). This objective results in a rich training signal by leveraging the full teacher\ndistribution. Following Hinton et al. [2015] we used a softmax-temperature :pi=exp(zi/T)∑\njexp(zj/T)\nwhere Tcontrols the smoothness of the output distribution and ziis the model score for the class i.\nThe same temperature Tis applied to the student and the teacher at training time, while at inference,\nTis set to 1 to recover a standard softmax .\nThe ﬁnal training objective is a linear combination of the distillation loss Lcewith the supervised\ntraining loss, in our case the masked language modeling lossLmlm [Devlin et al., 2018]. We found it\nbeneﬁcial to add a cosine embedding loss (Lcos) which will tend to align the directions of the student\nand teacher hidden states vectors.\n3 DistilBERT: a distilled version of BERT\nStudent architecture In the present work, the student - DistilBERT - has ', 'the same general architec-\nture as BERT. The token-type embeddings and the pooler are removed while the number of layers\nis reduced by a factor of 2. Most of the operations used in the Transformer architecture ( linear\nlayer andlayer normalisation ) are highly optimized in modern linear algebra frameworks and our\ninvestigations showed that variations on the last dimension of the tensor (hidden size dimension) have\na smaller impact on computation efﬁciency (for a ﬁxed parameters budget) than variations on other\nfactors like the number of layers. Thus we focus on reducing the number of layers.\nStudent initialization In addition to the previously described optimization and architectural choices,\nan important element in our training procedure is to ﬁnd the right initialization for the sub-network to\nconverge. Taking advantage of the common dimensionality between teacher and student networks,\nwe initialize the student from the teacher by taking one layer out of two.\n2https://github.com/huggingface/transformers\n3E.g. BERT-base’s predictions for a masked token in "" I think this is the beginning of a\nbeautiful [MASK] "" comprise two high probability tokens ( dayandlife) and a long tail of valid predictions\n(future ,story ,world . . . ).\n2\x0cTable 1: DistilBERT retains 97% of BERT performance. Comparison on the dev sets of the\nGLUE benchmark. ELMo results as reported by the authors. BERT and DistilBERT results are the\nmedians of 5 runs with different seeds.\nModel Score CoLA MNLI MRPC QNLI QQP RTE SST-2 STS-B WNLI\nELMo 68.7 44.1 68.6 76.6 71.1 86.2 53.4 91.5 70.4 56.3\nBERT-base 79.5 56.3 86.7 88.6 91.8 89.6 69.3 92.7 89.0 53.5\nDistilBERT 77.0 51.3 82.2 87.5 89.2 88.5 59.9 91.3 86.9 56.3\nTable 2: DistilBERT ']",DistilBERT is initialized from the teacher model by adopting every other layer to maintain some structural and knowledge integrity.,"Taking advantage of the common dimensionality between the teacher and student networks, the student model, DistilBERT, is initialized from the teacher model by taking one layer out of two.",0.5,1.0,0.7503699660301208
Explain how BERT uses the 'masked LM' (MLM) for its pre-training.,"['to\nhairy ), our masking procedure can be further il-\nlustrated by\n• 80% of the time: Replace the word with the\n[MASK] token, e.g., my dog is hairy →\nmy dog is [MASK]\n• 10% of the time: Replace the word with a\nrandom word, e.g., my dog is hairy →my\ndog is apple\n• 10% of the time: Keep the word un-\nchanged, e.g., my dog is hairy →my dog\nis hairy . The purpose of this is to bias the\nrepresentation towards the actual observed\nword.\nThe advantage of this procedure is that the\nTransformer encoder does not know which words\nit will be asked to predict or which have been re-\nplaced by random words, so it is forced to keep\na distributional contextual representation of ev-\neryinput token. Additionally, because random\nreplacement only occurs for 1.5% of all tokens\n(i.e., 10% of 15%), this does not seem to harm\nthe model’s language understanding capability. In\nSection C.2, we evaluate the impact this proce-\ndure.\nCompared to standard langauge model training,\nthe masked LM only make predictions on 15% of\ntokens in each batch, which suggests that more\npre-training steps may be required for the model\x0cBERT (Ours) Trm Trm Trm\nTrm Trm Trm...\n...Trm Trm Trm\nTrm Trm Trm...\n...OpenAI GPT Lstm ELMo Lstm Lstm Lstm Lstm Lstm Lstm Lstm Lstm Lstm Lstm Lstm T1 T2 TN...\n...\n......\n... E1 E2 EN... T1 T2TN... E1 E2 EN ... T1 T2 TN... E1 E2 EN...Figure 3: Differences in pre-training model architectures. BERT uses a bidirectional Transformer. OpenAI GPT\nuses a left-to-right Transformer. ELMo uses the concatenation of independently trained left-to-right and right-to-\nleft LSTMs to generate features for downstream tasks. Among the three, only BERT representations are jointly\nconditioned on ', 'both left and right context in all layers. In addition to the architecture differences, BERT and\nOpenAI GPT are ﬁne-tuning approaches, while ELMo is a feature-based approach.\nto converge. In Section C.1 we demonstrate that\nMLM does converge marginally slower than a left-\nto-right model (which predicts every token), but\nthe empirical improvements of the MLM model\nfar outweigh the increased training cost.\nNext Sentence Prediction The next sentence\nprediction task can be illustrated in the following\nexamples.\nInput =[CLS] the man went to [MASK] store [SEP]\nhe bought a gallon [MASK] milk [SEP]\nLabel =IsNext\nInput =[CLS] the man [MASK] to the store [SEP]\npenguin [MASK] are flight ##less birds [SEP]\nLabel =NotNext\nA.2 Pre-training Procedure\nTo generate each training input sequence, we sam-\nple two spans of text from the corpus, which we\nrefer to as “sentences” even though they are typ-\nically much longer than single sentences (but can\nbe shorter also). The ﬁrst sentence receives the A\nembedding and the second receives the Bembed-\nding. 50% of the time Bis the actual next sentence\nthat follows Aand 50% of the time it is a random\nsentence, which is done for the “next sentence pre-\ndiction” task. They are sampled such that the com-\nbined length is≤512 tokens. The LM masking is\napplied after WordPiece tokenization with a uni-\nform masking rate of 15%, and no special consid-\neration given to partial word pieces.\nWe train with batch size of 256 sequences (256\nsequences * 512 tokens = 128,000 tokens/batch)\nfor 1,000,000 steps, which is approximately 40epochs over the 3.3 billion word corpus. We\nuse Adam with learning rate of 1e-4, β1= 0.9,\nβ2= 0.999, L2 weight decay of 0.01, learning\nrate warmup over the ﬁrst 10,000 steps, and ', 'is a\nlarge-scale reading comprehension dataset with\nmore than 28,000 passages and nearly 100,000\nquestions. The dataset is collected from English\nexaminations in China, which are designed for\nmiddle and high school students. In RACE, each\npassage is associated with multiple questions. For\nevery question, the task is to select one correct an-\nswer from four options. RACE has signiﬁcantly\nlonger context than other popular reading compre-\nhension datasets and the proportion of questions\nthat requires reasoning is very large.\n4 Training Procedure Analysis\nThis section explores and quantiﬁes which choices\nare important for successfully pretraining BERT\nmodels. We keep the model architecture ﬁxed.7\nSpeciﬁcally, we begin by training BERT models\nwith the same conﬁguration as BERT BASE (L=\n12,H= 768 ,A= 12 , 110M params).\n4.1 Static vs. Dynamic Masking\nAs discussed in Section 2, BERT relies on ran-\ndomly masking and predicting tokens. The orig-\ninal BERT implementation performed masking\nonce during data preprocessing, resulting in a sin-\nglestatic mask. To avoid using the same mask for\neach training instance in every epoch, training data\nwas duplicated 10 times so that each sequence is\nmasked in 10 different ways over the 40 epochs of\ntraining. Thus, each training sequence was seen\nwith the same mask four times during training.\nWe compare this strategy with dynamic mask-\ningwhere we generate the masking pattern every\ntime we feed a sequence to the model. This be-\ncomes crucial when pretraining for more steps or\nwith larger datasets.\n7Studying architectural changes, including larger archi-\ntectures, is an important area for future work.Masking SQuAD 2.0 MNLI-m SST-2\nreference 76.3 84.3 92.8\nOur reimplementation:\nstatic 78.3 84.3 92.5\ndynamic 78.7 84.0 92.9\nTable 1: Comparison between static and dynamic\nmasking for BERT BASE. We report F1 for SQuAD and\naccuracy for MNLI-m and ']","In MLM, a percentage of input tokens are masked randomly, and the model predicts these masked tokens based on their context.","BERT uses the 'masked LM' (MLM) for its pre-training by replacing words in the input sequence with the [MASK] token 80% of the time, with a random word 10% of the time, and keeping the word unchanged 10% of the time. This allows the Transformer encoder to maintain a contextual representation of every input token, as it doesn't know which words will be masked or replaced with random words. This procedure helps the model to learn language understanding capabilities and converge effectively during pre-training.",1.0,1.0,0.471027135848999
Discuss the impact of model size on BERT's performance across different tasks.,"['the RTL\nmodel would not be able to condition the answer\non the question; (c) this it is strictly less powerful\nthan a deep bidirectional model, since it can use\nboth left and right context at every layer.\n5.2 Effect of Model Size\nIn this section, we explore the effect of model size\non ﬁne-tuning task accuracy. We trained a number\nof BERT models with a differing number of layers,\nhidden units, and attention heads, while otherwise\nusing the same hyperparameters and training pro-\ncedure as described previously.\nResults on selected GLUE tasks are shown in\nTable 6. In this table, we report the average Dev\nSet accuracy from 5 random restarts of ﬁne-tuning.\nWe can see that larger models lead to a strict ac-\ncuracy improvement across all four datasets, even\nfor MRPC which only has 3,600 labeled train-\ning examples, and is substantially different from\nthe pre-training tasks. It is also perhaps surpris-\ning that we are able to achieve such signiﬁcant\nimprovements on top of models which are al-\nready quite large relative to the existing literature.\nFor example, the largest Transformer explored in\nVaswani et al. (2017) is (L=6, H=1024, A=16)\nwith 100M parameters for the encoder, and the\nlargest Transformer we have found in the literature\nis (L=64, H=512, A=2) with 235M parameters\n(Al-Rfou et al., 2018). By contrast, BERT BASE\ncontains 110M parameters and BERT LARGE con-\ntains 340M parameters.\nIt has long been known that increasing the\nmodel size will lead to continual improvements\non large-scale tasks such as machine translation\nand language modeling, which is demonstrated\nby the LM perplexity of held-out training data\nshown in Table 6. However, we believe that\nthis is the ﬁrst work to demonstrate convinc-\ningly that scaling to extreme model ', 'in\nour training data.\n5.3. Bi-directional Transformer Results Using BERT\nIn this section, we apply our methodology to BERT-style\ntransformer models and study the effect of model scaling\non several downstream tasks. Prior work (Lan et al., 2019)\nfound that increasing model size beyond BERT-large with\n336M parameters results in unexpected model degradation.\nTo address this degradation, the authors of that work (Lan\net al., 2019) introduced parameter sharing and showed that\nthat their models scale much better compared to the original\nBERT model.\nWe further investigated this behaviour and empirically\ndemonstrated that rearranging the order of the layer nor-\nmalization and the residual connections as shown in Figure\n7 is critical to enable the scaling of the BERT-style mod-\nels beyond BERT-Large. The architecture (b) in Figure 7\neliminates instabilities observed using the original BERT\narchitecture in (a) and also has a lower training loss. To\nthe best of our knowledge, we are the ﬁrst to report such a\nchange enables training larger BERT models.\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 5. Development set results for MNLI, QQP, SQuAD 1.1 and SQuAD 2.0 and test set results for RACE. The trained tokens represents\nconsumed tokens during model pretraining (proportional to batch size times number of iterations) normalized by consumed tokens during\nmodel pretraining for our 336M model.\nModeltrained tokens MNLI m/mm QQP SQuAD 1.1 SQuAD 2.0 RACE m/h\nratio accuracy accuracy F1 / EM F1 / EM accuracy\n(dev set) (dev set) (dev set) (dev set) (test set)\nRoBERTa (Liu et al., 2019b) 2 90.2 / 90.2 92.2 94.6 / 88.9 89.4 / 86.5 83.2 (86.5 / 81.8)\nALBERT (Lan et al., 2019) 3 90.8 92.2 94.8 / 89.3 90.2 ', 'which includes a\ncareful evaluation of the effects of hyperparmeter\ntuning and training set size. We ﬁnd that BERT\nwas signiﬁcantly undertrained and propose an im-\nproved recipe for training BERT models, which\nwe call RoBERTa, that can match or exceed the\nperformance of all of the post-BERT methods.\nOur modiﬁcations are simple, they include: (1)\ntraining the model longer, with bigger batches,\nover more data; (2) removing the next sentence\nprediction objective; (3) training on longer se-\nquences; and (4) dynamically changing the mask-\ning pattern applied to the training data. We also\ncollect a large new dataset (CC-N EWS) of compa-\nrable size to other privately used datasets, to better\ncontrol for training set size effects.\nWhen controlling for training data, our im-\nproved training procedure improves upon the pub-\nlished BERT results on both GLUE and SQuAD.\nWhen trained for longer over additional data, our\nmodel achieves a score of 88.5 on the public\nGLUE leaderboard, matching the 88.4 reported\nbyYang et al. (2019 ). Our model establishes a\nnew state-of-the-art on 4/9 of the GLUE tasks:\nMNLI, QNLI, RTE and STS-B. We also match\nstate-of-the-art results on SQuAD and RACE.\nOverall, we re-establish that BERT’s masked lan-\nguage model training objective is competitive\nwith other recently proposed training objectives\nsuch as perturbed autoregressive language model-\ning (Yang et al. ,2019 ).2\nIn summary, the contributions of this paper\nare: (1) We present a set of important BERT de-\nsign choices and training strategies and introduce\n2It is possible that these other methods could also improve\nwith more tuning. We leave this exploration to future work.\x0calternatives that lead to better downstream task\nperformance; (2) We use a novel dataset, CC-\nNEWS, and conﬁrm that using more data for pre-\ntraining further ']","Larger BERT models consistently show better performance across tasks, indicating the importance of model size in achieving high accuracy.","The impact of model size on BERT's performance across different tasks is significant. Larger models lead to a strict accuracy improvement across all tasks, even for datasets with a small number of training examples. Increasing the model size has been known to lead to continual improvements in large-scale tasks such as machine translation and language modeling. In the context of BERT, larger models with more layers, hidden units, and attention heads have shown to improve accuracy on various tasks.

For example, the BERT LARGE model, which contains 340M parameters, has demonstrated significant improvements in performance compared to the BERT BASE model with 110M parameters. The increase in model size enables BERT to achieve state-of-the-art results on various tasks such as GLUE, MNLI, QNLI, RTE, STS-B, SQuAD, and RACE.

Overall, scaling to extreme model sizes with more parameters has a positive impact on BERT's performance, leading to improved accuracy on diverse downstream tasks and establishing new state-of-the-art results in natural language processing applications.",1.0,1.0,0.84846431016922
What are the hyperparameters of the AdamW optimizer used in training the LLaMA models?,"['0.98\nGradient Clipping 0.0 0.0\nTable 9: Hyperparameters for pretraining RoBERTa LARGE and RoBERTa BASE.\nHyperparam RACE SQuAD GLUE\nLearning Rate 1e-5 1.5e-5 {1e-5, 2e-5, 3e-5 }\nBatch Size 16 48 {16, 32}\nWeight Decay 0.1 0.01 0.1\nMax Epochs 4 2 10\nLearning Rate Decay Linear Linear Linear\nWarmup ratio 0.06 0.06 0.06\nTable 10: Hyperparameters for ﬁnetuning RoBERTa LARGE on RACE, SQuAD and GLUE.', 'use the RMSNorm normalizing func-\ntion, introduced by Zhang and Sennrich (2019).\nSwiGLU activation function [PaLM]. We re-\nplace the ReLU non-linearity by the SwiGLU ac-\ntivation function, introduced by Shazeer (2020) to\nimprove the performance. We use a dimension of\n2\n34dinstead of 4das in PaLM.\nRotary Embeddings [GPTNeo]. We remove the\nabsolute positional embeddings, and instead, add\nrotary positional embeddings (RoPE), introduced\nby Su et al. (2021), at each layer of the network.\nThe details of the hyper-parameters for our dif-\nferent models are given in Table 2.\n2.3 Optimizer\nOur models are trained using the AdamW opti-\nmizer (Loshchilov and Hutter, 2017), with the fol-\nlowing hyper-parameters: β1= 0.9,β2= 0.95.\nWe use a cosine learning rate schedule, such that\nthe ﬁnal learning rate is equal to 10% of the maxi-\nmal learning rate. We use a weight decay of 0.1and\ngradient clipping of 1.0. We use 2,000warmup\n0 200 400 600 800 1000 1200 1400\nBillion of tokens1.51.61.71.81.92.02.12.2Training lossLLaMA 7B\nLLaMA 13B\nLLaMA 33B\nLLaMA 65BFigure 1: Training loss over train tokens for the 7B,\n13B, 33B, and 65 models. LLaMA-33B and LLaMA-\n65B were trained on 1.4T tokens. The smaller models\nwere trained on 1.0T tokens. All models are trained\nwith a batch size of 4M tokens.\nsteps, and vary the learning rate and batch size with\nthe size of the model (see Table 2 for details).\n2.4 Efﬁcient implementation\nWe make several optimizations to improve the train-\ning speed of our models. First, we use an efﬁcient\nimplementation of the causal multi-head attention\nto reduce memory usage and runtime. This imple-\nmentation, available in the xformers library,2is\ninspired by Rabe and Staats (2021) and uses the\nbackward from Dao et al. (2022). This is achieved\nby not storing the attention weights and ', 'of 1.58, 1.30, and 1.16, respectively,\na monotonic decrease with the model size. We ﬁnetune\nthe trained models on several downstream tasks including\nMNLI and QQP from the GLUE benchmark (Wang et al.,\n2019), SQuAD 1.1 and SQuAD 2.0 from the Stanford Ques-\ntion answering dataset (Rajpurkar et al., 2016; 2018), and\nthe reading comprehension RACE dataset (Lai et al., 2017).\nFor ﬁnetuning, we follow the same procedure as (Liu et al.,\n2019b). We ﬁrst perform hyperparameter tuning on batchsize and learning rate. Once we obtain the best values, we\nreport the median development set results over 5 different\nrandom seeds for initialization. The hyperparameters used\nfor each model and task are provided in the Appendix A.\nTable 5 shows the development set results for MNLI, QQP,\nSQuAD 1.1, and SQuAD 2.0 and test set results for RACE.\nFor the test set results of RACE, we ﬁrst use the develop-\nment set to ﬁnd the checkpoint that gives us the median\nscore on the 5 random seeds and we report the results from\nthat checkpoint on the test set. We also report 5-way ensem-\nble results for the development set of SQuAD and test set\nof RACE. From Table 5 we observe that (a) as the model\nsize increases, the downstream task performance improves\nin all cases, (b) our 3.9B model establishes state of the art\nresults on the development set compared to other BERT\nbased models, and (c) our 3.9B model achieves both single\nmodel as well as ensembled SOTA results on RACE test set.\n6. Conclusion and Future Work\nIn this work, we successfully surpassed the limitations posed\nby traditional single-GPU-per-model training by implement-\ning model parallelism with only a few modiﬁcations ']","The AdamW optimizer for LLaMA models uses hyperparameters β1 = 0.9, β2 = 0.95, with a cosine learning rate schedule, a weight decay of 0.1, and gradient clipping set to 1.0.","β1= 0.9, β2= 0.95.",0.5,0.6666666666666666,0.2745012938976288
"In what ways does LLaMA's evaluation strategy extend beyond standard NLP tasks, and what new dimensions of model performance does this reveal?","['shows that by performing such an analysis, one can\nhelp elucidate the successes and failures of existing models,\nas well as help to identify possible paths forward to improve\ntoday’s systems.\nAcknowledgements\nWe thank Sewon Min, Sameer Singh, Katherine Lee, and\nthe members of UNC NLP for their valuable feedback. Eric\nWallace is supported by the Apple Scholars in AI/ML Fel-\nlowship. This work was supported by NSF-AI Engage Insti-\ntute DRL-2112635.\nReferences\nAky¨urek, E., Bolukbasi, T., Liu, F., Xiong, B., Tenney, I.,\nAndreas, J., and Guu, K. Tracing knowledge in language\nmodels back to the training data. In Findings of EMNLP ,\n2022.\nBlack, S., Leo, G., Wang, P., Leahy, C., and Biderman, S.\nGPT-Neo: Large Scale Autoregressive Language Model-\ning with Mesh-Tensorflow, 2021.\nBlack, S., Biderman, S., Hallahan, E., Anthony, Q., Gao,\nL., Golding, L., He, H., Leahy, C., McDonell, K., Phang,\nJ., et al. GPT-Neox-20B: An open-source autoregressive\nlanguage model. arXiv preprint arXiv:2204.06745 , 2022.\nBrown, T., Mann, B., Ryder, N., Subbiah, M., Kaplan, J. D.,\nDhariwal, P., Neelakantan, A., Shyam, P., Sastry, G.,\nAskell, A., et al. Language models are few-shot learners.\nInNeurIPS , 2020.\nCarlini, N., Liu, C., Erlingsson, ´U., Kos, J., and Song,\nD. The secret sharer: Evaluating and testing unintended\nmemorization in neural networks. In USENIX Security\nSymposium , 2019.\nCarlini, N., Tramer, F., Wallace, E., Jagielski, M., Herbert-\nV oss, A., Lee, K., Roberts, A., Brown, T., Song, D.,\nErlingsson, U., Oprea, A., and Raffel, C. Extracting\ntraining data from large language models. In USENIX\nSecurity Symposium , 2021.\nDe Cao, N., Izacard, G., Riedel, S., and Petroni, F. Autore-\ngressive entity retrieval. In ICLR , 2021.Elazar, Y ., Kassner, N., Ravfogel, S., Feder, A., Ravichan-\nder, A., Mosbach, M., Belinkov, Y ., Sch ¨utze, ', 'from\nKocijan et al. (2019 ). For a given input sentence,\nwe use spaCy ( Honnibal and Montani ,2017 ) to\nextract additional candidate noun phrases from the\nsentence and ﬁnetune our model so that it assigns\nhigher scores to positive referent phrases than for\nany of the generated negative candidate phrases.\nOne unfortunate consequence of this formulation\nis that we can only make use of the positive train-\ning examples, which excludes over half of the pro-\nvided training examples.10\n10While we only use the provided WNLI training data, ourResults We present our results in Table 5. In the\nﬁrst setting ( single-task, dev ), RoBERTa achieves\nstate-of-the-art results on all 9 of the GLUE\ntask development sets. Crucially, RoBERTa uses\nthe same masked language modeling pretrain-\ning objective and architecture as BERT LARGE , yet\nconsistently outperforms both BERT LARGE and\nXLNet LARGE . This raises questions about the rel-\native importance of model architecture and pre-\ntraining objective, compared to more mundane de-\ntails like dataset size and training time that we ex-\nplore in this work.\nIn the second setting ( ensembles, test ), we\nsubmit RoBERTa to the GLUE leaderboard and\nachieve state-of-the-art results on 4 out of 9 tasks\nand the highest average score to date. This is espe-\ncially exciting because RoBERTa does not depend\non multi-task ﬁnetuning, unlike most of the other\ntop submissions. We expect future work may fur-\nther improve these results by incorporating more\nsophisticated multi-task ﬁnetuning procedures.\n5.2 SQuAD Results\nWe adopt a much simpler approach for SQuAD\ncompared to past work. In particular, while\nboth BERT ( Devlin et al. ,2019 ) and XL-\nNet ( Yang et al. ,2019 ) augment their training data\nwith additional QA datasets, we ', 'fastest to train but the\nfastest at inference, and although it may be cheaper\nto train a large model to reach a certain level of\n∗Equal contribution. Correspondence: {htouvron,\nthibautlav,gizacard,egrave,glample}@meta.com\n1https://github.com/facebookresearch/llamaperformance, a smaller one trained longer will\nultimately be cheaper at inference. For instance,\nalthough Hoffmann et al. (2022) recommends\ntraining a 10B model on 200B tokens, we ﬁnd\nthat the performance of a 7B model continues to\nimprove even after 1T tokens.\nThe focus of this work is to train a series of\nlanguage models that achieve the best possible per-\nformance at various inference budgets, by training\non more tokens than what is typically used. The\nresulting models, called LLaMA , ranges from 7B\nto 65B parameters with competitive performance\ncompared to the best existing LLMs. For instance,\nLLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 ×smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. “Books – 2TB” or\n“Social media conversations”). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modiﬁcations we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our\ntraining method. We ']","LLaMA's evaluation strategy includes novel tasks that assess the model's ability in reasoning, domain-specific knowledge (e.g., legal or medical), and its proficiency in languages other than English. This approach reveals dimensions of model performance such as cross-domain adaptability, fine-grained linguistic understanding, and the capacity to generalize knowledge across different contexts and languages.","LLaMA's evaluation strategy extends beyond standard NLP tasks by focusing on achieving the best possible performance at various inference budgets. This reveals new dimensions of model performance in terms of scalability, efficiency, and cost-effectiveness in training and inference. Additionally, LLaMA's models outperform existing larger language models on benchmarks despite being smaller, democratizing access to and study of large language models.",0.2,1.0,0.6887716054916382
Describe the methodology used for evaluating models on the multitask test. How does it differ from traditional model evaluations?,"['Published as a conference paper at ICLR 2021\nMEASURING MASSIVE MULTITASK\nLANGUAGE UNDERSTANDING\nDan Hendrycks\nUC BerkeleyCollin Burns\nColumbia UniversitySteven Basart\nUChicagoAndy Zou\nUC Berkeley\nMantas Mazeika\nUIUCDawn Song\nUC BerkeleyJacob Steinhardt\nUC Berkeley\nABSTRACT\nWe propose a new test to measure a text model’s multitask accuracy. The test\ncovers 57 tasks including elementary mathematics, US history, computer science,\nlaw, and more. To attain high accuracy on this test, models must possess extensive\nworld knowledge and problem solving ability. We ﬁnd that while most recent\nmodels have near random-chance accuracy, the very largest GPT-3 model improves\nover random chance by almost 20 percentage points on average. However, on every\none of the 57 tasks, the best models still need substantial improvements before\nthey can reach expert-level accuracy. Models also have lopsided performance\nand frequently do not know when they are wrong. Worse, they still have near-\nrandom accuracy on some socially important subjects such as morality and law.\nBy comprehensively evaluating the breadth and depth of a model’s academic and\nprofessional understanding, our test can be used to analyze models across many\ntasks and to identify important shortcomings.\n1 I NTRODUCTION\nNatural Language Processing (NLP) models have achieved superhuman performance on a number of\nrecently proposed benchmarks. However, these models are still well below human level performance\nfor language understanding as a whole, suggesting a disconnect between our benchmarks and the\nactual capabilities of these models. The General Language Understanding Evaluation benchmark\n(GLUE) (Wang et al., 2018) was introduced in 2018 to evaluate performance on a wide range of NLP\ntasks, and top models achieved superhuman performance within a year. To address the shortcomings\nof GLUE, researchers designed the SuperGLUE benchmark with more difﬁcult tasks (Wang et al.,\n2019). About ', '57tasks. On the right are UniﬁedQA\ntransfer accuracies for all of the 57tasks. For both models, capabilities are lopsided.\nA.1 A NALYSIS WITH MORE FINE-TUNED MODELS\nWe primarily analyzed models with more than 10billion parameters in the main body of the paper.\nFor this section, we analyze smaller models including RoBERTa-base (125 million parameters) (Liu\n11\x0cPublished as a conference paper at ICLR 2021\net al., 2019), ALBERT-xxlarge (223 million parameters) (Lan et al., 2020), and GPT-2 (1,558 million\nparameters) (Radford et al., 2019). Models are ﬁne-tuned to predict one of four classes using the\nUniﬁedQA MCQ questions and using our dev+val set. We test on our multitask test set.\nWe observe that these smaller models can attain better-than-random accuracy. RoBERTa-base attains\nan overall accuracy of 27.9%, with 27.9%accuracy for the humanities, 28.8%for social sciences,\n27.0%for STEM, and 27.7%for other. ALBERT-xxlarge attains an accuracy of 27.1%, with 27.2%\naccuracy for the humanities, 25.7%for the social sciences, 27.7%for STEM, and 27.9%for other.\nGPT-2 attains an accuracy of 32.4%, with 32.8%accuracy for the humanities, 33.3%for the social\nsciences, 30.2%for STEM, and 33.1%for other.\nCompare this to UniﬁedQA’s smallest variant, which has just 60million parameters and approximately\n29.3%accuracy. It obtains higher accuracy than RoBERTa and ALBERT, even though it has fewer\nparameters. This suggests that its larger pretraining dataset enables higher accuracy. Likewise,\nUniﬁedQA with 3billion parameters attains 43.7%, while the similarly sized GPT-2 model with 1.5\nbillion parameters attains 32.4%accuracy. This again suggests that T5’s larger pretraining dataset\nsize (and therefore UniﬁedQA’s pretraining dataset size) can increase accuracy.\nA.2 E RROR ANALYSIS\nWe qualitatively analyze when GPT-3 makes high conﬁdence mistakes. We ﬁnd that while many of\nthese mistakes were clearly wrong, ', 'examples 550–557, and so on. Across\ndifferent seeds, a different starting example index\nis drawn. The exact training example indices are\nalso recorded in our GitHub repository for repro-\nducibility.\nStatistical Tests We use both ANOV A and its\nnonparametric equivalent, the Kruskal–Wallis test.\nAfter ﬁnding a signiﬁcant difference among multi-\nple categories of templates, we report pairwise sig-\nniﬁcance with the independent two-sample t-test\nand the Wilcoxon rank-sum test. We set α= 0.05\nand apply the Bonferroni correction to account for\nmultiple comparisons. For all results reported in\nthis paper, both t-test and Wilcoxon agree.\n4 Effect of Templates\nOur research question is whether models under-\nstand prompts as meaningful task instructions anal-\nogous to how humans would. For intuition, sup-\npose an experimenter provides a human annotator\nwith an informative instruction of a reasonably easy\ntask. If the annotator understands the instruction,\nwe expect them to perform better than when the\nexperimenter provides intentionally misleading in-\nstructions, makes irrelevant chitchat, or says noth-\ning at all. Accordingly, we write various prompt\ntemplates that correspond to these different scenar-\nios and evaluate models’ performance with these\ntemplates in zero-shot and few-shot settings.\n4.1 Method\nWe write 5 categories of templates (Table 1), with\nat least 5 templates for each category (10 for in-\nstructive):\n•Instructive: how we would describe the NLI\ntask to a human who has never seen this task\nbefore.Category Examples\ninstructive{prem} Are we justiﬁed in saying that “{hypo}”?\nSuppose {prem} Can we infer that “{hypo}”?\nmisleading-\nmoderate{prem} Can that be paraphrased as: “{hypo}”?\n{prem} Are there lots of similar words in “{hypo}”?\nmisleading-\nextreme{prem} is the sentiment positive? {hypo}\n{prem} is this a sports news? {hypo}\nirrelevant{prem} If bonito ﬂakes boil more than a few seconds\nthe stock becomes too strong. ""{hypo}""?\nnull{premise} {hypothesis}\n{hypothesis} {premise}\nTable 1: Example ']","Models were evaluated in zero-shot and few-shot settings to measure their ability to apply pretraining knowledge without further fine-tuning, a method designed to be more akin to human learning and evaluation processes.","The methodology used for evaluating models on the multitask test involves proposing a new test that covers 57 tasks spanning different subjects. Models are required to possess extensive world knowledge and problem-solving abilities to achieve high accuracy on this test. The evaluation is comprehensive, assessing the breadth and depth of a model's academic and professional understanding across many tasks. This differs from traditional model evaluations by focusing on a wide range of tasks, including elementary mathematics, US history, computer science, law, and more, rather than just one specific task or benchmark. Additionally, the evaluation considers the lopsided performance of models, their ability to know when they are wrong, and their accuracy on socially important subjects such as morality and law.",1.0,1.0,0.41519695520401
What characteristic of large language model (LLM) generated text's probability function does DetectGPT exploit for detection?,"['DetectGPT: Zero-Shot Machine-Generated Text Detection\nusing Probability Curvature\nEric Mitchell1Yoonho Lee1Alexander Khazatsky1Christopher D. Manning1Chelsea Finn1\nAbstract\nThe increasing fluency and widespread usage of\nlarge language models (LLMs) highlight the de-\nsirability of corresponding tools aiding detection\nof LLM-generated text. In this paper, we identify\na property of the structure of an LLM’s proba-\nbility function that is useful for such detection.\nSpecifically, we demonstrate that text sampled\nfrom an LLM tends to occupy negative curva-\nture regions of the model’s log probability func-\ntion. Leveraging this observation, we then define\na new curvature-based criterion for judging if a\npassage is generated from a given LLM. This\napproach, which we call DetectGPT, does not re-\nquire training a separate classifier, collecting a\ndataset of real or generated passages, or explic-\nitly watermarking generated text. It uses only\nlog probabilities computed by the model of in-\nterest and random perturbations of the passage\nfrom another generic pre-trained language model\n(e.g., T5). We find DetectGPT is more discrimi-\nnative than existing zero-shot methods for model\nsample detection, notably improving detection of\nfake news articles generated by 20B parameter\nGPT-NeoX from 0.81 AUROC for the strongest\nzero-shot baseline to 0.95 AUROC for Detect-\nGPT. See ericmitchell.ai/detectgpt\nfor code, data, and other project information.\n1. Introduction\nLarge language models (LLMs) have proven able to gen-\nerate remarkably fluent responses to a wide variety of user\nqueries. Models such as GPT-3 (Brown et al., 2020), PaLM\n(Chowdhery et al., 2022), and ChatGPT (OpenAI, 2022)\ncan convincingly answer complex questions about science,\nmathematics, historical and current events, and social trends.\n1Stanford University. Correspondence to: Eric Mitchell\n<eric.mitchell@cs.stanford.edu >.\nProceedings of the 40thInternational Conference on Machine\nLearning , Honolulu, Hawaii, USA. PMLR 202, 2023. Copyright\n2023 by the author(s). Candidate passage : “Joe Biden recently made ', '8. Impact of varying the number of perturbations (samples\nof mask and mask-fill) used by DetectGPT on AUROC for GPT-2\n(left) and GPT-J ( right ) to estimate the perturbation discrepancy\non detection. Averaging up to 100 perturbations greatly increases\nDetectGPT’s reliability. Perturbations sampled from T5-large.\nlarly how the domain impacts the threshold separating the\nperturbation discrepancy distributions of model-generated\nand human texts as well as the impact of passage length on\ndetection. Figure 9 shows the perturbation discrepancy dis-\ntributions for model-generated and human texts across four\ndata distributions, using GPT-Neo-2.7B to generate sam-\nples. A threshold of slightly below 0.1 separates human and\nmodel texts across data distributions, which is important for\npractical scenarios in which a passage may be analyzed with-\nout knowing its domain a priori. Finally, Figure 10 shows an\nanalysis of DetectGPT’s performance as a function of pas-\nsage length. We bin the paired human- and model-generated\nsequences by their average length into three bins of equal\nsize (bottom/middle/top third), and plot the AUROC within\neach bin. The relationship between detection performance\nand passage length generally depends on the dataset and\nmodel (or tokenizer). For very long sequences, DetectGPT\nmay see reduced performance because our implementation\nof DetectGPT applies all T5 mask-filling perturbations at\nonce, and T5 may fail to track many mask tokens at once.\nBy applying perturbations in multiple sequential rounds of\nsmaller numbers of masks, this effect may be mitigated.\n6. Discussion\nAs large language models continue to improve, they will\nbecome increasingly attractive tools for replacing human\nwriters in a variety of contexts, such as education, jour-\nnalism, and art. While legitimate uses of language model\ntechnologies exist in all of these settings, teachers, readers,\nand consumers are likely ', 'al.,\n2023) may further improve the effectiveness of methods\nsuch as DetectGPT, even as LLMs continue to improve.\nLimitations. One limitation of probability-based methods\nfor zero-shot machine-generated text detection (like Detect-\nGPT) is the white-box assumption that we can evaluate log\nprobabilities of the model(s) in question. For models be-\nhind APIs that do provide probabilities (such as GPT-3),\nevaluating probabilities nonetheless costs money. Another\nassumption of DetectGPT is access to a reasonable pertur-\nbation function. While in this work, we use off-the-shelf\nmask-filling models such as T5 and mT5 (for non-English\nlanguages), some domains may see reduced performance\nif existing mask-filling models do not well represent the\nspace of meaningful rephrases, reducing the quality of the\ncurvature estimate. While DetectGPT provides the best\navailable detection performance for PubMedQA, its drop\nin performance compared to other datasets may be a result\nAverage length0.9850.9900.995AUROC\ngpt-2\nAverage length0.960.970.980.99AUROC\nopt-2.7\nXSum\nSQuAD\nWritingPrompts\n130 140 150 160 170\nAverage length0.8750.9000.9250.9500.975AUROC\nEleutherAI/gpt-j-6b\n130 140 150 160 170\nAverage length0.70.80.9AUROC\nEleutherAI/gpt-neox-20bFigure 10. DetectGPT AUROC vs passage length. The relation-\nship between detection performance and passage length generally\ndepends on the dataset and model (or tokenizer). Decreases in\ndetection quality with increasing length may be due to T5 failing\nto track many (20+) masks to fill at once; this problem may be\nmitigated by applying mask-fills in a sequence of smaller batches.\nof lower quality perturbations. Finally, DetectGPT is more\ncompute-intensive than other methods for detection, as it\nrequires sampling and scoring the set of perturbations for\neach candidate passage, rather than just the candidate pas-\nsage; a better tuned perturbation function or more efficient\ncurvature approximation may help mitigate these costs.\nFuture Work. While the methods in this work make no\nassumptions about the models generating the samples, fu-\nture work may explore how watermarking ']",DetectGPT exploits the characteristic that LLM-generated text tends to lie in regions of negative curvature of the model's log probability function.,Negative curvature regions of the model's log probability function,1.0,1.0,0.5471029281616211
What empirical validation does DetectGPT provide for its hypothesis regarding log probability curvature?,"['deviation of the ob-\nserved values used to estimate E˜x∼q(·|x)logpθ(˜x)provides\na slightly better signal for detection, typically increasing\n1We later show in Figure 8 that varying the number of samples\nused to estimate the expectation effectively allows for trading off\nbetween accuracy and speed.AUROC by around 0.020, so we use this normalized version\nof the perturbation discrepancy in our experiments. The\nresulting method, DetectGPT, is summarized in Alg. 1. Hav-\ning described an application of the perturbation discrepancy\nto machine-generated text detection, we next provide an\ninterpretation of this quantity.\nInterpretation of perturbation discrepancy as curvature\nWhile Figure 3 suggests that the perturbation discrepancy\nmay be useful, it is not immediately obvious what it mea-\nsures. In this section, we show that the perturbation dis-\ncrepancy approximates a measure of the local curvature\nof the log probability function near the candidate passage,\nmore specifically, that it is proportional to the negative trace\nof the Hessian of the log probability function.2To han-\ndle the non-differentiability of discrete data, we consider\ncandidate passages in a latent semantic space, where small\ndisplacements correspond to valid edits that retain similar\nmeaning to the original. Because our perturbation function\n(T5) models natural text, we expect our perturbations to\nroughly capture such meaningful variations of the original\npassage, rather than arbitrary edits.\nWe first invoke Hutchinson’s trace estimator (Hutchinson,\n1990), giving an unbiased estimate of the trace of matrix A:\ntr(A) =Ezz⊤Az (2)\nprovided that the elements of z∼qzare IID with E[zi] = 0\nandVar(zi) = 1 . To use Equation 2 to estimate the trace\nof the Hessian of fatx, we must therefore compute the\nexpectation of the directional second derivative z⊤Hf(x)z.\nWe approximate this expression with finite differences:\nz⊤Hf(x)z≈f(x+hz) +f(x−hz)−2f(x)\nh2(3)\nCombining Equations 2 and 3 ', 'source model pθ,\nDetectGPT compares the log probability of the candidate\npassage under pθwith the average log probability of several\nperturbations of the passage under pθ(generated with, e.g.,\nT5; Raffel et al. (2020)). If the perturbed passages tend\nto have lower average log probability than the original by\nsome margin, the candidate passage is likely to have come\nfrompθ. See Figure 1 for an overview of the problem and\nDetectGPT. See Figure 2 for an illustration of the under-\nlying hypothesis and Figure 3 for empirical evaluation of\nthe hypothesis. Our experiments find that DetectGPT is\nmore accurate than existing zero-shot methods for detect-\ning machine-generated text, improving over the strongest\nzero-shot baseline by over 0.1 AUROC for multiple source\nmodels when detecting machine-generated news articles.\nContributions. Our main contributions are: (a) the identi-\nfication and empirical validation of the hypothesis that the\ncurvature of a model’s log probability function tends to be\nsignificantly more negative at model samples than for hu-\nman text, and (b) DetectGPT, a practical algorithm inspired\nby this hypothesis that approximates the trace of the log\nlogp/uni03B8(x)\nxfake/uni223Cp/uni03B8(x)˜xfake1˜xfake2˜xfake3˜xfake4xreal/uni223Cphuman(x)˜xreal1˜xreal2˜xreal3˜xreal4\nFake/real samplePerturbed fake/real sampleLog likelihood…logp/uni03B8(x)Figure 2. We identify and exploit the tendency of machine-\ngenerated passages x∼pθ(·)(left) to lie in negative curvature\nregions of logp(x), where nearby samples have lower model\nlog probability on average. In contrast, human-written text\nx∼preal(·)(right) tends not to occupy regions with clear nega-\ntive log probability curvature; nearby samples may have higher or\nlower log probability.\nprobability function’s Hessian to detect a model’s samples.\n2. Related Work\nIncreasingly large LLMs (Radford et al., 2019; Brown et al.,\n2020; Chowdhery et al., 2022; OpenAI, 2022; Zhang et al.,\n2022) have led to dramatically improved performance on\nmany language-related benchmarks and the ability to gen-\nerate ', '0.58 0.53 0.53 0.50 0.55 0.56 0.57 0.54 0.32 0.37 0.28 0.32 0.32 0.32\nDetectGPT 0.99 0.98 1.00 0.98 0.97 0.98 0.99 0.98 0.98 0.90 0.82* 0.94 1.00 0.99 0.99 0.97* 0.93 0.98\nDiff 0.04 0.04 0.04 0.05 0.08 0.05 0.01 0.02 0.04 0.00 -0.01 0.02 0.01 0.01 0.01 -0.01 -0.05 0.00\nTable 4. Nucleus (top- p) sampling evaluation with p= 0.96. AUROC for detecting samples from the given model on the given dataset for\nDetectGPT and four previously proposed criteria. Nucleus sampling generally makes detection easier for all methods, but DetectGPT still\nprovides the highest average AUROC. For WritingPrompts, however, the LogRank baseline performs as well as DetectGPT.\nXSum SQuAD WritingPrompts\nMethod GPT-2 OPT-2.7 Neo-2.7 GPT-J NeoX Avg. GPT-2 OPT-2.7 Neo-2.7 GPT-J NeoX Avg. GPT-2 OPT-2.7 Neo-2.7 GPT-J NeoX Avg.\nlogp(x) 0.89 0.89 0.89 0.84 0.81 0.87 0.93 0.90 0.88 0.82 0.74 0.85 0.97 0.95 0.97 0.96 0.95* 0.96\nRank 0.79 0.77 0.77 0.75 0.73 0.76 0.84 0.82 0.80 0.80 0.75 0.80 0.87 0.84 0.83 0.82 0.81 0.83\nLogRank 0.92* 0.91* 0.93* 0.89* 0.85* 0.90* 0.96* 0.94* 0.92* 0.87* 0.79* 0.90* 0.98* 0.97* 0.98* 0.97 0.96 0.97\nEntropy 0.58 0.49 0.55 0.56 0.59 0.55 0.55 0.52 0.56 0.56 0.58 0.56 0.35 0.41 0.30 0.34 0.37 0.35\nDetectGPT 0.99 0.97 0.99 0.96 0.96 0.98 0.99 0.98 0.98 0.89 0.80 0.93 0.99 0.98 0.99 0.97 0.93 0.97\nDiff 0.07 0.06 0.06 0.07 0.11 0.08 0.03 0.04 0.06 0.02 0.01 0.03 0.01 0.01 0.01 0.00 -0.03 0.00\nTable 5. Top-ksampling evaluation with k= 40 . DetectGPT generally provides the most accurate performance (highest AUROC),\nalthough the gap is narrowed comparing to direct sampling, ']","DetectGPT's hypothesis is empirically validated across a diverse body of LLMs, showing consistent results even when perturbations are sourced from different language models.","DetectGPT provides empirical validation for its hypothesis by comparing the log probability of candidate passages under pθ with the average log probability of several perturbations of the passage under pθ. If the perturbed passages tend to have lower average log probability than the original, the candidate passage is likely to have come from pθ. This comparison is illustrated in Figure 2 in the context.",1.0,1.0,0.6232876777648926
What datasets were used for BERT's pre-training and why?,"['is a\nlarge-scale reading comprehension dataset with\nmore than 28,000 passages and nearly 100,000\nquestions. The dataset is collected from English\nexaminations in China, which are designed for\nmiddle and high school students. In RACE, each\npassage is associated with multiple questions. For\nevery question, the task is to select one correct an-\nswer from four options. RACE has signiﬁcantly\nlonger context than other popular reading compre-\nhension datasets and the proportion of questions\nthat requires reasoning is very large.\n4 Training Procedure Analysis\nThis section explores and quantiﬁes which choices\nare important for successfully pretraining BERT\nmodels. We keep the model architecture ﬁxed.7\nSpeciﬁcally, we begin by training BERT models\nwith the same conﬁguration as BERT BASE (L=\n12,H= 768 ,A= 12 , 110M params).\n4.1 Static vs. Dynamic Masking\nAs discussed in Section 2, BERT relies on ran-\ndomly masking and predicting tokens. The orig-\ninal BERT implementation performed masking\nonce during data preprocessing, resulting in a sin-\nglestatic mask. To avoid using the same mask for\neach training instance in every epoch, training data\nwas duplicated 10 times so that each sequence is\nmasked in 10 different ways over the 40 epochs of\ntraining. Thus, each training sequence was seen\nwith the same mask four times during training.\nWe compare this strategy with dynamic mask-\ningwhere we generate the masking pattern every\ntime we feed a sequence to the model. This be-\ncomes crucial when pretraining for more steps or\nwith larger datasets.\n7Studying architectural changes, including larger archi-\ntectures, is an important area for future work.Masking SQuAD 2.0 MNLI-m SST-2\nreference 76.3 84.3 92.8\nOur reimplementation:\nstatic 78.3 84.3 92.5\ndynamic 78.7 84.0 92.9\nTable 1: Comparison between static and dynamic\nmasking for BERT BASE. We report F1 for SQuAD and\naccuracy for MNLI-m and ', ""4: BERT validation accuracy when trained and\nevaluated under several versions of SWAG, with the\nnew dataset HellaSwag as comparison. We compare:\nEnding Only No context is provided; just the endings.\nShuffled Endings that are indidivually tokenized,\nshuﬄed, and then detokenized.\nShuffled+\nEnding OnlyNo context is provided andeach ending is\nshuﬄed.\nknown approach at the time of writing.4Core to\nour analysis is investigating how a model trained\non Wikipedia and books can be so e ﬀectively ﬁne-\ntuned for SWAG, a dataset from video captions.\n3.1 How much innate knowledge does BERT\nhave about SWAG?\nWe investigate this question by measuring BERT’s\nperformance on SWAG while varying the size of\nthe training dataset; results are shown in Fig-\nure 3. While the best known ELMo NLI model\n(ESIM +ELMo; Chen et al., 2017) requires the en-\ntire training set to reach 59%, BERT outperforms\nthis given only 64 examples. However, BERT still\nneeds upwards of 16k examples to approach hu-\nman performance, around which it plateaus.\n3.2 What is learned during ﬁnetuning?\nFigure 4 compares BERT’s performance when\ntrained and evaluated on variants of SWAG.\nContext: BERT’s performance only slips 11.9\npoints (86.7%Ñ74.8%) when context is omitted\n(Ending Only ), suggesting a bias exists in the\nendings themselves.5If a followup event seems\nunreasonable absent of context , then there must be\nsomething markedly di ﬀerent between the space\nof human-written and machine-generated endings.\nStructure: To distinguish word usage from\n4See the appendix for a discussion of the BERT architec-\nture and hyperparameter settings we used in our experiments.\n5These biases are similar to those in NLI datasets, as\nfound by Gururangan et al. (2018); Poliak et al. (2018).\n3\x0c0 10 20 30 40 50\nActivitynet Adversarial Filtering iteration0255075100BERT accuracy (4-way) Zellers' LM GPT\n0 10 20 30 "", 'and\nYejin Choi. 2019. Defending against neural fake\nnews. arXiv preprint arXiv:1905.12616 .\nYukun Zhu, Ryan Kiros, Richard Zemel, Ruslan\nSalakhutdinov, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Aligning books and movies:\nTowards story-like visual explanations by watch-\ning movies and reading books. In arXiv preprint\narXiv:1506.06724 .\nAppendix for “RoBERTa: A Robustly\nOptimized BERT Pretraining Approach”\nA Full results on GLUE\nIn Table 8we present the full set of development\nset results for RoBERTa. We present results for\naLARGE conﬁguration that follows BERT LARGE ,\nas well as a BASE conﬁguration that follows\nBERT BASE.B Pretraining Hyperparameters\nTable 9describes the hyperparameters for pre-\ntraining of RoBERTa LARGE and RoBERTa BASE\nC Finetuning Hyperparameters\nFinetuning hyperparameters for RACE, SQuAD\nand GLUE are given in Table 10. We select the\nbest hyperparameter values based on the median\nof 5 random seeds for each task.\x0cMNLI QNLI QQP RTE SST MRPC CoLA STS\nRoBERTa BASE\n+ all data + 500k steps 87.6 92.8 91.9 78.7 94.8 90.2 63.6 91.2\nRoBERTa LARGE\nwith B OOKS + W IKI 89.0 93.9 91.9 84.5 95.3 90.2 66.3 91.6\n+ additional data ( §3.2) 89.3 94.0 92.0 82.7 95.6 91.4 66.1 92.2\n+ pretrain longer 300k 90.0 94.5 92.2 83.3 96.1 91.1 67.4 92.3\n+ pretrain longer 500k 90.2 94.7 92.2 86.6 96.4 90.9 68.0 92.4\nTable 8: Development set results on GLUE tasks for various co nﬁgurations of RoBERTa.\nHyperparam RoBERTa LARGE RoBERTa BASE\nNumber of Layers 24 12\nHidden size 1024 768\nFFN inner hidden size 4096 3072\nAttention heads 16 12\nAttention head size 64 64\nDropout 0.1 0.1\nAttention Dropout 0.1 0.1\nWarmup Steps 30k 24k\nPeak Learning Rate 4e-4 6e-4\nBatch Size 8k 8k\nWeight Decay 0.01 0.01\nMax Steps 500k 500k\nLearning Rate Decay Linear Linear\nAdamǫ 1e-6 1e-6\nAdamβ1 0.9 0.9\nAdamβ2 0.98 ']","BooksCorpus (800M words) and English Wikipedia (2500M words), chosen for their document-level organization and volume of data.","BERT's pre-training was done using datasets from Wikipedia and books. This was done because these datasets contain a large amount of diverse text data, which helps BERT to learn a wide range of language patterns and structures. Additionally, pre-training on these datasets allows BERT to capture general linguistic knowledge and semantics, making it effective for fine-tuning on specific downstream tasks.",0.6666666666666666,1.0,0.30155932903289795
How do the LLaMA models' parameter counts compare across the different versions?,"['the ability of the model to\nfollow instructions. Since this is not the focus of\nthis paper, we only conducted a single experiment\nfollowing the same protocol as Chung et al. (2022)\nto train an instruct model, LLaMA-I.\nOPT 30B 26.1\nGLM 120B 44.8\nPaLM 62B 55.1\nPaLM-cont 62B 62.8\nChinchilla 70B 67.5\nLLaMA 65B 63.4\nOPT-IML-Max 30B 43.2\nFlan-T5-XXL 11B 55.1\nFlan-PaLM 62B 59.6\nFlan-PaLM-cont 62B 66.1\nLLaMA-I 65B 68.9\nTable 10: Instruction ﬁnetuning – MMLU (5-shot).\nComparison of models of moderate size with and with-\nout instruction ﬁnetuning on MMLU.In Table 10, we report the results of our instruct\nmodel LLaMA-I on MMLU and compare with ex-\nisting instruction ﬁnetuned models of moderate\nsizes, namely, OPT-IML (Iyer et al., 2022) and the\nFlan-PaLM series (Chung et al., 2022). All the re-\nported numbers are from the corresponding papers.\nDespite the simplicity of the instruction ﬁnetuning\napproach used here, we reach 68.9% on MMLU.\nLLaMA-I (65B) outperforms on MMLU existing\ninstruction ﬁnetuned models of moderate sizes, but\nare still far from the state-of-the-art, that is 77.4\nfor GPT code-davinci-002 on MMLU (numbers\ntaken from Iyer et al. (2022)). The details of the\nperformance on MMLU on the 57 tasks can be\nfound in Table 16 of the appendix.\n5 Bias, Toxicity and Misinformation\nLarge language models have been showed to re-\nproduce and amplify biases that are existing in\nthe training data (Sheng et al., 2019; Kurita et al.,\n2019), and to generate toxic or offensive con-\ntent (Gehman et al., 2020). As our training dataset\ncontains a large proportion of data from the Web,\nwe believe that it is crucial to determine the po-\ntential for our models to generate such content.\nTo understand the potential harm of LLaMA-65B,\nwe evaluate on different benchmarks that measure\ntoxic content ', 'description on two\nbenchmarks: HumanEval (Chen et al., 2021) and\nMBPP (Austin et al., 2021). For both tasks, the\nmodel receives a description of the program in a\nfew sentences, as well as a few input-output ex-\namples. In HumanEval, it also receives a function\nsignature, and the prompt is formatted as natural\ncode with the textual description and tests in a\x0cMATH +maj1@k GSM8k +maj1@k\nPaLM8B 1.5 - 4.1 -\n62B 4.4 - 33.0 -\n540B 8.8 - 56.5 -\nMinerva8B 14.1 25.4 16.2 28.4\n62B 27.6 43.4 52.4 68.5\n540B 33.6 50.3 68.5 78.5\nLLaMA7B 2.9 6.9 11.0 18.1\n13B 3.9 8.8 17.8 29.3\n33B 7.1 15.2 35.6 53.1\n65B 10.6 20.5 50.9 69.7\nTable 7: Model performance on quantitative reason-\ning datasets. For majority voting, we use the same\nsetup as Minerva, with k= 256 samples for MATH\nandk= 100 for GSM8k (Minerva 540B uses k= 64\nfor MATH and and k= 40 for GSM8k). LLaMA-65B\noutperforms Minerva 62B on GSM8k, although it has\nnot been ﬁne-tuned on mathematical data.\ndocstring. The model needs to generate a Python\nprogram that ﬁts the description and satisﬁes the\ntest cases. In Table 8, we compare the pass@1\nscores of our models with existing language mod-\nels that have not been ﬁnetuned on code, namely\nPaLM and LaMDA (Thoppilan et al., 2022). PaLM\nand LLaMA were trained on datasets that contain\na similar number of code tokens.\nAs show in Table 8, for a similar number\nof parameters, LLaMA outperforms other gen-\neral models such as LaMDA and PaLM, which\nare not trained or ﬁnetuned speciﬁcally for code.\nLLaMA with 13B parameters and more outper-\nforms LaMDA 137B on both HumanEval and\nMBPP. LLaMA 65B also outperforms PaLM 62B,\neven when it is trained longer. The pass@1 ', 'fastest to train but the\nfastest at inference, and although it may be cheaper\nto train a large model to reach a certain level of\n∗Equal contribution. Correspondence: {htouvron,\nthibautlav,gizacard,egrave,glample}@meta.com\n1https://github.com/facebookresearch/llamaperformance, a smaller one trained longer will\nultimately be cheaper at inference. For instance,\nalthough Hoffmann et al. (2022) recommends\ntraining a 10B model on 200B tokens, we ﬁnd\nthat the performance of a 7B model continues to\nimprove even after 1T tokens.\nThe focus of this work is to train a series of\nlanguage models that achieve the best possible per-\nformance at various inference budgets, by training\non more tokens than what is typically used. The\nresulting models, called LLaMA , ranges from 7B\nto 65B parameters with competitive performance\ncompared to the best existing LLMs. For instance,\nLLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 ×smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. “Books – 2TB” or\n“Social media conversations”). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modiﬁcations we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our\ntraining method. We ']","The LLaMA modelsvary in size from 7 billion parameters to 65 billion parameters, with intermediate sizes of 13 billion and 33 billion parameters.","The LLaMA models' parameter counts range from 7B to 65B, with each version having a different number of parameters.",1.0,1.0,0.8239776492118835
"What are the significant benchmarks LLaMA models were evaluated on, and how does their performance relate to other foundation models?","['the ability of the model to\nfollow instructions. Since this is not the focus of\nthis paper, we only conducted a single experiment\nfollowing the same protocol as Chung et al. (2022)\nto train an instruct model, LLaMA-I.\nOPT 30B 26.1\nGLM 120B 44.8\nPaLM 62B 55.1\nPaLM-cont 62B 62.8\nChinchilla 70B 67.5\nLLaMA 65B 63.4\nOPT-IML-Max 30B 43.2\nFlan-T5-XXL 11B 55.1\nFlan-PaLM 62B 59.6\nFlan-PaLM-cont 62B 66.1\nLLaMA-I 65B 68.9\nTable 10: Instruction ﬁnetuning – MMLU (5-shot).\nComparison of models of moderate size with and with-\nout instruction ﬁnetuning on MMLU.In Table 10, we report the results of our instruct\nmodel LLaMA-I on MMLU and compare with ex-\nisting instruction ﬁnetuned models of moderate\nsizes, namely, OPT-IML (Iyer et al., 2022) and the\nFlan-PaLM series (Chung et al., 2022). All the re-\nported numbers are from the corresponding papers.\nDespite the simplicity of the instruction ﬁnetuning\napproach used here, we reach 68.9% on MMLU.\nLLaMA-I (65B) outperforms on MMLU existing\ninstruction ﬁnetuned models of moderate sizes, but\nare still far from the state-of-the-art, that is 77.4\nfor GPT code-davinci-002 on MMLU (numbers\ntaken from Iyer et al. (2022)). The details of the\nperformance on MMLU on the 57 tasks can be\nfound in Table 16 of the appendix.\n5 Bias, Toxicity and Misinformation\nLarge language models have been showed to re-\nproduce and amplify biases that are existing in\nthe training data (Sheng et al., 2019; Kurita et al.,\n2019), and to generate toxic or offensive con-\ntent (Gehman et al., 2020). As our training dataset\ncontains a large proportion of data from the Web,\nwe believe that it is crucial to determine the po-\ntential for our models to generate such content.\nTo understand the potential harm of LLaMA-65B,\nwe evaluate on different benchmarks that measure\ntoxic content ', 'fastest to train but the\nfastest at inference, and although it may be cheaper\nto train a large model to reach a certain level of\n∗Equal contribution. Correspondence: {htouvron,\nthibautlav,gizacard,egrave,glample}@meta.com\n1https://github.com/facebookresearch/llamaperformance, a smaller one trained longer will\nultimately be cheaper at inference. For instance,\nalthough Hoffmann et al. (2022) recommends\ntraining a 10B model on 200B tokens, we ﬁnd\nthat the performance of a 7B model continues to\nimprove even after 1T tokens.\nThe focus of this work is to train a series of\nlanguage models that achieve the best possible per-\nformance at various inference budgets, by training\non more tokens than what is typically used. The\nresulting models, called LLaMA , ranges from 7B\nto 65B parameters with competitive performance\ncompared to the best existing LLMs. For instance,\nLLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 ×smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. “Books – 2TB” or\n“Social media conversations”). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modiﬁcations we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our\ntraining method. We ', '57tasks. On the right are UniﬁedQA\ntransfer accuracies for all of the 57tasks. For both models, capabilities are lopsided.\nA.1 A NALYSIS WITH MORE FINE-TUNED MODELS\nWe primarily analyzed models with more than 10billion parameters in the main body of the paper.\nFor this section, we analyze smaller models including RoBERTa-base (125 million parameters) (Liu\n11\x0cPublished as a conference paper at ICLR 2021\net al., 2019), ALBERT-xxlarge (223 million parameters) (Lan et al., 2020), and GPT-2 (1,558 million\nparameters) (Radford et al., 2019). Models are ﬁne-tuned to predict one of four classes using the\nUniﬁedQA MCQ questions and using our dev+val set. We test on our multitask test set.\nWe observe that these smaller models can attain better-than-random accuracy. RoBERTa-base attains\nan overall accuracy of 27.9%, with 27.9%accuracy for the humanities, 28.8%for social sciences,\n27.0%for STEM, and 27.7%for other. ALBERT-xxlarge attains an accuracy of 27.1%, with 27.2%\naccuracy for the humanities, 25.7%for the social sciences, 27.7%for STEM, and 27.9%for other.\nGPT-2 attains an accuracy of 32.4%, with 32.8%accuracy for the humanities, 33.3%for the social\nsciences, 30.2%for STEM, and 33.1%for other.\nCompare this to UniﬁedQA’s smallest variant, which has just 60million parameters and approximately\n29.3%accuracy. It obtains higher accuracy than RoBERTa and ALBERT, even though it has fewer\nparameters. This suggests that its larger pretraining dataset enables higher accuracy. Likewise,\nUniﬁedQA with 3billion parameters attains 43.7%, while the similarly sized GPT-2 model with 1.5\nbillion parameters attains 32.4%accuracy. This again suggests that T5’s larger pretraining dataset\nsize (and therefore UniﬁedQA’s pretraining dataset size) can increase accuracy.\nA.2 E RROR ANALYSIS\nWe qualitatively analyze when GPT-3 makes high conﬁdence mistakes. We ﬁnd that while many of\nthese mistakes were clearly wrong, ']"," LLaMA models were evaluated on benchmarks such as Common Sense Reasoning, Closed-book Question Answering, Reading Comprehension, Mathematical Reasoning, and Code Generation, showing superior or competitive performance compared to existing foundation models.","The significant benchmarks LLaMA models were evaluated on are MMLU (5-shot). The performance of LLaMA-I (65B) on MMLU outperforms existing instruction finetuned models of moderate sizes, but is still far from the state-of-the-art, which is 77.4 for GPT code-davinci-002 on MMLU.",1.0,1.0,0.5196094512939453
What is the primary goal of introducing the massive multitask test in language understanding models?,"['Published as a conference paper at ICLR 2021\nMEASURING MASSIVE MULTITASK\nLANGUAGE UNDERSTANDING\nDan Hendrycks\nUC BerkeleyCollin Burns\nColumbia UniversitySteven Basart\nUChicagoAndy Zou\nUC Berkeley\nMantas Mazeika\nUIUCDawn Song\nUC BerkeleyJacob Steinhardt\nUC Berkeley\nABSTRACT\nWe propose a new test to measure a text model’s multitask accuracy. The test\ncovers 57 tasks including elementary mathematics, US history, computer science,\nlaw, and more. To attain high accuracy on this test, models must possess extensive\nworld knowledge and problem solving ability. We ﬁnd that while most recent\nmodels have near random-chance accuracy, the very largest GPT-3 model improves\nover random chance by almost 20 percentage points on average. However, on every\none of the 57 tasks, the best models still need substantial improvements before\nthey can reach expert-level accuracy. Models also have lopsided performance\nand frequently do not know when they are wrong. Worse, they still have near-\nrandom accuracy on some socially important subjects such as morality and law.\nBy comprehensively evaluating the breadth and depth of a model’s academic and\nprofessional understanding, our test can be used to analyze models across many\ntasks and to identify important shortcomings.\n1 I NTRODUCTION\nNatural Language Processing (NLP) models have achieved superhuman performance on a number of\nrecently proposed benchmarks. However, these models are still well below human level performance\nfor language understanding as a whole, suggesting a disconnect between our benchmarks and the\nactual capabilities of these models. The General Language Understanding Evaluation benchmark\n(GLUE) (Wang et al., 2018) was introduced in 2018 to evaluate performance on a wide range of NLP\ntasks, and top models achieved superhuman performance within a year. To address the shortcomings\nof GLUE, researchers designed the SuperGLUE benchmark with more difﬁcult tasks (Wang et al.,\n2019). About ', 'David Luan, Dario Amodei, and Ilya Sutskever. Language models are\nunsupervised multitask learners. 2019.\nYinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar S. Joshi, Danqi Chen, Omer Levy, Mike Lewis,\nLuke S. Zettlemoyer, and Veselin Stoyanov. Roberta: A robustly optimized bert pretraining approach. ArXiv ,\nabs/1907.11692, 2019.\nRoy Schwartz, Jesse Dodge, Noah A. Smith, and Oren Etzioni. Green ai. ArXiv , abs/1907.10597, 2019.\nEmma Strubell, Ananya Ganesh, and Andrew McCallum. Energy and policy considerations for deep learning in\nnlp. In ACL, 2019.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser,\nand Illia Polosukhin. Attention is all you need. In NIPS , 2017.\nThomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac,\nTim Rault, Rémi Louf, Morgan Funtowicz, and Jamie Brew. Transformers: State-of-the-art natural language\nprocessing, 2019.\nCristian Bucila, Rich Caruana, and Alexandru Niculescu-Mizil. Model compression. In KDD , 2006.\nGeoffrey E. Hinton, Oriol Vinyals, and Jeffrey Dean. Distilling the knowledge in a neural network. ArXiv ,\nabs/1503.02531, 2015.\nYukun Zhu, Ryan Kiros, Richard S. Zemel, Ruslan Salakhutdinov, Raquel Urtasun, Antonio Torralba, and Sanja\nFidler. Aligning books and movies: Towards story-like visual explanations by watching movies and reading\nbooks. 2015 IEEE International Conference on Computer Vision (ICCV) , pages 19–27, 2015.\nAlex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel R. Bowman. Glue: A\nmulti-task benchmark and analysis platform for natural language understanding. In ICLR , 2018.\nMatthew E. Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke\nZettlemoyer. Deep contextualized word representations. In NAACL , 2018.\nAlex Wang, Ian F. Tenney, Yada Pruksachatkun, Katherin Yu, Jan Hula, Patrick Xia, ', 'Proceedings of the 48th Annual Meeting of the\nAssociation for Computational Linguistics , ACL ’10, pp.\n384–394, Stroudsburg, PA, USA, 2010. Association for\nComputational Linguistics.\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nValiant, L. G. A bridging model for parallel computation.\nCommunications of the ACM , 33(8):103-111, 1990.\nVaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones,\nL., Gomez, A. N., Kaiser, L., and Polosukhin, I. Attention\nis all you need. CoRR , abs/1706.03762, 2017.\nWang, A., Singh, A., Michael, J., Hill, F., Levy, O., and\nBowman, S. R. Glue: A multi-task benchmark and analy-\nsis platform for natural language understanding. ICLR ,\n2019.\nYang, Z., Dai, Z., Yang, Y ., Carbonell, J. G., Salakhut-\ndinov, R., and Le, Q. V . Xlnet: Generalized autore-\ngressive pretraining for language understanding. CoRR ,\nabs/1906.08237, 2019. URL http://arxiv .org/\nabs/1906.08237 .\nYou, Y ., Gitman, I., and Ginsburg, B. Large batch training\nof convolutional networks. arXiv:1708.03888 , 2017.\nYou, Y ., Li, J., Reddi, S., Hseu, J., Kumar, S., Bhojana-\npalli, S., Song, X., Demmel, J., and Hsieh, C.-J. Large\nbatch optimization for deep learning: Training bert in 76\nminutes. arXiv:1904.00962 , 2019.\nZellers, R., Holtzman, A., Rashkin, H., Bisk, Y ., Farhadi,\nA., Roesner, F., and Choi, Y . Defending against neural\nfake news. CoRR , abs/1905.12616, 2019. URL http:\n//arxiv.org/abs/1905 .12616 .\nZhu, Y ., Kiros, R., Zemel, R. S., Salakhutdinov, R., Urta-\nsun, R., Torralba, A., and Fidler, S. Aligning books and\nmovies: Towards story-like visual explanations by watch-\ning movies and reading books. CoRR , abs/1506.06724,\n2015.\nA. BERT Finetuning Hyperparameters\nTable 6 presents the hyperparameters used for each model\nand task during ﬁnetuning.\nB. Model Parallel Supplementary Material\nIn this section, we present further details about the hybrid\nmodel and ']","The primary goal is to bridge the gap between the vast knowledge models encounter during pretraining on the internet and the existing measures of success, assessing models across a diverse set of subjects to highlight knowledge and problem-solving ability in more challenging, real-world contexts.","The primary goal of introducing the massive multitask test in language understanding models is to measure a text model's multitask accuracy across various tasks, evaluate the breadth and depth of the model's academic and professional understanding, identify important shortcomings in the models, and assess their performance on socially important subjects such as morality and law.",0.15384615384615385,1.0,0.42843568325042725
"What were the key findings regarding the models' performance on the multitask test, particularly concerning their knowledge application and subject-specific accuracy?","['Published as a conference paper at ICLR 2021\nMEASURING MASSIVE MULTITASK\nLANGUAGE UNDERSTANDING\nDan Hendrycks\nUC BerkeleyCollin Burns\nColumbia UniversitySteven Basart\nUChicagoAndy Zou\nUC Berkeley\nMantas Mazeika\nUIUCDawn Song\nUC BerkeleyJacob Steinhardt\nUC Berkeley\nABSTRACT\nWe propose a new test to measure a text model’s multitask accuracy. The test\ncovers 57 tasks including elementary mathematics, US history, computer science,\nlaw, and more. To attain high accuracy on this test, models must possess extensive\nworld knowledge and problem solving ability. We ﬁnd that while most recent\nmodels have near random-chance accuracy, the very largest GPT-3 model improves\nover random chance by almost 20 percentage points on average. However, on every\none of the 57 tasks, the best models still need substantial improvements before\nthey can reach expert-level accuracy. Models also have lopsided performance\nand frequently do not know when they are wrong. Worse, they still have near-\nrandom accuracy on some socially important subjects such as morality and law.\nBy comprehensively evaluating the breadth and depth of a model’s academic and\nprofessional understanding, our test can be used to analyze models across many\ntasks and to identify important shortcomings.\n1 I NTRODUCTION\nNatural Language Processing (NLP) models have achieved superhuman performance on a number of\nrecently proposed benchmarks. However, these models are still well below human level performance\nfor language understanding as a whole, suggesting a disconnect between our benchmarks and the\nactual capabilities of these models. The General Language Understanding Evaluation benchmark\n(GLUE) (Wang et al., 2018) was introduced in 2018 to evaluate performance on a wide range of NLP\ntasks, and top models achieved superhuman performance within a year. To address the shortcomings\nof GLUE, researchers designed the SuperGLUE benchmark with more difﬁcult tasks (Wang et al.,\n2019). About ', '57tasks. On the right are UniﬁedQA\ntransfer accuracies for all of the 57tasks. For both models, capabilities are lopsided.\nA.1 A NALYSIS WITH MORE FINE-TUNED MODELS\nWe primarily analyzed models with more than 10billion parameters in the main body of the paper.\nFor this section, we analyze smaller models including RoBERTa-base (125 million parameters) (Liu\n11\x0cPublished as a conference paper at ICLR 2021\net al., 2019), ALBERT-xxlarge (223 million parameters) (Lan et al., 2020), and GPT-2 (1,558 million\nparameters) (Radford et al., 2019). Models are ﬁne-tuned to predict one of four classes using the\nUniﬁedQA MCQ questions and using our dev+val set. We test on our multitask test set.\nWe observe that these smaller models can attain better-than-random accuracy. RoBERTa-base attains\nan overall accuracy of 27.9%, with 27.9%accuracy for the humanities, 28.8%for social sciences,\n27.0%for STEM, and 27.7%for other. ALBERT-xxlarge attains an accuracy of 27.1%, with 27.2%\naccuracy for the humanities, 25.7%for the social sciences, 27.7%for STEM, and 27.9%for other.\nGPT-2 attains an accuracy of 32.4%, with 32.8%accuracy for the humanities, 33.3%for the social\nsciences, 30.2%for STEM, and 33.1%for other.\nCompare this to UniﬁedQA’s smallest variant, which has just 60million parameters and approximately\n29.3%accuracy. It obtains higher accuracy than RoBERTa and ALBERT, even though it has fewer\nparameters. This suggests that its larger pretraining dataset enables higher accuracy. Likewise,\nUniﬁedQA with 3billion parameters attains 43.7%, while the similarly sized GPT-2 model with 1.5\nbillion parameters attains 32.4%accuracy. This again suggests that T5’s larger pretraining dataset\nsize (and therefore UniﬁedQA’s pretraining dataset size) can increase accuracy.\nA.2 E RROR ANALYSIS\nWe qualitatively analyze when GPT-3 makes high conﬁdence mistakes. We ﬁnd that while many of\nthese mistakes were clearly wrong, ', 'examples 550–557, and so on. Across\ndifferent seeds, a different starting example index\nis drawn. The exact training example indices are\nalso recorded in our GitHub repository for repro-\nducibility.\nStatistical Tests We use both ANOV A and its\nnonparametric equivalent, the Kruskal–Wallis test.\nAfter ﬁnding a signiﬁcant difference among multi-\nple categories of templates, we report pairwise sig-\nniﬁcance with the independent two-sample t-test\nand the Wilcoxon rank-sum test. We set α= 0.05\nand apply the Bonferroni correction to account for\nmultiple comparisons. For all results reported in\nthis paper, both t-test and Wilcoxon agree.\n4 Effect of Templates\nOur research question is whether models under-\nstand prompts as meaningful task instructions anal-\nogous to how humans would. For intuition, sup-\npose an experimenter provides a human annotator\nwith an informative instruction of a reasonably easy\ntask. If the annotator understands the instruction,\nwe expect them to perform better than when the\nexperimenter provides intentionally misleading in-\nstructions, makes irrelevant chitchat, or says noth-\ning at all. Accordingly, we write various prompt\ntemplates that correspond to these different scenar-\nios and evaluate models’ performance with these\ntemplates in zero-shot and few-shot settings.\n4.1 Method\nWe write 5 categories of templates (Table 1), with\nat least 5 templates for each category (10 for in-\nstructive):\n•Instructive: how we would describe the NLI\ntask to a human who has never seen this task\nbefore.Category Examples\ninstructive{prem} Are we justiﬁed in saying that “{hypo}”?\nSuppose {prem} Can we infer that “{hypo}”?\nmisleading-\nmoderate{prem} Can that be paraphrased as: “{hypo}”?\n{prem} Are there lots of similar words in “{hypo}”?\nmisleading-\nextreme{prem} is the sentiment positive? {hypo}\n{prem} is this a sports news? {hypo}\nirrelevant{prem} If bonito ﬂakes boil more than a few seconds\nthe stock becomes too strong. ""{hypo}""?\nnull{premise} {hypothesis}\n{hypothesis} {premise}\nTable 1: Example ']","The findings highlighted that while recent models like GPT-3 have made progress, they exhibit lopsided performance across different subjects, lack expert-level accuracy, and struggle with procedural knowledge and tasks requiring calculations.","The key findings regarding the models' performance on the multitask test were that most recent models had near random-chance accuracy, with the very largest GPT-3 model improving over random chance by almost 20 percentage points on average. However, the best models still needed substantial improvements before reaching expert-level accuracy on all 57 tasks. The models also exhibited lopsided performance and frequently did not know when they were wrong. Additionally, models still had near-random accuracy on some socially important subjects such as morality and law. It was noted that to attain high accuracy on the multitask test, models needed to possess extensive world knowledge and problem-solving ability.",1.0,1.0,0.669863224029541
How does DetectGPT perform in comparison to the strongest zero-shot baseline when detecting fake news articles generated by GPT-NeoX?,"['both top- k\nand nucleus sampling make detection easier, on average.\nAveraging across domains, DetectGPT provides the clearest\nsignal for zero-shot detection.\nDetection when the source model is unknown. While\nour experiments have focused on the white-box setting\nfor machine-generated text detection, in this section, we\nGPT-J GPT-Neo GPT-2Scoring ModelGPT-J GPT-Neo GPT-2Base Model0.92\n(0.02)0.83\n(0.04)0.79\n(0.02)\n0.64\n(0.06)0.97\n(0.01)0.83\n(0.02)\n0.60\n(0.09)0.85\n(0.05)0.99\n(0.00)0.85\n0.81\n0.81\n0.72 0.88 0.87\nFigure 6. DetectGPT performs\nbest when scoring samples\nwith the same model that gen-\nerated them (diagonal), but\nthe column means suggest that\nsome models (GPT-Neo, GPT-\n2) may be better ‘scorers’ than\nothers (GPT-J). White values\nshow mean (standard error)\nAUROC over XSum, SQuAD,\nand WritingPrompts; black\nshows row/column mean.explore the effect of using\na different model to score a\ncandidate passage (and per-\nturbed texts) than the model\nthat generated the passage.\nIn other words, we aim\nto classify between human-\ngenerated text and text from\nmodel A, but without ac-\ncess to model Ato com-\npute log probabilities. In-\nstead, we use log probabil-\nities computed by a surro-\ngate model B. We con-\nsider three models, GPT-J,\nGPT-Neo-2.7, and GPT-2,\nevaluating all possible com-\nbinations of source model\nand surrogate model (9 to-\ntal). We average the perfor-\nmance across 200 samples\nfrom XSum, SQuAD, and\n7\x0cZero-Shot Machine-Generated Text Detection using Probability Curvature\n60M 220M 770M 2.7B0.50.60.70.80.91.0Detection AUROC\n5 perturbations\n60M 220M 770M 2.7B\n25 perturbations\nRandom\nGPT2-sm\nGPT2-md\nGPT2-lg\nGPT2-xl\nMask filling model size (# parameters)\nFigure 7. There is a clear association between capacity of mask-\nfilling model and detection performance, across source model\nscales. Random mask filling (uniform sampling from mask filling\nmodel vocabulary) performs poorly, reinforcing the idea that the\nperturbation function should produce samples on the data manifold.\nCurves show AUROC scores on 200 SQuAD contexts.\nWritingPrompts. The results are presented in Figure 6,\nshowing that when the surrogate model is different from the\nsource model, detection performance is reduced, indicating\nthat DetectGPT ', 'source model pθ,\nDetectGPT compares the log probability of the candidate\npassage under pθwith the average log probability of several\nperturbations of the passage under pθ(generated with, e.g.,\nT5; Raffel et al. (2020)). If the perturbed passages tend\nto have lower average log probability than the original by\nsome margin, the candidate passage is likely to have come\nfrompθ. See Figure 1 for an overview of the problem and\nDetectGPT. See Figure 2 for an illustration of the under-\nlying hypothesis and Figure 3 for empirical evaluation of\nthe hypothesis. Our experiments find that DetectGPT is\nmore accurate than existing zero-shot methods for detect-\ning machine-generated text, improving over the strongest\nzero-shot baseline by over 0.1 AUROC for multiple source\nmodels when detecting machine-generated news articles.\nContributions. Our main contributions are: (a) the identi-\nfication and empirical validation of the hypothesis that the\ncurvature of a model’s log probability function tends to be\nsignificantly more negative at model samples than for hu-\nman text, and (b) DetectGPT, a practical algorithm inspired\nby this hypothesis that approximates the trace of the log\nlogp/uni03B8(x)\nxfake/uni223Cp/uni03B8(x)˜xfake1˜xfake2˜xfake3˜xfake4xreal/uni223Cphuman(x)˜xreal1˜xreal2˜xreal3˜xreal4\nFake/real samplePerturbed fake/real sampleLog likelihood…logp/uni03B8(x)Figure 2. We identify and exploit the tendency of machine-\ngenerated passages x∼pθ(·)(left) to lie in negative curvature\nregions of logp(x), where nearby samples have lower model\nlog probability on average. In contrast, human-written text\nx∼preal(·)(right) tends not to occupy regions with clear nega-\ntive log probability curvature; nearby samples may have higher or\nlower log probability.\nprobability function’s Hessian to detect a model’s samples.\n2. Related Work\nIncreasingly large LLMs (Radford et al., 2019; Brown et al.,\n2020; Chowdhery et al., 2022; OpenAI, 2022; Zhang et al.,\n2022) have led to dramatically improved performance on\nmany language-related benchmarks and the ability to gen-\nerate ', 'human-written passages. Each plot\nshows the distribution of the perturbation discrepancy d(x, pθ, q)\nforhuman-written news articles andmachine-generated arti-\nclesof equal word length. Human-written articles are a sample\nof 500 XSum articles; machine-generated text, generated from\nmodels GPT-2 (1.5B), GPT-Neo-2.7B (Black et al., 2021), GPT-J\n(6B; Wang & Komatsuzaki (2021)) and GPT-NeoX (20B; Black\net al. (2022)), is generated by prompting each model with the first\n30 tokens of each XSum article, sampling from the raw conditional\ndistribution. Discrepancies are estimated with 100 T5-3B samples.\nIf we define q(· |x)to be samples from a mask-filling model\nsuch as T5 (Raffel et al., 2020), rather than human rewrites,\nwe can empirically test the Perturbation Discrepancy Gap\nHypothesis in an automated, scalable manner. For real data,\nwe use 500 news articles from the XSum dataset (Narayan\net al., 2018); for model samples, we use the output of four\ndifferent LLMs when prompted with the first 30 tokens of\neach article in XSum. We use T5-3B to apply perturbations,\nmasking out randomly-sampled 2-word spans until 15% of\nthe words in the article are masked. We approximate the\nexpectation in Eq. 1 with 100 samples from T5.1Figure 3\nshows the result of this experiment. We find the distribution\nof perturbation discrepancies is significantly different for\nhuman-written articles and model samples; model samples\ntend to have a larger perturbation discrepancy. Section 5.3\nexplores a relaxation of the assumption that qonly produces\nsamples on the data manifold, finding that a gap, although\nreduced, still exists in this case.\nGiven these results, we can detect if a piece of text was\ngenerated by a model pθby simply thresholding the pertur-\nbation discrepancy. In practice, we find that normalizing the\nperturbation discrepancy by the standard ']",DetectGPT improves detection from an AUROC of 0.81 for the strongest zero-shot baseline to 0.95 for DetectGPT.,DetectGPT performs better than the strongest zero-shot baseline by over 0.1 AUROC when detecting fake news articles generated by GPT-NeoX.,1.0,1.0,0.6697711944580078
How does DetectGPT's performance vary across different datasets and models in zero-shot detection scenarios?,"['both top- k\nand nucleus sampling make detection easier, on average.\nAveraging across domains, DetectGPT provides the clearest\nsignal for zero-shot detection.\nDetection when the source model is unknown. While\nour experiments have focused on the white-box setting\nfor machine-generated text detection, in this section, we\nGPT-J GPT-Neo GPT-2Scoring ModelGPT-J GPT-Neo GPT-2Base Model0.92\n(0.02)0.83\n(0.04)0.79\n(0.02)\n0.64\n(0.06)0.97\n(0.01)0.83\n(0.02)\n0.60\n(0.09)0.85\n(0.05)0.99\n(0.00)0.85\n0.81\n0.81\n0.72 0.88 0.87\nFigure 6. DetectGPT performs\nbest when scoring samples\nwith the same model that gen-\nerated them (diagonal), but\nthe column means suggest that\nsome models (GPT-Neo, GPT-\n2) may be better ‘scorers’ than\nothers (GPT-J). White values\nshow mean (standard error)\nAUROC over XSum, SQuAD,\nand WritingPrompts; black\nshows row/column mean.explore the effect of using\na different model to score a\ncandidate passage (and per-\nturbed texts) than the model\nthat generated the passage.\nIn other words, we aim\nto classify between human-\ngenerated text and text from\nmodel A, but without ac-\ncess to model Ato com-\npute log probabilities. In-\nstead, we use log probabil-\nities computed by a surro-\ngate model B. We con-\nsider three models, GPT-J,\nGPT-Neo-2.7, and GPT-2,\nevaluating all possible com-\nbinations of source model\nand surrogate model (9 to-\ntal). We average the perfor-\nmance across 200 samples\nfrom XSum, SQuAD, and\n7\x0cZero-Shot Machine-Generated Text Detection using Probability Curvature\n60M 220M 770M 2.7B0.50.60.70.80.91.0Detection AUROC\n5 perturbations\n60M 220M 770M 2.7B\n25 perturbations\nRandom\nGPT2-sm\nGPT2-md\nGPT2-lg\nGPT2-xl\nMask filling model size (# parameters)\nFigure 7. There is a clear association between capacity of mask-\nfilling model and detection performance, across source model\nscales. Random mask filling (uniform sampling from mask filling\nmodel vocabulary) performs poorly, reinforcing the idea that the\nperturbation function should produce samples on the data manifold.\nCurves show AUROC scores on 200 SQuAD contexts.\nWritingPrompts. The results are presented in Figure 6,\nshowing that when the surrogate model is different from the\nsource model, detection performance is reduced, indicating\nthat DetectGPT ', 'GPT-3 175B and even PaLM 540B (4 ×larger) in\nzero-shot setting. This is probably owing to GLM-130B’s bidirectional context attention and MIP,\nwhich has been proved to improve zero-shot results in unseen tasks (Wei et al., 2022a; Sanh et al.,\n2022). As the number of shots increases, GLM-130B’s performance keeps going up, maintaining its\noutperformance over GPT-3 (Cf. Appendix C.5 and Table 14 for details on each model and task).\nLimitations and Discussions. In the experiments above, we observe that GLM-130B’s performance\ngrowth (13.31 to 15.12) with the increase of few-shot samples is not as significant as GPT-3’s (4.35\nto 13.18). Here is our intuitive attempt to understand the phenomenon.\nFirst, the bidirectional nature of GLM-130B could lead to strong zero-shot performance (as is indi-\ncated in zero-shot language modeling), thus getting closer to the few-shot “upper-bound” for models\nof similar scale (i.e., 100B-scale) than unidirectional LLMs. Second, it may be also attributed to a\ndeficit of existing MIP paradigms (Wei et al., 2022a; Sanh et al., 2022), which only involve zero-shot\nprediction in the training and will be likely to bias GLM-130B for stronger zero-shot learning but\nrelatively weaker in-context few-shot performance. To correct the bias, a potential solution we came\nup with would be to employ MIP with varied shots of in-context samples rather than only zero-shot\nsamples.\nFinally, despite almost the same GPT architecture as GPT-3, PaLM 540B’s relative growth with few-\nshot in-context learning is substantially more significant than GPT-3’s. We conjecture this further\nacceleration in performance growth is a source of PaLM’s high-quality and diverse private-collected\ntraining corpora. By combining our experiences with (Hoffmann et al., 2022)’s insights, we came ', 'al.,\n2023) may further improve the effectiveness of methods\nsuch as DetectGPT, even as LLMs continue to improve.\nLimitations. One limitation of probability-based methods\nfor zero-shot machine-generated text detection (like Detect-\nGPT) is the white-box assumption that we can evaluate log\nprobabilities of the model(s) in question. For models be-\nhind APIs that do provide probabilities (such as GPT-3),\nevaluating probabilities nonetheless costs money. Another\nassumption of DetectGPT is access to a reasonable pertur-\nbation function. While in this work, we use off-the-shelf\nmask-filling models such as T5 and mT5 (for non-English\nlanguages), some domains may see reduced performance\nif existing mask-filling models do not well represent the\nspace of meaningful rephrases, reducing the quality of the\ncurvature estimate. While DetectGPT provides the best\navailable detection performance for PubMedQA, its drop\nin performance compared to other datasets may be a result\nAverage length0.9850.9900.995AUROC\ngpt-2\nAverage length0.960.970.980.99AUROC\nopt-2.7\nXSum\nSQuAD\nWritingPrompts\n130 140 150 160 170\nAverage length0.8750.9000.9250.9500.975AUROC\nEleutherAI/gpt-j-6b\n130 140 150 160 170\nAverage length0.70.80.9AUROC\nEleutherAI/gpt-neox-20bFigure 10. DetectGPT AUROC vs passage length. The relation-\nship between detection performance and passage length generally\ndepends on the dataset and model (or tokenizer). Decreases in\ndetection quality with increasing length may be due to T5 failing\nto track many (20+) masks to fill at once; this problem may be\nmitigated by applying mask-fills in a sequence of smaller batches.\nof lower quality perturbations. Finally, DetectGPT is more\ncompute-intensive than other methods for detection, as it\nrequires sampling and scoring the set of perturbations for\neach candidate passage, rather than just the candidate pas-\nsage; a better tuned perturbation function or more efficient\ncurvature approximation may help mitigate these costs.\nFuture Work. While the methods in this work make no\nassumptions about the models generating the samples, fu-\nture work may explore how watermarking ']","DetectGPT shows discriminative improvement over existing methods, notably on the XSum dataset for fake news detection, with significant AUROC improvements.","DetectGPT's performance varies across different datasets and models in zero-shot detection scenarios. The results show that DetectGPT provides the clearest signal for zero-shot detection, with the best performance when scoring samples with the same model that generated them. However, when the surrogate model is different from the source model, detection performance is reduced. Additionally, the association between the capacity of the mask-filling model and detection performance is clear, with random mask filling performing poorly. The performance growth of GLM-130B with the increase of few-shot samples is not as significant as GPT-3's. PaLM 540B shows substantial growth with few-shot in-context learning, indicating further acceleration in performance. Overall, DetectGPT's performance varies based on the dataset, model, and perturbation function used in zero-shot detection scenarios.",1.0,0.8333333333333334,0.38111940026283264
How does DistilBERT's performance on the GLUE benchmark compare to BERT and ELMo?,"['by two BiLSTMs.4\nThe results on each of the 9 tasks are showed on Table 1 along with the macro-score (average of\nindividual scores). Among the 9 tasks, DistilBERT is always on par or improving over the ELMo\nbaseline (up to 19 points of accuracy on STS-B). DistilBERT also compares surprisingly well to\nBERT, retaining 97% of the performance with 40% fewer parameters.\n4.1 Downstream task benchmark\nDownstream tasks We further study the performances of DistilBERT on several downstream tasks\nunder efﬁcient inference constraints: a classiﬁcation task (IMDb sentiment classiﬁcation - Maas et al.\n[2011]) and a question answering task (SQuAD v1.1 - Rajpurkar et al. [2016]).\nAs shown in Table 2, DistilBERT is only 0.6% point behind BERT in test accuracy on the IMDb\nbenchmark while being 40% smaller. On SQuAD, DistilBERT is within 3.9 points of the full BERT.\nWe also studied whether we could add another step of distillation during the adaptation phase by\nﬁne-tuning DistilBERT on SQuAD using a BERT model previously ﬁne-tuned on SQuAD as a\n4We use jiant [Wang et al., 2019] to compute the baseline.\n3\x0cTable 4: Ablation study. Variations are relative to the model trained with triple loss and teacher\nweights initialization.\nAblation Variation on GLUE macro-score\n∅-Lcos-Lmlm -2.96\nLce-∅-Lmlm -1.46\nLce-Lcos-∅ -0.31\nTriple loss + random weights initialization -3.69\nteacher for an additional term in the loss (knowledge distillation). In this setting, there are thus two\nsuccessive steps of distillation, one during the pre-training phase and one during the adaptation phase.\nIn this case, we were able to reach interesting performances given the size of the model: 79.8 F1 and\n70.4 EM, i.e. within 3 points of the full model.\nSize and ', '56.0 75.1\nBERT BASE 84.6/83.4 71.2 90.5 93.5 52.1 85.8 88.9 66.4 79.6\nBERT LARGE 86.7/85.9 72.1 92.7 94.9 60.5 86.5 89.3 70.1 82.1\nTable 1: GLUE Test results, scored by the evaluation server ( https://gluebenchmark.com/leaderboard ).\nThe number below each task denotes the number of training examples. The “Average” column is slightly different\nthan the ofﬁcial GLUE score, since we exclude the problematic WNLI set.8BERT and OpenAI GPT are single-\nmodel, single task. F1 scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, and\naccuracy scores are reported for the other tasks. We exclude entries that use BERT as one of their components.\nWe use a batch size of 32 and ﬁne-tune for 3\nepochs over the data for all GLUE tasks. For each\ntask, we selected the best ﬁne-tuning learning rate\n(among 5e-5, 4e-5, 3e-5, and 2e-5) on the Dev set.\nAdditionally, for BERT LARGE we found that ﬁne-\ntuning was sometimes unstable on small datasets,\nso we ran several random restarts and selected the\nbest model on the Dev set. With random restarts,\nwe use the same pre-trained checkpoint but per-\nform different ﬁne-tuning data shufﬂing and clas-\nsiﬁer layer initialization.9\nResults are presented in Table 1. Both\nBERT BASE and BERT LARGE outperform all sys-\ntems on all tasks by a substantial margin, obtaining\n4.5% and 7.0% respective average accuracy im-\nprovement over the prior state of the art. Note that\nBERT BASE and OpenAI GPT are nearly identical\nin terms of model architecture apart from the at-\ntention masking. For the largest and most widely\nreported GLUE task, MNLI, BERT obtains a 4.6%\nabsolute accuracy improvement. On the ofﬁcial\nGLUE leaderboard10, BERT LARGE obtains a score\nof ', 'recent work in this area.\nSince its release, GLUE has been used as a testbed and showcase by the developers of several\ninﬂuential models, including GPT (Radford et al., 2018) and BERT (Devlin et al., 2019). As shown\nin Figure 1, progress on GLUE since its release has been striking. On GLUE, GPT and BERT\nachieved scores of 72.8 and 80.2 respectively, relative to 66.5 for an ELMo-based model (Peters\net al., 2018) and 63.7 for the strongest baseline with no multitask learning or pretraining above the\nword level. Recent models (Liu et al., 2019d; Yang et al., 2019) have clearly surpassed estimates of\nnon-expert human performance on GLUE (Nangia and Bowman, 2019). The success of these models\non GLUE has been driven by ever-increasing model capacity, compute power, and data quantity, as\nwell as innovations in model expressivity (from recurrent to bidirectional recurrent to multi-headed\ntransformer encoders) and degree of contextualization (from learning representation of words in\nisolation to using uni-directional contexts and ultimately to leveraging bidirectional contexts).\nIn parallel to work scaling up pretrained models, several studies have focused on complementary\nmethods for augmenting performance of pretrained models. Phang et al. (2018) show that BERT can\nbe improved using two-stage pretraining, i.e., ﬁne-tuning the pretrained model on an intermediate\ndata-rich supervised task before ﬁne-tuning it again on a data-poor target task. Liu et al. (2019d,c) and\nBach et al. (2018) get further improvements respectively via multi-task ﬁnetuning and using massive\namounts of weak supervision. Clark et al. (2019b) demonstrate that knowledge distillation (Hinton\net al., 2015; Furlanello et al., 2018) can lead to student networks that outperform their teachers.\nOverall, the quantity and ']","DistilBERT achieves performance close to BERT, outperforming ELMo across GLUE benchmark tasks, demonstrating significant efficiency and effectiveness.","DistilBERT's performance on the GLUE benchmark shows that it is always on par or improving over the ELMo baseline and compares surprisingly well to BERT, retaining 97% of the performance with 40% fewer parameters.",1.0,1.0,0.9170396327972412
How does DistilBERT's performance on downstream tasks like IMDb sentiment classification and SQuAD v1.1 compare to BERT?,"['by two BiLSTMs.4\nThe results on each of the 9 tasks are showed on Table 1 along with the macro-score (average of\nindividual scores). Among the 9 tasks, DistilBERT is always on par or improving over the ELMo\nbaseline (up to 19 points of accuracy on STS-B). DistilBERT also compares surprisingly well to\nBERT, retaining 97% of the performance with 40% fewer parameters.\n4.1 Downstream task benchmark\nDownstream tasks We further study the performances of DistilBERT on several downstream tasks\nunder efﬁcient inference constraints: a classiﬁcation task (IMDb sentiment classiﬁcation - Maas et al.\n[2011]) and a question answering task (SQuAD v1.1 - Rajpurkar et al. [2016]).\nAs shown in Table 2, DistilBERT is only 0.6% point behind BERT in test accuracy on the IMDb\nbenchmark while being 40% smaller. On SQuAD, DistilBERT is within 3.9 points of the full BERT.\nWe also studied whether we could add another step of distillation during the adaptation phase by\nﬁne-tuning DistilBERT on SQuAD using a BERT model previously ﬁne-tuned on SQuAD as a\n4We use jiant [Wang et al., 2019] to compute the baseline.\n3\x0cTable 4: Ablation study. Variations are relative to the model trained with triple loss and teacher\nweights initialization.\nAblation Variation on GLUE macro-score\n∅-Lcos-Lmlm -2.96\nLce-∅-Lmlm -1.46\nLce-Lcos-∅ -0.31\nTriple loss + random weights initialization -3.69\nteacher for an additional term in the loss (knowledge distillation). In this setting, there are thus two\nsuccessive steps of distillation, one during the pre-training phase and one during the adaptation phase.\nIn this case, we were able to reach interesting performances given the size of the model: 79.8 F1 and\n70.4 EM, i.e. within 3 points of the full model.\nSize and ', 'yields to comparable\nperformance on downstream tasks. Com-\nparison on downstream tasks: IMDb (test ac-\ncuracy) and SQuAD 1.1 (EM/F1 on dev set).\nD: with a second step of distillation during\nﬁne-tuning.\nModel IMDb SQuAD\n(acc.) (EM/F1)\nBERT-base 93.46 81.2/88.5\nDistilBERT 92.82 77.7/85.8\nDistilBERT (D) - 79.1/86.9Table 3: DistilBERT is signiﬁcantly smaller\nwhile being constantly faster. Inference\ntime of a full pass of GLUE task STS-B (sen-\ntiment analysis) on CPU with a batch size of\n1.\nModel # param. Inf. time\n(Millions) (seconds)\nELMo 180 895\nBERT-base 110 668\nDistilBERT 66 410\nDistillation We applied best practices for training BERT model recently proposed in Liu et al. [2019].\nAs such, DistilBERT is distilled on very large batches leveraging gradient accumulation (up to 4K\nexamples per batch) using dynamic masking and without the next sentence prediction objective.\nData and compute power We train DistilBERT on the same corpus as the original BERT model:\na concatenation of English Wikipedia and Toronto Book Corpus [Zhu et al., 2015]. DistilBERT\nwas trained on 8 16GB V100 GPUs for approximately 90 hours. For the sake of comparison, the\nRoBERTa model [Liu et al., 2019] required 1 day of training on 1024 32GB V100.\n4 Experiments\nGeneral Language Understanding We assess the language understanding and generalization ca-\npabilities of DistilBERT on the General Language Understanding Evaluation (GLUE) benchmark\n[Wang et al., 2018], a collection of 9 datasets for evaluating natural language understanding systems.\nWe report scores on the development sets for each task by ﬁne-tuning DistilBERT without the use\nof ensembling or multi-tasking scheme for ﬁne-tuning (which are mostly orthogonal to the present\nwork). We compare the results to the baseline provided by the authors of GLUE: an ELMo (Peters\net al. [2018]) encoder followed ', 'versa.\nThe last example comes from WikiHow, which\nappears to be incredibly challenging for BERT.\nBERT picks answer d, which has more words that\nmatch the context of technology (planes, tra ﬃc,\nlaptop), but is incoherent.12\n12Among other issues, why would someone suddenly be\naware that they are ‘ﬂying at high speed on a plane...?’\n7\x0cStylistic\nEnsembleELMo+\nLSTMGPT BERTBase BERTLarge30405060708090100 Accuracy (%)\n48.2%53.7%64.8%71.4%83.0%\n28.0% 28.2% 28.4%32.0%41.1%78.5%77.4%\n71.3%\n63.0%\n41.1%Accuracy of the filtering model before AF\nAccuracy of the filtering model after AF\nBERT-Large accuracy after AFFigure 11: Performance on the WikiHow subset of al-\nternative variations of HellaSwag , where di ﬀerent Ad-\nversarial Filters are used (but without human valida-\ntion). We consider the shallow stylistic adversaries\nused by Zellers et al. (2018) (Stylistic Ensemble),\nas well as an LSTM with ELMo embeddings, GPT,\nBERT-Base, and BERT-Large. For each adversarial ﬁl-\ntering model, we record the accuracy of that model be-\nfore and after AF is used. We also evaluate each al-\nternative dataset using BERT-Large. The results sug-\ngest that using a a stronger model at test time (over the\nmodel used for AF) improves performance, but is not\nenough to solve the task.\n6 Discussion\nOur results suggest that HellaSwag is a challenging\ntestbed for state-of-the-art NLI models, even those\nbuilt on extensive pretraining. The question still\nremains, though, of where will the ﬁeld go next?\n6.1 How easy might HellaSwag be for future\ndiscriminators?\nIn this paper, we showed the existence of a\nGoldilocks zone of text complexity – in which\ngenerations are nonsensical, but existing state-\nof-the-art NLP models cannot tell the di ﬀerence.\nHow hard will the dataset be for future, even more\npowerful, models?\nAnswering this question is challenging because\nthese models don’t exist (or are unavailable) at\nthe time of writing . However, ']","DistilBERT closely approaches BERT's performance on IMDb sentiment classification and SQuAD v1.1, with minimal performance loss despite its smaller size.",DistilBERT's performance on downstream tasks like IMDb sentiment classification and SQuAD v1.1 is slightly behind BERT in test accuracy on IMDb and within a few points of BERT on SQuAD.,1.0,1.0,0.9037711024284363
"What modifications to the BERT pretraining process are introduced in RoBERTa, and how do they collectively enhance model performance?","['RoBERTa is trained with dynamic mask-\ning (Section 4.1),FULL -SENTENCES without NSP\nloss (Section 4.2), large mini-batches (Section 4.3)\nand a larger byte-level BPE (Section 4.4).\nAdditionally, we investigate two other impor-\ntant factors that have been under-emphasized in\nprevious work: (1) the data used for pretraining,\nand (2) the number of training passes through the\ndata. For example, the recently proposed XLNet\narchitecture ( Yang et al. ,2019 ) is pretrained us-\ning nearly 10 times more data than the original\nBERT ( Devlin et al. ,2019 ). It is also trained with\na batch size eight times larger for half as many op-\ntimization steps, thus seeing four times as many\nsequences in pretraining compared to BERT.\nTo help disentangle the importance of these fac-\ntors from other modeling choices (e.g., the pre-\ntraining objective), we begin by training RoBERTa\nfollowing the BERT LARGE architecture ( L= 24 ,\nH= 1024 ,A= 16 , 355M parameters). We\npretrain for 100K steps over a comparable B OOK -\nCORPUS plus W IKIPEDIA dataset as was used in\x0cModel data bsz stepsSQuADMNLI-m SST-2(v1.1/2.0)\nRoBERTa\nwith B OOKS + W IKI 16GB 8K 100K 93.6/87.3 89.0 95.3\n+ additional data ( §3.2) 160GB 8K 100K 94.0/87.7 89.3 95.6\n+ pretrain longer 160GB 8K 300K 94.4/88.7 90.0 96.1\n+ pretrain even longer 160GB 8K 500K 94.6/89.4 90.2 96.4\nBERT LARGE\nwith B OOKS + W IKI 13GB 256 1M 90.9/81.8 86.6 93.7\nXLNet LARGE\nwith B OOKS + W IKI 13GB 256 1M 94.0/87.8 88.4 94.4\n+ additional data 126GB 2K 500K 94.5/88.8 89.8 95.6\nTable 4: Development set results for RoBERTa as we pretrain o ver more data (16GB →160GB of text) and pretrain\nfor longer (100K →300K→500K steps). Each row ', 'accumulates improvements from the row s above. RoBERTa\nmatches the architecture and training objective of BERT LARGE . Results for BERT LARGE and XLNet LARGE are from\nDevlin et al. (2019 ) and Yang et al. (2019 ), respectively. Complete results on all GLUE tasks can be fo und in the\nAppendix.\nDevlin et al. (2019 ). We pretrain our model using\n1024 V100 GPUs for approximately one day.\nResults We present our results in Table 4. When\ncontrolling for training data, we observe that\nRoBERTa provides a large improvement over the\noriginally reported BERT LARGE results, reafﬁrming\nthe importance of the design choices we explored\nin Section 4.\nNext, we combine this data with the three ad-\nditional datasets described in Section 3.2. We\ntrain RoBERTa over the combined data with the\nsame number of training steps as before (100K).\nIn total, we pretrain over 160GB of text. We ob-\nserve further improvements in performance across\nall downstream tasks, validating the importance of\ndata size and diversity in pretraining.9\nFinally, we pretrain RoBERTa for signiﬁcantly\nlonger, increasing the number of pretraining steps\nfrom 100K to 300K, and then further to 500K. We\nagain observe signiﬁcant gains in downstream task\nperformance, and the 300K and 500K step mod-\nels outperform XLNet LARGE across most tasks. We\nnote that even our longest-trained model does not\nappear to overﬁt our data and would likely beneﬁt\nfrom additional training.\nIn the rest of the paper, we evaluate our best\nRoBERTa model on the three different bench-\nmarks: GLUE, SQuaD and RACE. Speciﬁcally\n9Our experiments conﬂate increases in data size and di-\nversity. We leave a more careful analysis of these two dimen-\nsions to future work.we consider RoBERTa trained for 500K steps over\nall ', 'and\nYejin Choi. 2019. Defending against neural fake\nnews. arXiv preprint arXiv:1905.12616 .\nYukun Zhu, Ryan Kiros, Richard Zemel, Ruslan\nSalakhutdinov, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Aligning books and movies:\nTowards story-like visual explanations by watch-\ning movies and reading books. In arXiv preprint\narXiv:1506.06724 .\nAppendix for “RoBERTa: A Robustly\nOptimized BERT Pretraining Approach”\nA Full results on GLUE\nIn Table 8we present the full set of development\nset results for RoBERTa. We present results for\naLARGE conﬁguration that follows BERT LARGE ,\nas well as a BASE conﬁguration that follows\nBERT BASE.B Pretraining Hyperparameters\nTable 9describes the hyperparameters for pre-\ntraining of RoBERTa LARGE and RoBERTa BASE\nC Finetuning Hyperparameters\nFinetuning hyperparameters for RACE, SQuAD\nand GLUE are given in Table 10. We select the\nbest hyperparameter values based on the median\nof 5 random seeds for each task.\x0cMNLI QNLI QQP RTE SST MRPC CoLA STS\nRoBERTa BASE\n+ all data + 500k steps 87.6 92.8 91.9 78.7 94.8 90.2 63.6 91.2\nRoBERTa LARGE\nwith B OOKS + W IKI 89.0 93.9 91.9 84.5 95.3 90.2 66.3 91.6\n+ additional data ( §3.2) 89.3 94.0 92.0 82.7 95.6 91.4 66.1 92.2\n+ pretrain longer 300k 90.0 94.5 92.2 83.3 96.1 91.1 67.4 92.3\n+ pretrain longer 500k 90.2 94.7 92.2 86.6 96.4 90.9 68.0 92.4\nTable 8: Development set results on GLUE tasks for various co nﬁgurations of RoBERTa.\nHyperparam RoBERTa LARGE RoBERTa BASE\nNumber of Layers 24 12\nHidden size 1024 768\nFFN inner hidden size 4096 3072\nAttention heads 16 12\nAttention head size 64 64\nDropout 0.1 0.1\nAttention Dropout 0.1 0.1\nWarmup Steps 30k 24k\nPeak Learning Rate 4e-4 6e-4\nBatch Size 8k 8k\nWeight Decay 0.01 0.01\nMax Steps 500k 500k\nLearning Rate Decay Linear Linear\nAdamǫ 1e-6 1e-6\nAdamβ1 0.9 0.9\nAdamβ2 0.98 ']","RoBERTa introduces several key modifications, including training with larger mini-batches, eliminating the next sentence prediction (NSP) loss, training on longer sequences, dynamically changing the masking pattern, and pretraining over more data. These improvements collectively enable RoBERTa to match or exceed the performance of all post-BERT models, achieving state-of-the-art results on benchmarks like GLUE, RACE, and SQuAD.","RoBERTa introduces modifications such as training with dynamic masking, full-sentences without NSP loss, large mini-batches, and a larger byte-level BPE. These modifications collectively enhance model performance by providing a large improvement over the originally reported BERT LARGE results, reaffirming the importance of the design choices explored. Additionally, increasing the training data size and diversity, as well as pretraining for longer durations, further improve downstream task performance. These modifications result in significant gains in performance, with the RoBERTa model outperforming XLNet LARGE across most tasks.",1.0,1.0,0.8596557378768921
"What role does the novel dataset CC-NEWS play in RoBERTa's pretraining, and how does it compare to other datasets used?","['and\nYejin Choi. 2019. Defending against neural fake\nnews. arXiv preprint arXiv:1905.12616 .\nYukun Zhu, Ryan Kiros, Richard Zemel, Ruslan\nSalakhutdinov, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Aligning books and movies:\nTowards story-like visual explanations by watch-\ning movies and reading books. In arXiv preprint\narXiv:1506.06724 .\nAppendix for “RoBERTa: A Robustly\nOptimized BERT Pretraining Approach”\nA Full results on GLUE\nIn Table 8we present the full set of development\nset results for RoBERTa. We present results for\naLARGE conﬁguration that follows BERT LARGE ,\nas well as a BASE conﬁguration that follows\nBERT BASE.B Pretraining Hyperparameters\nTable 9describes the hyperparameters for pre-\ntraining of RoBERTa LARGE and RoBERTa BASE\nC Finetuning Hyperparameters\nFinetuning hyperparameters for RACE, SQuAD\nand GLUE are given in Table 10. We select the\nbest hyperparameter values based on the median\nof 5 random seeds for each task.\x0cMNLI QNLI QQP RTE SST MRPC CoLA STS\nRoBERTa BASE\n+ all data + 500k steps 87.6 92.8 91.9 78.7 94.8 90.2 63.6 91.2\nRoBERTa LARGE\nwith B OOKS + W IKI 89.0 93.9 91.9 84.5 95.3 90.2 66.3 91.6\n+ additional data ( §3.2) 89.3 94.0 92.0 82.7 95.6 91.4 66.1 92.2\n+ pretrain longer 300k 90.0 94.5 92.2 83.3 96.1 91.1 67.4 92.3\n+ pretrain longer 500k 90.2 94.7 92.2 86.6 96.4 90.9 68.0 92.4\nTable 8: Development set results on GLUE tasks for various co nﬁgurations of RoBERTa.\nHyperparam RoBERTa LARGE RoBERTa BASE\nNumber of Layers 24 12\nHidden size 1024 768\nFFN inner hidden size 4096 3072\nAttention heads 16 12\nAttention head size 64 64\nDropout 0.1 0.1\nAttention Dropout 0.1 0.1\nWarmup Steps 30k 24k\nPeak Learning Rate 4e-4 6e-4\nBatch Size 8k 8k\nWeight Decay 0.01 0.01\nMax Steps 500k 500k\nLearning Rate Decay Linear Linear\nAdamǫ 1e-6 1e-6\nAdamβ1 0.9 0.9\nAdamβ2 0.98 ', 'RoBERTa is trained with dynamic mask-\ning (Section 4.1),FULL -SENTENCES without NSP\nloss (Section 4.2), large mini-batches (Section 4.3)\nand a larger byte-level BPE (Section 4.4).\nAdditionally, we investigate two other impor-\ntant factors that have been under-emphasized in\nprevious work: (1) the data used for pretraining,\nand (2) the number of training passes through the\ndata. For example, the recently proposed XLNet\narchitecture ( Yang et al. ,2019 ) is pretrained us-\ning nearly 10 times more data than the original\nBERT ( Devlin et al. ,2019 ). It is also trained with\na batch size eight times larger for half as many op-\ntimization steps, thus seeing four times as many\nsequences in pretraining compared to BERT.\nTo help disentangle the importance of these fac-\ntors from other modeling choices (e.g., the pre-\ntraining objective), we begin by training RoBERTa\nfollowing the BERT LARGE architecture ( L= 24 ,\nH= 1024 ,A= 16 , 355M parameters). We\npretrain for 100K steps over a comparable B OOK -\nCORPUS plus W IKIPEDIA dataset as was used in\x0cModel data bsz stepsSQuADMNLI-m SST-2(v1.1/2.0)\nRoBERTa\nwith B OOKS + W IKI 16GB 8K 100K 93.6/87.3 89.0 95.3\n+ additional data ( §3.2) 160GB 8K 100K 94.0/87.7 89.3 95.6\n+ pretrain longer 160GB 8K 300K 94.4/88.7 90.0 96.1\n+ pretrain even longer 160GB 8K 500K 94.6/89.4 90.2 96.4\nBERT LARGE\nwith B OOKS + W IKI 13GB 256 1M 90.9/81.8 86.6 93.7\nXLNet LARGE\nwith B OOKS + W IKI 13GB 256 1M 94.0/87.8 88.4 94.4\n+ additional data 126GB 2K 500K 94.5/88.8 89.8 95.6\nTable 4: Development set results for RoBERTa as we pretrain o ver more data (16GB →160GB of text) and pretrain\nfor longer (100K →300K→500K steps). Each row ', 'This is the original data used to\ntrain BERT. (16GB).\n•CC-N EWS, which we collected from the En-\nglish portion of the CommonCrawl News\ndataset ( Nagel ,2016 ). The data contains 63\nmillion English news articles crawled between\nSeptember 2016 and February 2019. (76GB af-\nter ﬁltering).4\n•OPENWEBTEXT (Gokaslan and Cohen ,2019 ),\nan open-source recreation of the WebText cor-\n4We usenews-please (Hamborg et al. ,2017 ) to col-\nlect and extract CC-N EWS. CC-N EWS is similar to the R E-\nALNEWS dataset described in Zellers et al. (2019 ).pus described in Radford et al. (2019 ). The text\nis web content extracted from URLs shared on\nReddit with at least three upvotes. (38GB).5\n•STORIES , a dataset introduced in Trinh and Le\n(2018 ) containing a subset of CommonCrawl\ndata ﬁltered to match the story-like style of\nWinograd schemas. (31GB).\n3.3 Evaluation\nFollowing previous work, we evaluate our pre-\ntrained models on downstream tasks using the fol-\nlowing three benchmarks.\nGLUE The General Language Understand-\ning Evaluation (GLUE) benchmark ( Wang et al. ,\n2019b ) is a collection of 9 datasets for evaluating\nnatural language understanding systems.6Tasks\nare framed as either single-sentence classiﬁcation\nor sentence-pair classiﬁcation tasks. The GLUE\norganizers provide training and development data\nsplits as well as a submission server and leader-\nboard that allows participants to evaluate and com-\npare their systems on private held-out test data.\nFor the replication study in Section 4, we report\nresults on the development sets after ﬁnetuning\nthe pretrained models on the corresponding single-\ntask training data (i.e., without multi-task training\nor ensembling). Our ﬁnetuning procedure follows\nthe original BERT paper ( Devlin et al. ,2019 ).\nIn Section 5we additionally report test set re-\nsults obtained from the public leaderboard. These\nresults depend ']","CC-NEWS, a large dataset collected from English news articles, provides a significant source of diverse and recent textual content for RoBERTa's pretraining, complementing other datasets and ensuring a broad coverage of language use and topics. This dataset helps control for training set size effects and contributes to the robustness and generalization capability of the model.","The CC-NEWS dataset is used in RoBERTa's pretraining to provide additional data for training. It contains 63 million English news articles crawled between September 2016 and February 2019, totaling 76GB after filtering. This dataset is essential in increasing the amount of text data used for pretraining RoBERTa, alongside other datasets like OPENWEBTEXT and STORIES. Compared to the original 16GB data used to train BERT, the CC-NEWS dataset provides a substantial increase in text data for pretraining RoBERTa.",0.6666666666666666,1.0,0.8585084676742554
Describe the process and purpose of the 'Next Sentence Prediction' task in BERT's pre-training.,"['both left and right context in all layers. In addition to the architecture differences, BERT and\nOpenAI GPT are ﬁne-tuning approaches, while ELMo is a feature-based approach.\nto converge. In Section C.1 we demonstrate that\nMLM does converge marginally slower than a left-\nto-right model (which predicts every token), but\nthe empirical improvements of the MLM model\nfar outweigh the increased training cost.\nNext Sentence Prediction The next sentence\nprediction task can be illustrated in the following\nexamples.\nInput =[CLS] the man went to [MASK] store [SEP]\nhe bought a gallon [MASK] milk [SEP]\nLabel =IsNext\nInput =[CLS] the man [MASK] to the store [SEP]\npenguin [MASK] are flight ##less birds [SEP]\nLabel =NotNext\nA.2 Pre-training Procedure\nTo generate each training input sequence, we sam-\nple two spans of text from the corpus, which we\nrefer to as “sentences” even though they are typ-\nically much longer than single sentences (but can\nbe shorter also). The ﬁrst sentence receives the A\nembedding and the second receives the Bembed-\nding. 50% of the time Bis the actual next sentence\nthat follows Aand 50% of the time it is a random\nsentence, which is done for the “next sentence pre-\ndiction” task. They are sampled such that the com-\nbined length is≤512 tokens. The LM masking is\napplied after WordPiece tokenization with a uni-\nform masking rate of 15%, and no special consid-\neration given to partial word pieces.\nWe train with batch size of 256 sequences (256\nsequences * 512 tokens = 128,000 tokens/batch)\nfor 1,000,000 steps, which is approximately 40epochs over the 3.3 billion word corpus. We\nuse Adam with learning rate of 1e-4, β1= 0.9,\nβ2= 0.999, L2 weight decay of 0.01, learning\nrate warmup over the ﬁrst 10,000 steps, and ', 'token is chosen, we replace\nthei-th token with (1) the [MASK] token 80% of\nthe time (2) a random token 10% of the time (3)\nthe unchanged i-th token 10% of the time. Then,\nTiwill be used to predict the original token with\ncross entropy loss. We compare variations of this\nprocedure in Appendix C.2.\nTask #2: Next Sentence Prediction (NSP)\nMany important downstream tasks such as Ques-\ntion Answering (QA) and Natural Language Infer-\nence (NLI) are based on understanding the rela-\ntionship between two sentences, which is not di-\nrectly captured by language modeling. In order\nto train a model that understands sentence rela-\ntionships, we pre-train for a binarized next sen-\ntence prediction task that can be trivially gener-\nated from any monolingual corpus. Speciﬁcally,\nwhen choosing the sentences AandBfor each pre-\ntraining example, 50% of the time Bis the actual\nnext sentence that follows A(labeled as IsNext ),\nand 50% of the time it is a random sentence from\nthe corpus (labeled as NotNext ). As we show\nin Figure 1, Cis used for next sentence predic-\ntion (NSP).5Despite its simplicity, we demon-\nstrate in Section 5.1 that pre-training towards this\ntask is very beneﬁcial to both QA and NLI.6\n5The ﬁnal model achieves 97%-98% accuracy on NSP.\n6The vector Cis not a meaningful sentence representation\nwithout ﬁne-tuning, since it was trained with NSP.\x0c[CLS] helikesplay## ing[SEP] mydogiscute[SEP]Input E[CLS] Ehe Elikes Eplay E## ing E[SEP] Emy Edog Eis Ecute E[SEP] Token Embeddings EA EB EB EB EB EB EA EA EA EA EASegment Embeddings E0 E6 E7 E8 E9 E10 E1 E2 E3 E4 E5Position Embeddings Figure 2: BERT input representation. The input embeddings are the sum of the token embeddings, ', 'improves performance on down-\nstream tasks; (3) Our training improvements show\nthat masked language model pretraining, under\nthe right design choices, is competitive with all\nother recently published methods. We release our\nmodel, pretraining and ﬁne-tuning code imple-\nmented in PyTorch ( Paszke et al. ,2017 ).\n2 Background\nIn this section, we give a brief overview of the\nBERT ( Devlin et al. ,2019 ) pretraining approach\nand some of the training choices that we will ex-\namine experimentally in the following section.\n2.1 Setup\nBERT takes as input a concatenation of two\nsegments (sequences of tokens), x1,...,x N\nandy1,...,yM. Segments usually consist of\nmore than one natural sentence. The two seg-\nments are presented as a single input sequence\nto BERT with special tokens delimiting them:\n[CLS],x1,...,x N,[SEP],y1,...,yM,[EOS].\nMandNare constrained such that M+N < T ,\nwhereTis a parameter that controls the maximum\nsequence length during training.\nThe model is ﬁrst pretrained on a large unla-\nbeled text corpus and subsequently ﬁnetuned us-\ning end-task labeled data.\n2.2 Architecture\nBERT uses the now ubiquitous transformer archi-\ntecture ( Vaswani et al. ,2017 ), which we will not\nreview in detail. We use a transformer architecture\nwithLlayers. Each block uses Aself-attention\nheads and hidden dimension H.\n2.3 Training Objectives\nDuring pretraining, BERT uses two objectives:\nmasked language modeling and next sentence pre-\ndiction.\nMasked Language Model (MLM) A random\nsample of the tokens in the input sequence is\nselected and replaced with the special token\n[MASK]. The MLM objective is a cross-entropy\nloss on predicting the masked tokens. BERT uni-\nformly selects 15% of the input tokens for possi-\nble replacement. Of the selected tokens, 80% are\nreplaced with [MASK], 10% are left unchanged,and 10% are replaced by a randomly selected vo-\ncabulary token.\nIn the original implementation, random mask-\ning ']","NSP involves predicting whether a sentence B is the actual next sentence that follows sentence A, facilitating understanding of sentence relationships.",The 'Next Sentence Prediction' task in BERT's pre-training involves predicting whether a given sentence is the actual next sentence that follows another sentence or a random sentence from the corpus. This task helps the model understand the relationship between two sentences and is beneficial for downstream tasks such as Question Answering and Natural Language Inference. It is a binarized task where 50% of the time the second sentence is the actual next sentence (labeled as IsNext) and 50% of the time it is a random sentence (labeled as NotNext). This task is generated from any monolingual corpus and involves pre-training the model towards predicting the next sentence relationship.,1.0,1.0,0.5569303035736084
"What performance improvements does LLaMA-13B show over GPT-3, and how does LLaMA-65B stand in comparison to Chinchilla-70B and PaLM-540B?","['et al., 2022) to leverage its bidirectional at-\ntention advantage and autoregressive blank infilling objective. Table 1 summarizes the comparison\nbetween GLM-130B, GPT-3 and another two open-source efforts—OPT-175B and BLOOM-176B,\nas well as PaLM 540B (Chowdhery et al., 2022)—a 4 ×larger model—as a reference.\nAltogether, the conceptual uniqueness and engineering efforts enable GLM-130B to exhibit perfor-\nmance that surpasses the level of GPT-3 on a wide range of benchmarks (in total 112 tasks) and also\noutperforms PaLM 540B in many cases, while outperformance over GPT-3 has not been observed in\nOPT-175B and BLOOM-176B (Cf. Figure 1 left). For zero-shot performance, GLM-130B is better\nthan GPT-3 175B (+5.0%), OPT-175B (+6.5%), and BLOOM-176B (+13.0%) on LAMBADA (Pa-\nperno et al., 2016), and achieves 3 ×better performance than GPT-3 on Big-bench-lite (Srivastava\net al., 2022). For the 5-shot MMLU (Hendrycks et al., 2021) tasks, it is better than GPT-3 175B\n(+0.9%) and BLOOM-176B (+12.7%). As a bilingual LLM also in Chinese, it offers significantly\nbetter results than ERNIE TITAN 3.0 260B (Wang et al., 2021)—the largest Chinese LLM—on 7\nzero-shot CLUE (Xu et al., 2020) datasets (+24.26%) and 5 zero-shot FewCLUE (Xu et al., 2021)\nones (+12.75%). Importantly, as summarized in Figure 1 right, GLM-130B as an open model is\nassociated with significantly less bias and generation toxicity than its 100B-scale counterparts .\nFinally, we design GLM-130B to empower as many people as possible to conduct 100B-scale LLM\nstudies. First, instead of using 175B+ parameters as OPT and BLOOM, the 130B size is decided be-\ncause such a size supports inference on a single A100 (8 ×40G) server. Second, to further lower the\nGPU requirements, we quantize GLM-130B ', 'fastest to train but the\nfastest at inference, and although it may be cheaper\nto train a large model to reach a certain level of\n∗Equal contribution. Correspondence: {htouvron,\nthibautlav,gizacard,egrave,glample}@meta.com\n1https://github.com/facebookresearch/llamaperformance, a smaller one trained longer will\nultimately be cheaper at inference. For instance,\nalthough Hoffmann et al. (2022) recommends\ntraining a 10B model on 200B tokens, we ﬁnd\nthat the performance of a 7B model continues to\nimprove even after 1T tokens.\nThe focus of this work is to train a series of\nlanguage models that achieve the best possible per-\nformance at various inference budgets, by training\non more tokens than what is typically used. The\nresulting models, called LLaMA , ranges from 7B\nto 65B parameters with competitive performance\ncompared to the best existing LLMs. For instance,\nLLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 ×smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. “Books – 2TB” or\n“Social media conversations”). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modiﬁcations we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our\ntraining method. We ', 'the ability of the model to\nfollow instructions. Since this is not the focus of\nthis paper, we only conducted a single experiment\nfollowing the same protocol as Chung et al. (2022)\nto train an instruct model, LLaMA-I.\nOPT 30B 26.1\nGLM 120B 44.8\nPaLM 62B 55.1\nPaLM-cont 62B 62.8\nChinchilla 70B 67.5\nLLaMA 65B 63.4\nOPT-IML-Max 30B 43.2\nFlan-T5-XXL 11B 55.1\nFlan-PaLM 62B 59.6\nFlan-PaLM-cont 62B 66.1\nLLaMA-I 65B 68.9\nTable 10: Instruction ﬁnetuning – MMLU (5-shot).\nComparison of models of moderate size with and with-\nout instruction ﬁnetuning on MMLU.In Table 10, we report the results of our instruct\nmodel LLaMA-I on MMLU and compare with ex-\nisting instruction ﬁnetuned models of moderate\nsizes, namely, OPT-IML (Iyer et al., 2022) and the\nFlan-PaLM series (Chung et al., 2022). All the re-\nported numbers are from the corresponding papers.\nDespite the simplicity of the instruction ﬁnetuning\napproach used here, we reach 68.9% on MMLU.\nLLaMA-I (65B) outperforms on MMLU existing\ninstruction ﬁnetuned models of moderate sizes, but\nare still far from the state-of-the-art, that is 77.4\nfor GPT code-davinci-002 on MMLU (numbers\ntaken from Iyer et al. (2022)). The details of the\nperformance on MMLU on the 57 tasks can be\nfound in Table 16 of the appendix.\n5 Bias, Toxicity and Misinformation\nLarge language models have been showed to re-\nproduce and amplify biases that are existing in\nthe training data (Sheng et al., 2019; Kurita et al.,\n2019), and to generate toxic or offensive con-\ntent (Gehman et al., 2020). As our training dataset\ncontains a large proportion of data from the Web,\nwe believe that it is crucial to determine the po-\ntential for our models to generate such content.\nTo understand the potential harm of LLaMA-65B,\nwe evaluate on different benchmarks that measure\ntoxic content ']","LLaMA-13B outperforms GPT-3 (175B) on most benchmarks, and LLaMA-65B is competitive with Chinchilla-70B and PaLM-540B, showing that it can achieve comparable or better performance.","LLaMA-13B outperforms GPT-3 on most benchmarks, despite being 10 times smaller. 
LLaMA-65B is competitive with the best large language models such as Chinchilla-70B and PaLM-540B.",1.0,1.0,0.9122835993766785
How does LLaMA's training data preprocessing and mixture differ from other large language models?,"['fastest to train but the\nfastest at inference, and although it may be cheaper\nto train a large model to reach a certain level of\n∗Equal contribution. Correspondence: {htouvron,\nthibautlav,gizacard,egrave,glample}@meta.com\n1https://github.com/facebookresearch/llamaperformance, a smaller one trained longer will\nultimately be cheaper at inference. For instance,\nalthough Hoffmann et al. (2022) recommends\ntraining a 10B model on 200B tokens, we ﬁnd\nthat the performance of a 7B model continues to\nimprove even after 1T tokens.\nThe focus of this work is to train a series of\nlanguage models that achieve the best possible per-\nformance at various inference budgets, by training\non more tokens than what is typically used. The\nresulting models, called LLaMA , ranges from 7B\nto 65B parameters with competitive performance\ncompared to the best existing LLMs. For instance,\nLLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 ×smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. “Books – 2TB” or\n“Social media conversations”). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modiﬁcations we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our\ntraining method. We ', 'LLaMA: Open and Efﬁcient Foundation Language Models\nHugo Touvron∗, Thibaut Lavril∗, Gautier Izacard∗, Xavier Martinet\nMarie-Anne Lachaux, Timothee Lacroix, Baptiste Rozière, Naman Goyal\nEric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin\nEdouard Grave∗, Guillaume Lample∗\nMeta AI\nAbstract\nWe introduce LLaMA, a collection of founda-\ntion language models ranging from 7B to 65B\nparameters. We train our models on trillions\nof tokens, and show that it is possible to train\nstate-of-the-art models using publicly avail-\nable datasets exclusively, without resorting\nto proprietary and inaccessible datasets. In\nparticular, LLaMA-13B outperforms GPT-3\n(175B) on most benchmarks, and LLaMA-\n65B is competitive with the best models,\nChinchilla-70B and PaLM-540B. We release\nall our models to the research community1.\n1 Introduction\nLarge Languages Models (LLMs) trained on mas-\nsive corpora of texts have shown their ability to per-\nform new tasks from textual instructions or from a\nfew examples (Brown et al., 2020). These few-shot\nproperties ﬁrst appeared when scaling models to a\nsufﬁcient size (Kaplan et al., 2020), resulting in a\nline of work that focuses on further scaling these\nmodels (Chowdhery et al., 2022; Rae et al., 2021).\nThese efforts are based on the assumption that\nmore parameters will lead to better performance.\nHowever, recent work from Hoffmann et al. (2022)\nshows that, for a given compute budget, the best\nperformances are not achieved by the largest mod-\nels, but by smaller models trained on more data.\nThe objective of the scaling laws from Hoff-\nmann et al. (2022) is to determine how to best\nscale the dataset and model sizes for a particular\ntraining compute budget. However, this objective\ndisregards the inference budget, which becomes\ncritical when serving a language model at scale.\nIn this context, given a target level of performance,\nthe preferred model is not the ', 'Parikh, Sebastian Gehrmann, and Thibault Sellam. Learning\ncompact metrics for MT. In Proceedings of the 2021 Conference on Empirical Methods in Natural\nLanguage Processing , pp. 751–762, Online and Punta Cana, Dominican Republic, November\n2021. Association for Computational Linguistics. doi: 10.18653/v1/2021.emnlp-main.58. URL\nhttps://aclanthology.org/2021.emnlp-main.58 .\nXipeng Qiu, Tianxiang Sun, Yige Xu, Yunfan Shao, Ning Dai, and Xuanjing Huang. Pre-trained\nmodels for natural language processing: A survey. Science China Technological Sciences , 63(10):\n1872–1897, 2020.\nAlec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving language under-\nstanding with unsupervised learning. 2018.\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. Language\nmodels are unsupervised multitask learners. OpenAI blog , 1(8):9, 2019.\nJack W Rae, Sebastian Borgeaud, Trevor Cai, Katie Millican, Jordan Hoffmann, Francis Song, John\nAslanides, Sarah Henderson, Roman Ring, Susannah Young, et al. Scaling language models:\nMethods, analysis & insights from training gopher. arXiv preprint arXiv:2112.11446 , 2021.\nColin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi\nZhou, Wei Li, Peter J Liu, et al. Exploring the limits of transfer learning with a unified text-to-text\ntransformer. J. Mach. Learn. Res. , 21(140):1–67, 2020.\nAditya Ramesh, Mikhail Pavlov, Gabriel Goh, Scott Gray, Chelsea V oss, Alec Radford, Mark Chen,\nand Ilya Sutskever. Zero-shot text-to-image generation. In International Conference on Machine\nLearning , pp. 8821–8831. PMLR, 2021.\nJeff Rasley, Samyam Rajbhandari, Olatunji Ruwase, and Yuxiong He. Deepspeed: System opti-\nmizations enable training deep learning models with over 100 billion parameters. In Proceedings\nof the 26th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining ,\npp. 3505–3506, 2020.\nSebastian Riedel, Limin Yao, and Andrew McCallum. Modeling relations and their mentions with-\nout labeled text. ']","LLaMA's training data includes a mixture of sources like CommonCrawl, C4, GitHub, Wikipedia, and others, preprocessed with techniques like deduplication, language identification, and quality filtering, emphasizing the use of publicly available data.","LLaMA's training data preprocessing and mixture differ from other large language models in that they train their models on trillions of tokens using publicly available datasets exclusively, without resorting to proprietary and inaccessible datasets. This approach allows LLaMA models to outperform other models like GPT-3 on most benchmarks while being smaller in size.",1.0,1.0,0.7027873992919922
How does the accuracy of the largest GPT-3 model compare to human professionals across the 57 tasks?,"['way, our test shows that GPT-3 has\nmany knowledge blindspots and has capabilities that are lopsided.\nCalibration. We should not trust a model’s prediction unless the model is calibrated, meaning\nthat its conﬁdence is a good estimate of the actual probability the prediction is correct. However,\nlarge neural networks are often miscalibrated (Guo et al., 2017), especially under distribution shift\n(Ovadia et al., 2019). We evaluate the calibration of GPT-3 by testing how well its average conﬁdence\nestimates its actual accuracy for each subject. We show the results in Figure 8, which demonstrates\nthat GPT-3 is uncalibrated. In fact, its conﬁdence is only weakly related to its actual accuracy in\nthe zero-shot setting, with the difference between its accuracy and conﬁdence reaching up to 24%\nfor some subjects. Another calibration measure is the Root Mean Squared (RMS) calibration error\n(Hendrycks et al., 2019a; Kumar et al., 2019). Many tasks have miscalibrated predictions, such as\nElementary Mathematics which has a zero-shot RMS calibration error of 19.4%. Models are only\nsomewhat more calibrated in the few-shot setting, as shown in Appendix A. These results suggest\nthat model calibration has wide room for improvement.\n5 D ISCUSSION\nMultimodal Understanding. While text is capable of conveying an enormous number of concepts\nabout the world, many important concepts are conveyed mainly through other modalities, such as\nimages, audio, and physical interaction (Bisk et al., 2020). Existing large-scale NLP models, such as\nGPT-3, do not incorporate multimodal information, so we design our benchmark to capture a diverse\narray of tasks in a text-only format. However, as models gain the ability to process multimodal inputs,\nbenchmarks should be designed to reﬂect this change. ', 'have used a limited amount of books\nand academic papers in our pre-training data, i.e.,\nArXiv, Gutenberg and Books3, that sums up to only\n177GB, while these models were trained on up to\n2TB of books. This large quantity of books used\nby Gopher, Chinchilla and PaLM may also explain\nwhy Gopher outperforms GPT-3 on this benchmark,\nwhile it is comparable on other benchmarks.\n3.7 Evolution of performance during training\nDuring training, we tracked the performance of our\nmodels on a few question answering and common\nsense benchmarks, and report them in Figure 2.\nOn most benchmarks, the performance improves\nsteadily, and correlates with the training perplexity\nof the model (see Figure 1). The exceptions are\nSIQA and WinoGrande. Most notably, on SIQA,\nwe observe a lot of variance in performance,\x0cHumanities STEM Social Sciences Other Average\nGPT-NeoX 20B 29.8 34.9 33.7 37.7 33.6\nGPT-3 175B 40.8 36.7 50.4 48.8 43.9\nGopher 280B 56.2 47.4 71.9 66.1 60.0\nChinchilla 70B 63.6 54.9 79.3 73.9 67.5\nPaLM8B 25.6 23.8 24.1 27.8 25.4\n62B 59.5 41.9 62.7 55.8 53.7\n540B 77.0 55.6 81.0 69.6 69.3\nLLaMA7B 34.0 30.5 38.3 38.1 35.1\n13B 45.0 35.8 53.8 53.3 46.9\n33B 55.8 46.0 66.7 63.4 57.8\n65B 61.8 51.7 72.9 67.4 63.4\nTable 9: Massive Multitask Language Understanding (MMLU). Five-shot accuracy.\nthat may indicate that this benchmark is not\nreliable. On WinoGrande, the performance does\nnot correlate as well with training perplexity:\nthe LLaMA-33B and LLaMA-65B have similar\nperformance during the training.\n4 Instruction Finetuning\nIn this section, we show that brieﬂy ﬁnetuning on\ninstructions data rapidly leads to improvements\non MMLU. Although the non-ﬁnetuned version\nof LLaMA-65B is already able to follow basic in-\nstructions, we observe that a very small amount of\nﬁnetuning improves the performance on MMLU,\nand further improves ', 'we ﬁnd that performance is lopsided, with GPT-3 having almost\n70% accuracy for its best subject but near-random performance for several other subjects.\nOur results indicate that while recent advances have been impressive, state-of-the-art models still\nstruggle at learning and applying knowledge from pretraining. The tasks with near-random accuracy\ninclude calculation-heavy subjects such as physics and mathematics and subjects related to human\nvalues such as law and morality. This second weakness is particularly concerning because it will\nbe important for future models to have a strong understanding of what is legal and what is ethical.\nWorryingly, we also ﬁnd that GPT-3 does not have an accurate sense of what it does or does not know\nsince its average conﬁdence can be up to 24% off from its actual accuracy. We comprehensively\nevaluate the breadth and depth of a model’s text understanding by covering numerous topics that\nhumans are incentivized to learn. Since our test consists in 57tasks, it can be used to analyze\naggregate properties of models across tasks and to track important shortcomings. The test and code is\navailable at github.com/hendrycks/test.\n2 R ELATED WORK\nPretraining. The dominant paradigm in NLP is to pretrain large models on massive text corpora\nincluding educational books and websites. In the process, these models are exposed to information\nabout a wide range of topics. Petroni et al. (2019) found that recent models learn enough information\nfrom pretraining that they can serve as knowledge bases. However, no prior work has comprehensively\nmeasured the knowledge models have across many real-world domains.\nUntil recently, researchers primarily used ﬁne-tuned models on downstream tasks (Devlin et al., 2019).\nHowever, larger pretrained models like GPT-3 ']","he largest GPT-3 model achieves 43.9% accuracy on average, significantly below the expert-level performance, indicating that even the most advanced models require substantial improvements to reach human professional accuracy levels across these tasks.","The accuracy of the largest GPT-3 model is lopsided, with almost 70% accuracy for its best subject but near-random performance for several other subjects.",1.0,1.0,0.8182176351547241
What can you say about the calibration of models like GPT-3 in relation to their confidence and accuracy on the multitask test?,"['way, our test shows that GPT-3 has\nmany knowledge blindspots and has capabilities that are lopsided.\nCalibration. We should not trust a model’s prediction unless the model is calibrated, meaning\nthat its conﬁdence is a good estimate of the actual probability the prediction is correct. However,\nlarge neural networks are often miscalibrated (Guo et al., 2017), especially under distribution shift\n(Ovadia et al., 2019). We evaluate the calibration of GPT-3 by testing how well its average conﬁdence\nestimates its actual accuracy for each subject. We show the results in Figure 8, which demonstrates\nthat GPT-3 is uncalibrated. In fact, its conﬁdence is only weakly related to its actual accuracy in\nthe zero-shot setting, with the difference between its accuracy and conﬁdence reaching up to 24%\nfor some subjects. Another calibration measure is the Root Mean Squared (RMS) calibration error\n(Hendrycks et al., 2019a; Kumar et al., 2019). Many tasks have miscalibrated predictions, such as\nElementary Mathematics which has a zero-shot RMS calibration error of 19.4%. Models are only\nsomewhat more calibrated in the few-shot setting, as shown in Appendix A. These results suggest\nthat model calibration has wide room for improvement.\n5 D ISCUSSION\nMultimodal Understanding. While text is capable of conveying an enormous number of concepts\nabout the world, many important concepts are conveyed mainly through other modalities, such as\nimages, audio, and physical interaction (Bisk et al., 2020). Existing large-scale NLP models, such as\nGPT-3, do not incorporate multimodal information, so we design our benchmark to capture a diverse\narray of tasks in a text-only format. However, as models gain the ability to process multimodal inputs,\nbenchmarks should be designed to reﬂect this change. ', 'Published as a conference paper at ICLR 2021\nMEASURING MASSIVE MULTITASK\nLANGUAGE UNDERSTANDING\nDan Hendrycks\nUC BerkeleyCollin Burns\nColumbia UniversitySteven Basart\nUChicagoAndy Zou\nUC Berkeley\nMantas Mazeika\nUIUCDawn Song\nUC BerkeleyJacob Steinhardt\nUC Berkeley\nABSTRACT\nWe propose a new test to measure a text model’s multitask accuracy. The test\ncovers 57 tasks including elementary mathematics, US history, computer science,\nlaw, and more. To attain high accuracy on this test, models must possess extensive\nworld knowledge and problem solving ability. We ﬁnd that while most recent\nmodels have near random-chance accuracy, the very largest GPT-3 model improves\nover random chance by almost 20 percentage points on average. However, on every\none of the 57 tasks, the best models still need substantial improvements before\nthey can reach expert-level accuracy. Models also have lopsided performance\nand frequently do not know when they are wrong. Worse, they still have near-\nrandom accuracy on some socially important subjects such as morality and law.\nBy comprehensively evaluating the breadth and depth of a model’s academic and\nprofessional understanding, our test can be used to analyze models across many\ntasks and to identify important shortcomings.\n1 I NTRODUCTION\nNatural Language Processing (NLP) models have achieved superhuman performance on a number of\nrecently proposed benchmarks. However, these models are still well below human level performance\nfor language understanding as a whole, suggesting a disconnect between our benchmarks and the\nactual capabilities of these models. The General Language Understanding Evaluation benchmark\n(GLUE) (Wang et al., 2018) was introduced in 2018 to evaluate performance on a wide range of NLP\ntasks, and top models achieved superhuman performance within a year. To address the shortcomings\nof GLUE, researchers designed the SuperGLUE benchmark with more difﬁcult tasks (Wang et al.,\n2019). About ', 'LAMBADA and WikiText103\ndatasets in Table 3. For more details on evaluation method-\nology, see Appendix E. We observe the trend that increasing\nmodel size also leads to lower perplexity on WikiText103\nand higher cloze accuracy on LAMBADA. Our 8.3B model\nachieves state of the art perplexity on the WikiText103 test\nset at a properly adjusted perplexity of 10.81. At 66.51%\naccuracy, the 8.3B model similarly surpasses prior cloze\naccuracy results on the LAMBADA task. We have included\nsamples generated from the 8.3 billion parameters model\nin the Appendix C. Recently researchers from Microsoft in\ncollaboration with NVIDIA trained a 17 billion parameter\nGPT-2 model called Turing-NLG (Microsoft, 2020) using\nMegatron and showed that the accuracies further improve\nas they scale the model, highlighting the value of larger\nmodels.\nTo ensure we do not train on any data found in our test sets,\nwe calculate the percentage of test set 8-grams that also\nappear in our training set as done in previous work (Rad-\nford et al., 2019). The WikiText103 test set has at most\nFigure 6. Validation set perplexity. All language models are trained\nfor 300k iterations. Larger language models converge notice-\nably faster and converge to lower validation perplexities than their\nsmaller counterparts.\nTable 4. Model conﬁgurations used for BERT.\nParameter Layers Hidden Attention Total\nCount Size Heads GPUs\n336M 24 1024 16 128\n1.3B 24 2048 32 256\n3.9B 48 2560 40 512\n10.8%overlap and the LAMBADA test set (Paperno et al.,\n2016) has at most 1.4%overlap. We should note that the\nWikiText103 test set has already 9.09% overlap with the\nWikiText103 training set (Radford et al., 2019). As these\nare consistent with previous work, we are conﬁdent that no\ndocuments from our test data are inadvertently included ']","Models like GPT-3 are poorly calibrated, with their confidence often not accurately reflecting their actual performance across different subjects, indicating a need for improvement in model calibration techniques.","The calibration of models like GPT-3 in relation to their confidence and accuracy on the multitask test shows that GPT-3 is uncalibrated, with its confidence not being a good estimate of its actual accuracy in the zero-shot setting. The difference between its accuracy and confidence can reach up to 24% for some subjects. This suggests that model calibration, specifically in terms of confidence and accuracy, has wide room for improvement.",1.0,1.0,0.7593491077423096
"Without needing training on a separate classifier, how does DetectGPT determine if a passage was generated by an LLM?","['a move to the White House that included bringing along his pet German Shepherd…”\nDetectGPT\nx\n...GPT-3(1)Perturb(2) Score(3) Compare\n🤖 from GPT-3\nYes(reword with T5)\n“made a move” “moved”→“pet” “dog”→Delete “bringing along”\n...\n🤔 from other source\nNo\nFigure 1. We aim to determine whether a piece of text was gener-\nated by a particular LLM p, such as GPT-3. To classify a candidate\npassage x, DetectGPT first generates minor perturbations of the\npassage ˜xiusing a generic pre-trained model such as T5. Then\nDetectGPT compares the log probability under pof the original\nsample xwith each perturbed sample ˜xi. If the average log ratio\nis high, the sample is likely from the source model.\nWhile recent work has found that cogent-sounding LLM-\ngenerated responses are often simply wrong (Lin et al.,\n2022), the articulate nature of such generated text may still\nmake LLMs attractive for replacing human labor in some\ncontexts, notably student essay writing and journalism. At\nleast one major news source has released AI-written content\nwith limited human review, leading to substantial factual er-\nrors in some articles (Christian, 2023). Such applications of\nLLMs are problematic for a variety of reasons, making fair\nstudent assessment difficult, impairing student learning, and\nproliferating convincing-but-inaccurate news articles. Un-\nfortunately, humans perform only slightly better than chance\nwhen classifying machine-generated vs human-written text\n(Gehrmann et al., 2019), leading researchers to consider\nautomated detection methods that may identify signals dif-\nficult for humans to recognize. Such methods might give\nteachers and news-readers more confidence in the human\norigin of the text that they consume.\nAs in prior work (Jawahar et al., 2020), we study the\n1arXiv:2301.11305v2 [cs.CL] 23 Jul 2023\x0cZero-Shot Machine-Generated Text Detection using Probability Curvature\nmachine-generated text detection problem as a binary clas-\nsification problem. Specifically, we ', 'DetectGPT: Zero-Shot Machine-Generated Text Detection\nusing Probability Curvature\nEric Mitchell1Yoonho Lee1Alexander Khazatsky1Christopher D. Manning1Chelsea Finn1\nAbstract\nThe increasing fluency and widespread usage of\nlarge language models (LLMs) highlight the de-\nsirability of corresponding tools aiding detection\nof LLM-generated text. In this paper, we identify\na property of the structure of an LLM’s proba-\nbility function that is useful for such detection.\nSpecifically, we demonstrate that text sampled\nfrom an LLM tends to occupy negative curva-\nture regions of the model’s log probability func-\ntion. Leveraging this observation, we then define\na new curvature-based criterion for judging if a\npassage is generated from a given LLM. This\napproach, which we call DetectGPT, does not re-\nquire training a separate classifier, collecting a\ndataset of real or generated passages, or explic-\nitly watermarking generated text. It uses only\nlog probabilities computed by the model of in-\nterest and random perturbations of the passage\nfrom another generic pre-trained language model\n(e.g., T5). We find DetectGPT is more discrimi-\nnative than existing zero-shot methods for model\nsample detection, notably improving detection of\nfake news articles generated by 20B parameter\nGPT-NeoX from 0.81 AUROC for the strongest\nzero-shot baseline to 0.95 AUROC for Detect-\nGPT. See ericmitchell.ai/detectgpt\nfor code, data, and other project information.\n1. Introduction\nLarge language models (LLMs) have proven able to gen-\nerate remarkably fluent responses to a wide variety of user\nqueries. Models such as GPT-3 (Brown et al., 2020), PaLM\n(Chowdhery et al., 2022), and ChatGPT (OpenAI, 2022)\ncan convincingly answer complex questions about science,\nmathematics, historical and current events, and social trends.\n1Stanford University. Correspondence to: Eric Mitchell\n<eric.mitchell@cs.stanford.edu >.\nProceedings of the 40thInternational Conference on Machine\nLearning , Honolulu, Hawaii, USA. PMLR 202, 2023. Copyright\n2023 by the author(s). Candidate passage : “Joe Biden recently made ', 'source model pθ,\nDetectGPT compares the log probability of the candidate\npassage under pθwith the average log probability of several\nperturbations of the passage under pθ(generated with, e.g.,\nT5; Raffel et al. (2020)). If the perturbed passages tend\nto have lower average log probability than the original by\nsome margin, the candidate passage is likely to have come\nfrompθ. See Figure 1 for an overview of the problem and\nDetectGPT. See Figure 2 for an illustration of the under-\nlying hypothesis and Figure 3 for empirical evaluation of\nthe hypothesis. Our experiments find that DetectGPT is\nmore accurate than existing zero-shot methods for detect-\ning machine-generated text, improving over the strongest\nzero-shot baseline by over 0.1 AUROC for multiple source\nmodels when detecting machine-generated news articles.\nContributions. Our main contributions are: (a) the identi-\nfication and empirical validation of the hypothesis that the\ncurvature of a model’s log probability function tends to be\nsignificantly more negative at model samples than for hu-\nman text, and (b) DetectGPT, a practical algorithm inspired\nby this hypothesis that approximates the trace of the log\nlogp/uni03B8(x)\nxfake/uni223Cp/uni03B8(x)˜xfake1˜xfake2˜xfake3˜xfake4xreal/uni223Cphuman(x)˜xreal1˜xreal2˜xreal3˜xreal4\nFake/real samplePerturbed fake/real sampleLog likelihood…logp/uni03B8(x)Figure 2. We identify and exploit the tendency of machine-\ngenerated passages x∼pθ(·)(left) to lie in negative curvature\nregions of logp(x), where nearby samples have lower model\nlog probability on average. In contrast, human-written text\nx∼preal(·)(right) tends not to occupy regions with clear nega-\ntive log probability curvature; nearby samples may have higher or\nlower log probability.\nprobability function’s Hessian to detect a model’s samples.\n2. Related Work\nIncreasingly large LLMs (Radford et al., 2019; Brown et al.,\n2020; Chowdhery et al., 2022; OpenAI, 2022; Zhang et al.,\n2022) have led to dramatically improved performance on\nmany language-related benchmarks and the ability to gen-\nerate ']",DetectGPT uses the log probabilities computed by the model of interest and random perturbations of the passage from another generic pre-trained language model.,"DetectGPT compares the log probability of the candidate passage under the source model with the average log probability of several perturbations of the passage from a generic pre-trained language model. If the perturbed passages have lower average log probability than the original passage by some margin, the candidate passage is likely to have come from the source model.",1.0,1.0,0.9294582605361938
"What role do random perturbations play in DetectGPT's methodology, and how are they applied?","['deviation of the ob-\nserved values used to estimate E˜x∼q(·|x)logpθ(˜x)provides\na slightly better signal for detection, typically increasing\n1We later show in Figure 8 that varying the number of samples\nused to estimate the expectation effectively allows for trading off\nbetween accuracy and speed.AUROC by around 0.020, so we use this normalized version\nof the perturbation discrepancy in our experiments. The\nresulting method, DetectGPT, is summarized in Alg. 1. Hav-\ning described an application of the perturbation discrepancy\nto machine-generated text detection, we next provide an\ninterpretation of this quantity.\nInterpretation of perturbation discrepancy as curvature\nWhile Figure 3 suggests that the perturbation discrepancy\nmay be useful, it is not immediately obvious what it mea-\nsures. In this section, we show that the perturbation dis-\ncrepancy approximates a measure of the local curvature\nof the log probability function near the candidate passage,\nmore specifically, that it is proportional to the negative trace\nof the Hessian of the log probability function.2To han-\ndle the non-differentiability of discrete data, we consider\ncandidate passages in a latent semantic space, where small\ndisplacements correspond to valid edits that retain similar\nmeaning to the original. Because our perturbation function\n(T5) models natural text, we expect our perturbations to\nroughly capture such meaningful variations of the original\npassage, rather than arbitrary edits.\nWe first invoke Hutchinson’s trace estimator (Hutchinson,\n1990), giving an unbiased estimate of the trace of matrix A:\ntr(A) =Ezz⊤Az (2)\nprovided that the elements of z∼qzare IID with E[zi] = 0\nandVar(zi) = 1 . To use Equation 2 to estimate the trace\nof the Hessian of fatx, we must therefore compute the\nexpectation of the directional second derivative z⊤Hf(x)z.\nWe approximate this expression with finite differences:\nz⊤Hf(x)z≈f(x+hz) +f(x−hz)−2f(x)\nh2(3)\nCombining Equations 2 and 3 ', '8. Impact of varying the number of perturbations (samples\nof mask and mask-fill) used by DetectGPT on AUROC for GPT-2\n(left) and GPT-J ( right ) to estimate the perturbation discrepancy\non detection. Averaging up to 100 perturbations greatly increases\nDetectGPT’s reliability. Perturbations sampled from T5-large.\nlarly how the domain impacts the threshold separating the\nperturbation discrepancy distributions of model-generated\nand human texts as well as the impact of passage length on\ndetection. Figure 9 shows the perturbation discrepancy dis-\ntributions for model-generated and human texts across four\ndata distributions, using GPT-Neo-2.7B to generate sam-\nples. A threshold of slightly below 0.1 separates human and\nmodel texts across data distributions, which is important for\npractical scenarios in which a passage may be analyzed with-\nout knowing its domain a priori. Finally, Figure 10 shows an\nanalysis of DetectGPT’s performance as a function of pas-\nsage length. We bin the paired human- and model-generated\nsequences by their average length into three bins of equal\nsize (bottom/middle/top third), and plot the AUROC within\neach bin. The relationship between detection performance\nand passage length generally depends on the dataset and\nmodel (or tokenizer). For very long sequences, DetectGPT\nmay see reduced performance because our implementation\nof DetectGPT applies all T5 mask-filling perturbations at\nonce, and T5 may fail to track many mask tokens at once.\nBy applying perturbations in multiple sequential rounds of\nsmaller numbers of masks, this effect may be mitigated.\n6. Discussion\nAs large language models continue to improve, they will\nbecome increasingly attractive tools for replacing human\nwriters in a variety of contexts, such as education, jour-\nnalism, and art. While legitimate uses of language model\ntechnologies exist in all of these settings, teachers, readers,\nand consumers are likely ', 'both top- k\nand nucleus sampling make detection easier, on average.\nAveraging across domains, DetectGPT provides the clearest\nsignal for zero-shot detection.\nDetection when the source model is unknown. While\nour experiments have focused on the white-box setting\nfor machine-generated text detection, in this section, we\nGPT-J GPT-Neo GPT-2Scoring ModelGPT-J GPT-Neo GPT-2Base Model0.92\n(0.02)0.83\n(0.04)0.79\n(0.02)\n0.64\n(0.06)0.97\n(0.01)0.83\n(0.02)\n0.60\n(0.09)0.85\n(0.05)0.99\n(0.00)0.85\n0.81\n0.81\n0.72 0.88 0.87\nFigure 6. DetectGPT performs\nbest when scoring samples\nwith the same model that gen-\nerated them (diagonal), but\nthe column means suggest that\nsome models (GPT-Neo, GPT-\n2) may be better ‘scorers’ than\nothers (GPT-J). White values\nshow mean (standard error)\nAUROC over XSum, SQuAD,\nand WritingPrompts; black\nshows row/column mean.explore the effect of using\na different model to score a\ncandidate passage (and per-\nturbed texts) than the model\nthat generated the passage.\nIn other words, we aim\nto classify between human-\ngenerated text and text from\nmodel A, but without ac-\ncess to model Ato com-\npute log probabilities. In-\nstead, we use log probabil-\nities computed by a surro-\ngate model B. We con-\nsider three models, GPT-J,\nGPT-Neo-2.7, and GPT-2,\nevaluating all possible com-\nbinations of source model\nand surrogate model (9 to-\ntal). We average the perfor-\nmance across 200 samples\nfrom XSum, SQuAD, and\n7\x0cZero-Shot Machine-Generated Text Detection using Probability Curvature\n60M 220M 770M 2.7B0.50.60.70.80.91.0Detection AUROC\n5 perturbations\n60M 220M 770M 2.7B\n25 perturbations\nRandom\nGPT2-sm\nGPT2-md\nGPT2-lg\nGPT2-xl\nMask filling model size (# parameters)\nFigure 7. There is a clear association between capacity of mask-\nfilling model and detection performance, across source model\nscales. Random mask filling (uniform sampling from mask filling\nmodel vocabulary) performs poorly, reinforcing the idea that the\nperturbation function should produce samples on the data manifold.\nCurves show AUROC scores on 200 SQuAD contexts.\nWritingPrompts. The results are presented in Figure 6,\nshowing that when the surrogate model is different from the\nsource model, detection performance is reduced, indicating\nthat DetectGPT ']","Random perturbations are used to slightly modify the text, keeping its meaning similar. DetectGPT evaluates the change in log probability caused by these perturbations to detect machine-generated text.","Random perturbations in DetectGPT's methodology play a role in reinforcing the idea that the perturbation function should produce samples on the data manifold. They are applied by using random mask filling, which involves uniform sampling from the mask filling model vocabulary.",1.0,1.0,0.6649393439292908
What specific architectural changes were made to develop DistilBERT from BERT?,"['by two BiLSTMs.4\nThe results on each of the 9 tasks are showed on Table 1 along with the macro-score (average of\nindividual scores). Among the 9 tasks, DistilBERT is always on par or improving over the ELMo\nbaseline (up to 19 points of accuracy on STS-B). DistilBERT also compares surprisingly well to\nBERT, retaining 97% of the performance with 40% fewer parameters.\n4.1 Downstream task benchmark\nDownstream tasks We further study the performances of DistilBERT on several downstream tasks\nunder efﬁcient inference constraints: a classiﬁcation task (IMDb sentiment classiﬁcation - Maas et al.\n[2011]) and a question answering task (SQuAD v1.1 - Rajpurkar et al. [2016]).\nAs shown in Table 2, DistilBERT is only 0.6% point behind BERT in test accuracy on the IMDb\nbenchmark while being 40% smaller. On SQuAD, DistilBERT is within 3.9 points of the full BERT.\nWe also studied whether we could add another step of distillation during the adaptation phase by\nﬁne-tuning DistilBERT on SQuAD using a BERT model previously ﬁne-tuned on SQuAD as a\n4We use jiant [Wang et al., 2019] to compute the baseline.\n3\x0cTable 4: Ablation study. Variations are relative to the model trained with triple loss and teacher\nweights initialization.\nAblation Variation on GLUE macro-score\n∅-Lcos-Lmlm -2.96\nLce-∅-Lmlm -1.46\nLce-Lcos-∅ -0.31\nTriple loss + random weights initialization -3.69\nteacher for an additional term in the loss (knowledge distillation). In this setting, there are thus two\nsuccessive steps of distillation, one during the pre-training phase and one during the adaptation phase.\nIn this case, we were able to reach interesting performances given the size of the model: 79.8 F1 and\n70.4 EM, i.e. within 3 points of the full model.\nSize and ', 'mat-\nter (and shufﬂed language models know it). arXiv\npreprint arXiv:2203.10995 .\nVictor Sanh, Lysandre Debut, Julien Chaumond, and\nThomas Wolf. 2019. Distilbert, a distilled version\nof bert: smaller, faster, cheaper and lighter. ArXiv\npreprint , abs/1910.01108.\nVictor Sanh, Albert Webson, Colin Raffel, Stephen H.\nBach, Lintang Sutawika, Zaid Alyafeai, Antoine\nChafﬁn, Arnaud Stiegler, Teven Le Scao, Arun Raja,\nManan Dey, M Saiful Bari, Canwen Xu, Urmish\nThakker, Shanya Sharma Sharma, Eliza Szczechla,\nTaewoon Kim, Gunjan Chhablani, Nihal Nayak,\nDebajyoti Datta, Jonathan Chang, Mike Tian-Jian\nJiang, Han Wang, Matteo Manica, Sheng Shen,\nZheng Xin Yong, Harshit Pandey, Rachel Bawden,\nThomas Wang, Trishala Neeraj, Jos Rozen, Ab-\nheesht Sharma, Andrea Santilli, Thibault Fevry, Ja-\nson Alan Fries, Ryan Teehan, Stella Biderman, Leo\nGao, Tali Bers, Thomas Wolf, and Alexander M.\nRush. 2021. Multitask prompted training enables\nzero-shot task generalization.\nTimo Schick and Hinrich Schütze. 2021a. Exploiting\ncloze-questions for few-shot text classiﬁcation and\nnatural language inference. In Proceedings of the\n12\x0c16th Conference of the European Chapter of the As-\nsociation for Computational Linguistics: Main Vol-\nume, pages 255–269, Online. Association for Com-\nputational Linguistics.\nTimo Schick and Hinrich Schütze. 2021b. It’s not just\nsize that matters: Small language models are also\nfew-shot learners. In Proceedings of the 2021 Con-\nference of the North American Chapter of the Asso-\nciation for Computational Linguistics: Human Lan-\nguage Technologies , pages 2339–2352, Online. As-\nsociation for Computational Linguistics.\nNoam Shazeer and Mitchell Stern. 2018. Adafactor:\nAdaptive learning rates with sublinear memory cost.\nInInternational Conference on Machine Learning ,\npages 4596–4604. PMLR.\nTaylor Shin, Yasaman Razeghi, Robert L. Logan IV ,\nEric Wallace, and Sameer Singh. 2020. AutoPrompt:\nEliciting Knowledge from Language Models with\nAutomatically Generated Prompts. In Proceed-\nings of the 2020 Conference on Empirical Methods\nin Natural Language Processing (EMNLP) , pages\n4222–4235, Online. Association for ', 'yields to comparable\nperformance on downstream tasks. Com-\nparison on downstream tasks: IMDb (test ac-\ncuracy) and SQuAD 1.1 (EM/F1 on dev set).\nD: with a second step of distillation during\nﬁne-tuning.\nModel IMDb SQuAD\n(acc.) (EM/F1)\nBERT-base 93.46 81.2/88.5\nDistilBERT 92.82 77.7/85.8\nDistilBERT (D) - 79.1/86.9Table 3: DistilBERT is signiﬁcantly smaller\nwhile being constantly faster. Inference\ntime of a full pass of GLUE task STS-B (sen-\ntiment analysis) on CPU with a batch size of\n1.\nModel # param. Inf. time\n(Millions) (seconds)\nELMo 180 895\nBERT-base 110 668\nDistilBERT 66 410\nDistillation We applied best practices for training BERT model recently proposed in Liu et al. [2019].\nAs such, DistilBERT is distilled on very large batches leveraging gradient accumulation (up to 4K\nexamples per batch) using dynamic masking and without the next sentence prediction objective.\nData and compute power We train DistilBERT on the same corpus as the original BERT model:\na concatenation of English Wikipedia and Toronto Book Corpus [Zhu et al., 2015]. DistilBERT\nwas trained on 8 16GB V100 GPUs for approximately 90 hours. For the sake of comparison, the\nRoBERTa model [Liu et al., 2019] required 1 day of training on 1024 32GB V100.\n4 Experiments\nGeneral Language Understanding We assess the language understanding and generalization ca-\npabilities of DistilBERT on the General Language Understanding Evaluation (GLUE) benchmark\n[Wang et al., 2018], a collection of 9 datasets for evaluating natural language understanding systems.\nWe report scores on the development sets for each task by ﬁne-tuning DistilBERT without the use\nof ensembling or multi-tasking scheme for ﬁne-tuning (which are mostly orthogonal to the present\nwork). We compare the results to the baseline provided by the authors of GLUE: an ELMo (Peters\net al. [2018]) encoder followed ']","DistilBERT omits token-type embeddings and the pooler layer, and reduces the number of layers by half compared to BERT.",None,1.0,1.0,0.15503059327602386
What core challenge does HellaSwag aim to address in the context of state-of-the-art models' capabilities in commonsense natural language inference (NLI)?,"['of T0 (3B and 11B), as well as their non-\ninstruction-tuned version, T5 LM-Adapted (Lester\net al., 2021), as a baseline.\nVery Large Model Lastly, we experiment with\nthe largest GPT-3 (175B) via priming (a.k.a. in-\ncontext learning). Although ﬁne-tuning is techni-\ncally available, it is extremely limited by OpenAI’s\nvarious quotas. See Appendix B for details on how\nwe circumvent challenges in reproducing Brown\net al. (2020)’s results.\nData NLI is a task where a model is asked to\nclassify whether one piece of text (the “premise”)\nentails another (the “hypothesis”). We focus on NLI\nbecause all T0 variants holds out all NLI prompts\nand all NLI datasets in its training, which makes it\na fair comparison to other models in this paper.\nWe use Recognizing Textual Entailment (RTE,\nDagan et al., 2006, inter alios), a series of expert-\nannotated NLI datasets. Speciﬁcally, we use the\nSuperGLUE collection of RTE (i.e., RTE1, 2, 3,\nand 5; all converted to binary classiﬁcation) and\nreport their validation accuracy for comparability\nwith prior work on prompts.\nWe also experiment with Adversarial NLI\n(ANLI, Nie et al., 2020), Heuristic Analysis for\n3\x0cNLI Systems (HANS, McCoy et al., 2019), and\nWinograd Schema Challenge (WSC, Levesque\net al., 2012), reported in Appendices G.2, K, and\nL, respectively. We ﬁnd no qualitative difference\nbetween their and the main RTE results except that\nANLI requires much larger number of shots be-\nfore obtaining any above-random accuracy, as it is\ndesigned to be a highly challenging set.\nRandom Seeds & Example Sampling All ex-\nperiments are run over the same set of 4 random\nseeds. Within a given seed, all models see the same\nset of examples. For instance, under seed 1, the\n4-shot models see examples 550–553, the 8-shot\nmodels see ', 'the best known discriminator (BERT-\nLarge), we made a dataset that is adversarial - not\njust to BERT, but to all models we have access to.\nWhile this was easy algorithmically, care must\nbe taken from a data curation standpoint. Indeed,\nwe ﬁnd success exists within a Goldilocks zone:\nthe data source must be complex enough that state-\nof-the-art generators often make mistakes, while\nsimple enough such that discriminators often fail\nto catch them. This ties the future of SWAG-\nstyle benchmarks to progress on language gener-\nation: until generation is solved, commonsense\nNLI will remain unsolved. Even recent promis-\ning results on scaling up language models (Rad-\nford et al., 2019) ﬁnd problems in terms of consis-\ntency, with the best curated examples requiring 25\nrandom seeds.\n7 Conclusion\nIn this paper, we presented HellaSwag , a new\ndataset for physically situated commonsense rea-\nsoning. By constructing the dataset through ad-\nversarial ﬁltering, combined with state-of-the-art\nmodels for language generation and discrimina-\ntion, we produced a dataset that is adversarial tothe most robust models available – even when\nmodels are evaluated on items from the train-\ning distribution. In turn, we provided insight\ninto the inner workings of pretrained models, and\nsuggest a path for NLP progress going forward:\ntowards benchmarks that adversarially co-evolve\nwith evolving state-of-the-art models.\nAcknowledgments\nWe thank the reviewers, as well as Jesse Thoma-\nson, for their helpful feedback. We thank the\nMechanical Turk workers for their great work\nduring dataset collection. Thanks also to Zak\nStone and the Google Cloud TPU team for help\nwith the computing infrastructure. This work\nwas supported by the National Science Foundation\nthrough a Graduate Research Fellowship (DGE-\n1256082) and NSF grants (IIS-1524371, 1637479,\n165205, 1703166), the DARPA CwC program\nthrough ARO (W911NF-15-1-0543), the IARPA\nDIV A ', 'Extrapolating from\nan exponential ﬁt suggests that reaching human-\nlevel performance on our dataset would require\n109GPU hours, or 100k years – unless algorith-\nmic improvements are made.\nWhat might these algorithmic improvements\nlook like? These could include architectural ad-\nvances, better pretraining objectives, and beyond.\nHowever, these improvements share the bottle-\nneck of the data source. To answer some Hella-\nSwag questions correctly without reasoning deeply\n– like knowing that it is a bad idea to stop at a\nred light for ‘at most two seconds’ – might require\nan exponential number of samples, due to prob-\n8\x0clems of reporting bias (Gordon and Van Durme,\n2013). Alternatively, future models might answer\ncorrectly only by picking up on spurious patterns,\nin which case a new development of the bench-\nmark – using these models as adversaries – would\nplace us in the same position as we are right now.\nPut another way, for humans to answer Hella-\nSwag questions requires abstracting away from\nlanguage and modeling world states instead. We\npostulate that this is what separates solving the\ntask of commonsense NLI, as opposed to a par-\nticular dataset. Indeed, we ﬁnd that existing deep\nmethods often get fooled by lexical false friends.\nFor example, in the WikiHow example from Fig-\nure 10, BERT chooses an ending that matches\nthetechnology words in the context, rather than\nmatching the deeper topic: using technology as an\nexcuse for not doing homework.\n6.3 Towards a future of evolving benchmarks\nWhat happens when HellaSwag gets solved? We\nbelieve the answer is simple: crowdsource another\ndataset, with the same exact format, and see where\nmodels fail. Indeed, in our work we found this to\nbe straightforward from an algorithmic perspec-\ntive: by throwing in the best known generator\n(GPT) and ']","HellaSwag challenges the notion that state-of-the-art models have solved commonsense NLI by introducing adversarially crafted dataset examples that are easy for humans but difficult for machines, highlighting the gap in commonsense reasoning.","HellaSwag aims to address the core challenge of common sense NLI by creating a dataset that is adversarial not only to BERT but to all models available, in order to push the boundaries of current state-of-the-art models in reasoning and understanding language.",1.0,1.0,0.8126416802406311
"How does the dynamic masking strategy in RoBERTa differ from BERT's static masking, and what advantage does it offer?","['SST-2. Reported results are\nmedians over 5 random initializations (seeds). Refer-\nence results are from Yang et al. (2019 ).\nResults Table 1compares the published\nBERT BASE results from Devlin et al. (2019 ) to our\nreimplementation with either static or dynamic\nmasking. We ﬁnd that our reimplementation\nwith static masking performs similar to the\noriginal BERT model, and dynamic masking is\ncomparable or slightly better than static masking.\nGiven these results and the additional efﬁciency\nbeneﬁts of dynamic masking, we use dynamic\nmasking in the remainder of the experiments.\n4.2 Model Input Format and Next Sentence\nPrediction\nIn the original BERT pretraining procedure, the\nmodel observes two concatenated document seg-\nments, which are either sampled contiguously\nfrom the same document (with p= 0.5) or from\ndistinct documents. In addition to the masked lan-\nguage modeling objective, the model is trained to\npredict whether the observed document segments\ncome from the same or distinct documents via an\nauxiliary Next Sentence Prediction (NSP) loss.\nThe NSP loss was hypothesized to be an impor-\ntant factor in training the original BERT model.\nDevlin et al. (2019 ) observe that removing NSP\nhurts performance, with signiﬁcant performance\ndegradation on QNLI, MNLI, and SQuAD 1.1.\nHowever, some recent work has questioned the\nnecessity of the NSP loss ( Lample and Conneau ,\n2019 ;Yang et al. ,2019 ;Joshi et al. ,2019 ).\nTo better understand this discrepancy, we com-\npare several alternative training formats:\n•SEGMENT -PAIR +NSP: This follows the original\ninput format used in BERT ( Devlin et al. ,2019 ),\nwith the NSP loss. Each input has a pair of seg-\nments, which can each contain multiple natural\nsentences, but the total combined length must\nbe less than 512 tokens.\x0cModel SQuAD 1.1/2.0 MNLI-m SST-2 RACE\nOur reimplementation (with ', 'to\nhairy ), our masking procedure can be further il-\nlustrated by\n• 80% of the time: Replace the word with the\n[MASK] token, e.g., my dog is hairy →\nmy dog is [MASK]\n• 10% of the time: Replace the word with a\nrandom word, e.g., my dog is hairy →my\ndog is apple\n• 10% of the time: Keep the word un-\nchanged, e.g., my dog is hairy →my dog\nis hairy . The purpose of this is to bias the\nrepresentation towards the actual observed\nword.\nThe advantage of this procedure is that the\nTransformer encoder does not know which words\nit will be asked to predict or which have been re-\nplaced by random words, so it is forced to keep\na distributional contextual representation of ev-\neryinput token. Additionally, because random\nreplacement only occurs for 1.5% of all tokens\n(i.e., 10% of 15%), this does not seem to harm\nthe model’s language understanding capability. In\nSection C.2, we evaluate the impact this proce-\ndure.\nCompared to standard langauge model training,\nthe masked LM only make predictions on 15% of\ntokens in each batch, which suggests that more\npre-training steps may be required for the model\x0cBERT (Ours) Trm Trm Trm\nTrm Trm Trm...\n...Trm Trm Trm\nTrm Trm Trm...\n...OpenAI GPT Lstm ELMo Lstm Lstm Lstm Lstm Lstm Lstm Lstm Lstm Lstm Lstm Lstm T1 T2 TN...\n...\n......\n... E1 E2 EN... T1 T2TN... E1 E2 EN ... T1 T2 TN... E1 E2 EN...Figure 3: Differences in pre-training model architectures. BERT uses a bidirectional Transformer. OpenAI GPT\nuses a left-to-right Transformer. ELMo uses the concatenation of independently trained left-to-right and right-to-\nleft LSTMs to generate features for downstream tasks. Among the three, only BERT representations are jointly\nconditioned on ', 'is a\nlarge-scale reading comprehension dataset with\nmore than 28,000 passages and nearly 100,000\nquestions. The dataset is collected from English\nexaminations in China, which are designed for\nmiddle and high school students. In RACE, each\npassage is associated with multiple questions. For\nevery question, the task is to select one correct an-\nswer from four options. RACE has signiﬁcantly\nlonger context than other popular reading compre-\nhension datasets and the proportion of questions\nthat requires reasoning is very large.\n4 Training Procedure Analysis\nThis section explores and quantiﬁes which choices\nare important for successfully pretraining BERT\nmodels. We keep the model architecture ﬁxed.7\nSpeciﬁcally, we begin by training BERT models\nwith the same conﬁguration as BERT BASE (L=\n12,H= 768 ,A= 12 , 110M params).\n4.1 Static vs. Dynamic Masking\nAs discussed in Section 2, BERT relies on ran-\ndomly masking and predicting tokens. The orig-\ninal BERT implementation performed masking\nonce during data preprocessing, resulting in a sin-\nglestatic mask. To avoid using the same mask for\neach training instance in every epoch, training data\nwas duplicated 10 times so that each sequence is\nmasked in 10 different ways over the 40 epochs of\ntraining. Thus, each training sequence was seen\nwith the same mask four times during training.\nWe compare this strategy with dynamic mask-\ningwhere we generate the masking pattern every\ntime we feed a sequence to the model. This be-\ncomes crucial when pretraining for more steps or\nwith larger datasets.\n7Studying architectural changes, including larger archi-\ntectures, is an important area for future work.Masking SQuAD 2.0 MNLI-m SST-2\nreference 76.3 84.3 92.8\nOur reimplementation:\nstatic 78.3 84.3 92.5\ndynamic 78.7 84.0 92.9\nTable 1: Comparison between static and dynamic\nmasking for BERT BASE. We report F1 for SQuAD and\naccuracy for MNLI-m and ']","Unlike BERT's static masking, which applies the same mask to each training instance throughout epochs, RoBERTa employs dynamic masking, where the mask is generated anew for each instance every time it is fed into the model. This strategy ensures a richer variety of training examples and prevents the model from overfitting to a specific masked pattern.","The dynamic masking strategy in RoBERTa generates the masking pattern every time a sequence is fed to the model, as opposed to BERT's static masking which performed masking once during data preprocessing. This allows for a different masking pattern for each training instance, providing more variability and preventing the model from memorizing specific masked sequences. The advantage of dynamic masking is that it is crucial when pretraining for more steps or with larger datasets, as it ensures that the model is continually exposed to different masked tokens, leading to better generalization and performance.",1.0,1.0,0.9169678092002869
"How does the performance of RoBERTa compare to BERT and other models on the GLUE benchmark, particularly in terms of state-of-the-art achievements?","['56.0 75.1\nBERT BASE 84.6/83.4 71.2 90.5 93.5 52.1 85.8 88.9 66.4 79.6\nBERT LARGE 86.7/85.9 72.1 92.7 94.9 60.5 86.5 89.3 70.1 82.1\nTable 1: GLUE Test results, scored by the evaluation server ( https://gluebenchmark.com/leaderboard ).\nThe number below each task denotes the number of training examples. The “Average” column is slightly different\nthan the ofﬁcial GLUE score, since we exclude the problematic WNLI set.8BERT and OpenAI GPT are single-\nmodel, single task. F1 scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, and\naccuracy scores are reported for the other tasks. We exclude entries that use BERT as one of their components.\nWe use a batch size of 32 and ﬁne-tune for 3\nepochs over the data for all GLUE tasks. For each\ntask, we selected the best ﬁne-tuning learning rate\n(among 5e-5, 4e-5, 3e-5, and 2e-5) on the Dev set.\nAdditionally, for BERT LARGE we found that ﬁne-\ntuning was sometimes unstable on small datasets,\nso we ran several random restarts and selected the\nbest model on the Dev set. With random restarts,\nwe use the same pre-trained checkpoint but per-\nform different ﬁne-tuning data shufﬂing and clas-\nsiﬁer layer initialization.9\nResults are presented in Table 1. Both\nBERT BASE and BERT LARGE outperform all sys-\ntems on all tasks by a substantial margin, obtaining\n4.5% and 7.0% respective average accuracy im-\nprovement over the prior state of the art. Note that\nBERT BASE and OpenAI GPT are nearly identical\nin terms of model architecture apart from the at-\ntention masking. For the largest and most widely\nreported GLUE task, MNLI, BERT obtains a 4.6%\nabsolute accuracy improvement. On the ofﬁcial\nGLUE leaderboard10, BERT LARGE obtains a score\nof ', 'recent work in this area.\nSince its release, GLUE has been used as a testbed and showcase by the developers of several\ninﬂuential models, including GPT (Radford et al., 2018) and BERT (Devlin et al., 2019). As shown\nin Figure 1, progress on GLUE since its release has been striking. On GLUE, GPT and BERT\nachieved scores of 72.8 and 80.2 respectively, relative to 66.5 for an ELMo-based model (Peters\net al., 2018) and 63.7 for the strongest baseline with no multitask learning or pretraining above the\nword level. Recent models (Liu et al., 2019d; Yang et al., 2019) have clearly surpassed estimates of\nnon-expert human performance on GLUE (Nangia and Bowman, 2019). The success of these models\non GLUE has been driven by ever-increasing model capacity, compute power, and data quantity, as\nwell as innovations in model expressivity (from recurrent to bidirectional recurrent to multi-headed\ntransformer encoders) and degree of contextualization (from learning representation of words in\nisolation to using uni-directional contexts and ultimately to leveraging bidirectional contexts).\nIn parallel to work scaling up pretrained models, several studies have focused on complementary\nmethods for augmenting performance of pretrained models. Phang et al. (2018) show that BERT can\nbe improved using two-stage pretraining, i.e., ﬁne-tuning the pretrained model on an intermediate\ndata-rich supervised task before ﬁne-tuning it again on a data-poor target task. Liu et al. (2019d,c) and\nBach et al. (2018) get further improvements respectively via multi-task ﬁnetuning and using massive\namounts of weak supervision. Clark et al. (2019b) demonstrate that knowledge distillation (Hinton\net al., 2015; Furlanello et al., 2018) can lead to student networks that outperform their teachers.\nOverall, the quantity and ', 'and\nYejin Choi. 2019. Defending against neural fake\nnews. arXiv preprint arXiv:1905.12616 .\nYukun Zhu, Ryan Kiros, Richard Zemel, Ruslan\nSalakhutdinov, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Aligning books and movies:\nTowards story-like visual explanations by watch-\ning movies and reading books. In arXiv preprint\narXiv:1506.06724 .\nAppendix for “RoBERTa: A Robustly\nOptimized BERT Pretraining Approach”\nA Full results on GLUE\nIn Table 8we present the full set of development\nset results for RoBERTa. We present results for\naLARGE conﬁguration that follows BERT LARGE ,\nas well as a BASE conﬁguration that follows\nBERT BASE.B Pretraining Hyperparameters\nTable 9describes the hyperparameters for pre-\ntraining of RoBERTa LARGE and RoBERTa BASE\nC Finetuning Hyperparameters\nFinetuning hyperparameters for RACE, SQuAD\nand GLUE are given in Table 10. We select the\nbest hyperparameter values based on the median\nof 5 random seeds for each task.\x0cMNLI QNLI QQP RTE SST MRPC CoLA STS\nRoBERTa BASE\n+ all data + 500k steps 87.6 92.8 91.9 78.7 94.8 90.2 63.6 91.2\nRoBERTa LARGE\nwith B OOKS + W IKI 89.0 93.9 91.9 84.5 95.3 90.2 66.3 91.6\n+ additional data ( §3.2) 89.3 94.0 92.0 82.7 95.6 91.4 66.1 92.2\n+ pretrain longer 300k 90.0 94.5 92.2 83.3 96.1 91.1 67.4 92.3\n+ pretrain longer 500k 90.2 94.7 92.2 86.6 96.4 90.9 68.0 92.4\nTable 8: Development set results on GLUE tasks for various co nﬁgurations of RoBERTa.\nHyperparam RoBERTa LARGE RoBERTa BASE\nNumber of Layers 24 12\nHidden size 1024 768\nFFN inner hidden size 4096 3072\nAttention heads 16 12\nAttention head size 64 64\nDropout 0.1 0.1\nAttention Dropout 0.1 0.1\nWarmup Steps 30k 24k\nPeak Learning Rate 4e-4 6e-4\nBatch Size 8k 8k\nWeight Decay 0.01 0.01\nMax Steps 500k 500k\nLearning Rate Decay Linear Linear\nAdamǫ 1e-6 1e-6\nAdamβ1 0.9 0.9\nAdamβ2 0.98 ']","RoBERTa surpasses BERT and establishes new state-of-the-art performance on the GLUE benchmark, particularly excelling in tasks like MNLI, QNLI, RTE, and STS-B. This achievement underscores the effectiveness of RoBERTa's optimizations and its capacity to better understand and process natural language.","RoBERTa outperforms BERT and other models on the GLUE benchmark, particularly in terms of state-of-the-art achievements. It achieves higher scores on various tasks compared to BERT, showing significant improvements in performance.",1.0,1.0,0.8737837076187134
How should future language model benchmarks be structured to ensure a holistic assessment of models' capabilities and knowledge breadth?,"['shows that by performing such an analysis, one can\nhelp elucidate the successes and failures of existing models,\nas well as help to identify possible paths forward to improve\ntoday’s systems.\nAcknowledgements\nWe thank Sewon Min, Sameer Singh, Katherine Lee, and\nthe members of UNC NLP for their valuable feedback. Eric\nWallace is supported by the Apple Scholars in AI/ML Fel-\nlowship. This work was supported by NSF-AI Engage Insti-\ntute DRL-2112635.\nReferences\nAky¨urek, E., Bolukbasi, T., Liu, F., Xiong, B., Tenney, I.,\nAndreas, J., and Guu, K. Tracing knowledge in language\nmodels back to the training data. In Findings of EMNLP ,\n2022.\nBlack, S., Leo, G., Wang, P., Leahy, C., and Biderman, S.\nGPT-Neo: Large Scale Autoregressive Language Model-\ning with Mesh-Tensorflow, 2021.\nBlack, S., Biderman, S., Hallahan, E., Anthony, Q., Gao,\nL., Golding, L., He, H., Leahy, C., McDonell, K., Phang,\nJ., et al. GPT-Neox-20B: An open-source autoregressive\nlanguage model. arXiv preprint arXiv:2204.06745 , 2022.\nBrown, T., Mann, B., Ryder, N., Subbiah, M., Kaplan, J. D.,\nDhariwal, P., Neelakantan, A., Shyam, P., Sastry, G.,\nAskell, A., et al. Language models are few-shot learners.\nInNeurIPS , 2020.\nCarlini, N., Liu, C., Erlingsson, ´U., Kos, J., and Song,\nD. The secret sharer: Evaluating and testing unintended\nmemorization in neural networks. In USENIX Security\nSymposium , 2019.\nCarlini, N., Tramer, F., Wallace, E., Jagielski, M., Herbert-\nV oss, A., Lee, K., Roberts, A., Brown, T., Song, D.,\nErlingsson, U., Oprea, A., and Raffel, C. Extracting\ntraining data from large language models. In USENIX\nSecurity Symposium , 2021.\nDe Cao, N., Izacard, G., Riedel, S., and Petroni, F. Autore-\ngressive entity retrieval. In ICLR , 2021.Elazar, Y ., Kassner, N., Ravfogel, S., Feder, A., Ravichan-\nder, A., Mosbach, M., Belinkov, Y ., Sch ¨utze, ', 'a year since the release of SuperGLUE, performance is again essentially human-level\n(Raffel et al., 2019). While these benchmarks evaluate linguistic skills more than overall language\nunderstanding, an array of commonsense benchmarks have been proposed to measure basic reasoning\nand everyday knowledge (Zellers et al., 2019; Huang et al., 2019; Bisk et al., 2019). However, these\nrecent benchmarks have similarly seen rapid progress (Khashabi et al., 2020). Overall, the near\nhuman-level performance on these benchmarks suggests that they are not capturing important facets\nof language understanding.\nTransformer models have driven this recent progress by pretraining on massive text corpora, including\nall of Wikipedia, thousands of books, and numerous websites. These models consequently see\nextensive information about specialized topics, most of which is not assessed by existing NLP\nbenchmarks. It consequently remains an open question just how capable current language models are\nat learning and applying knowledge from many domains.\nTo bridge the gap between the wide-ranging knowledge that models see during pretraining and the\nexisting measures of success, we introduce a new benchmark for assessing models across a diverse\nset of subjects that humans learn. We design the benchmark to measure knowledge acquired during\npretraining by evaluating models exclusively in zero-shot and few-shot settings. This makes the\nbenchmark more challenging and more similar to how we evaluate humans. The benchmark covers\n57subjects across STEM, the humanities, the social sciences, and more. It ranges in difﬁculty from\nan elementary level to an advanced professional level, and it tests both world knowledge and problem\nsolving ability. Subjects range from traditional areas, such as mathematics and history, to more\n1arXiv:2009.03300v3 [cs.CY] 12 Jan 2021\x0cPublished as a conference paper at ', '2014).\nChelba et al. (2013) introduced the One Billion\nWord benchmark, a large scale training dataset to\nmeasure the progress of language models.\nIn the context of neural language models, Joze-\nfowicz et al. (2016) obtained state-of-the-art re-\nsults on the Billion Word benchmark by scaling\nLSTMs to 1 billion parameters. Later, scaling\ntransformers lead to improvement on many NLP\ntasks. Notable models include BERT (Devlin et al.,\n2018), GPT-2 (Radford et al., 2019), Megatron-\nLM (Shoeybi et al., 2019), and T5 (Raffel et al.,\n2020). A signiﬁcant breakthrough was obtained\nwith GPT-3 (Brown et al., 2020), a model with\n175 billion parameters. This lead to a series of\nLarge Language Models , such as Jurassic-1 (Lieber\net al., 2021), Megatron-Turing NLG (Smith et al.,2022), Gopher (Rae et al., 2021), Chinchilla (Hoff-\nmann et al., 2022), PaLM (Chowdhery et al., 2022),\nOPT (Zhang et al., 2022), and GLM (Zeng et al.,\n2022). Hestness et al. (2017) and Rosenfeld et al.\n(2019) studied the impact of scaling on the perfor-\nmance of deep learning models, showing the exis-\ntence of power laws between the model and dataset\nsizes and the performance of the system. Kaplan\net al. (2020) derived power laws speciﬁcally for\ntransformer based language models, which were\nlater reﬁned by Hoffmann et al. (2022), by adapting\nthe learning rate schedule when scaling datasets.\nFinally, Wei et al. (2022) studied the effect of scal-\ning on the abilities of large language models.\n8 Conclusion\nIn this paper, we presented a series of language\nmodels that are released openly, and competitive\nwith state-of-the-art foundation models. Most\nnotably, LLaMA-13B outperforms GPT-3 while\nbeing more than 10 ×smaller, and LLaMA-65B is\ncompetitive with Chinchilla-70B and PaLM-540B.\nUnlike previous studies, we show that it is possible\nto achieve ']","Future benchmarks should integrate a broader spectrum of subjects and cognitive skills, emphasizing the inclusion of tasks that test models' ethical reasoning, understanding of human values, and ability to perform complex problem-solving, beyond the mere scale of data and parameters.","Future language model benchmarks should be structured to assess models across a diverse set of subjects that humans learn, covering a wide range of topics across STEM, the humanities, the social sciences, and more. The benchmarks should range in difficulty from elementary to advanced professional levels and test both world knowledge and problem-solving ability. Additionally, benchmarks should evaluate models exclusively in zero-shot and few-shot settings to make them more challenging and similar to how we evaluate humans. This approach will help ensure a more holistic assessment of models' capabilities and knowledge breadth.",1.0,1.0,0.6042898297309875
How does DetectGPT's approach to machine-generated text detection differ from previous zero-shot methods?,"['al.,\n2023) may further improve the effectiveness of methods\nsuch as DetectGPT, even as LLMs continue to improve.\nLimitations. One limitation of probability-based methods\nfor zero-shot machine-generated text detection (like Detect-\nGPT) is the white-box assumption that we can evaluate log\nprobabilities of the model(s) in question. For models be-\nhind APIs that do provide probabilities (such as GPT-3),\nevaluating probabilities nonetheless costs money. Another\nassumption of DetectGPT is access to a reasonable pertur-\nbation function. While in this work, we use off-the-shelf\nmask-filling models such as T5 and mT5 (for non-English\nlanguages), some domains may see reduced performance\nif existing mask-filling models do not well represent the\nspace of meaningful rephrases, reducing the quality of the\ncurvature estimate. While DetectGPT provides the best\navailable detection performance for PubMedQA, its drop\nin performance compared to other datasets may be a result\nAverage length0.9850.9900.995AUROC\ngpt-2\nAverage length0.960.970.980.99AUROC\nopt-2.7\nXSum\nSQuAD\nWritingPrompts\n130 140 150 160 170\nAverage length0.8750.9000.9250.9500.975AUROC\nEleutherAI/gpt-j-6b\n130 140 150 160 170\nAverage length0.70.80.9AUROC\nEleutherAI/gpt-neox-20bFigure 10. DetectGPT AUROC vs passage length. The relation-\nship between detection performance and passage length generally\ndepends on the dataset and model (or tokenizer). Decreases in\ndetection quality with increasing length may be due to T5 failing\nto track many (20+) masks to fill at once; this problem may be\nmitigated by applying mask-fills in a sequence of smaller batches.\nof lower quality perturbations. Finally, DetectGPT is more\ncompute-intensive than other methods for detection, as it\nrequires sampling and scoring the set of perturbations for\neach candidate passage, rather than just the candidate pas-\nsage; a better tuned perturbation function or more efficient\ncurvature approximation may help mitigate these costs.\nFuture Work. While the methods in this work make no\nassumptions about the models generating the samples, fu-\nture work may explore how watermarking ', 'has spawned substantial ef-\nforts in detection of fake visual content (Dolhansky et al.,\n2020; Zi et al., 2020). While early works in deepfake de-\ntection used relatively general-purpose model architectures\n(G¨uera & Delp, 2018), many deepfake detection methods\nrely on the continuous nature of image data to achieve state-\nof-the-art performance (Zhao et al., 2021; Guarnera et al.,\n2020), making direct application to text difficult.\n3. The Zero-Shot Machine-Generated Text\nDetection Problem\nWe study zero-shot machine-generated text detection, the\nproblem of detecting whether a piece of text, or candidate\npassage x, is a sample from a source model pθ. The problem\nis zero-shot in the sense that we do not assume access to\nhuman-written or generated samples to perform detection.\nAs in prior work, we study a ‘white box’ setting (Gehrmann\net al., 2019) in which the detector may evaluate the log prob-Algorithm 1 DetectGPT model-generated text detection\n1:Input: passage x, source model pθ, perturbation function q,\nnumber of perturbations k, decision threshold ϵ\n2:˜xi∼q(· |x), i∈[1..k]// mask spans, sample replacements\n3:˜µ←1\nkP\nilogpθ(˜xi)// approximate expectation in Eq. 1\n4:ˆdx←logpθ(x)−˜µ // estimate d(x, pθ, q)\n5:˜σ2\nx←1\nk−1P\ni(logpθ(˜xi)−˜µ)2// variance for normalization\n6:ifˆdx√˜σx> ϵthen\n7: return true // probably model sample\n8:else\n9: return false // probably not model sample\nability of a sample logpθ(x). The white box setting does\nnotassume access to the model architecture or parameters.\nMost public APIs for LLMs (such as GPT-3) enable scoring\ntext, though some exceptions exist, notably ChatGPT. While\nmost of our experiments consider the white box setting, see\nSection 5.2 for experiments in which we score text using\nmodels other than the source model. See Mireshghallah\net al. (2023) for a comprehensive evaluation in this setting.\nThe detection criterion we propose, DetectGPT, also makes\nuse of generic pre-trained ', 'the slash).\nand the average margin of improvement is narrow.4For 14\nof the 15 combinations of dataset and model, DetectGPT\nprovides the most accurate detection performance, with a\n0.06 AUROC improvement on average. Log-rank threshold-\ning proves to be a consistently stronger baseline than log\nprobability thresholding, although it requires slightly more\ninformation (full predicted logits), which are not always\navailable in public APIs.\nComparison with supervised detectors. While our experi-\nments generally focus on zero-shot detection, some works\nhave evaluated the detection performance of supervised\nmethods (typically fine-tuned transformers) for detecting\nmachine-generated text. In this section, we explore several\ndomains to better understand the relative strengths of super-\nvised and zero-shot detectors. The results are presented in\nFigure 4, using 200 samples from each dataset for evalua-\ntion. We find that supervised detectors can provide similar\ndetection performance to DetectGPT on in-distribution data\nlike English news, but perform significantly worse than zero-\nshot methods in the case of English scientific writing and\nfail altogether for German writing. This finding echoes past\nwork showing that language models trained for machine-\ngenerated text detection overfit to their training data (source\nmodel, decoding strategy, topic, language, etc.; Uchendu\net al. (2020); Ippolito et al. (2020); Jawahar et al. (2020)).\nIn contrast, zero-shot methods generalize relatively easily\nto new languages and domains; DetectGPT’s performance\nin particular is mostly unaffected by the change in language\nfrom English to German.\nWhile our experiments have shown that DetectGPT is ef-\nfective on a variety of domains and models, it is natural to\nwonder if it is effective for the largest publicly-available\nLMs. Therefore, we also evaluate multiple zero-shot and su-\npervised methods on two 175B parameter models, OpenAI’s\nGPT-3 and AI21 Labs’ Jurassic-2 Jumbo. Because neither\nAPI provides ']","Previous zero-shot methods mainly relied on evaluating the average per-token log probability of generated text, whereas DetectGPT assesses the local structure around a passage through log probability curvature.",DetectGPT's approach to machine-generated text detection differs from previous zero-shot methods by using a white-box setting where the detector may evaluate the log probability of a sample without assuming access to the model architecture or parameters. Previous methods may have evaluated the detection performance of supervised methods (typically fine-tuned transformers) instead of zero-shot methods like DetectGPT.,1.0,1.0,0.8078805208206177
"What percentage of BERT's language understanding capabilities does DistilBERT retain, and what is the size reduction achieved?","['by two BiLSTMs.4\nThe results on each of the 9 tasks are showed on Table 1 along with the macro-score (average of\nindividual scores). Among the 9 tasks, DistilBERT is always on par or improving over the ELMo\nbaseline (up to 19 points of accuracy on STS-B). DistilBERT also compares surprisingly well to\nBERT, retaining 97% of the performance with 40% fewer parameters.\n4.1 Downstream task benchmark\nDownstream tasks We further study the performances of DistilBERT on several downstream tasks\nunder efﬁcient inference constraints: a classiﬁcation task (IMDb sentiment classiﬁcation - Maas et al.\n[2011]) and a question answering task (SQuAD v1.1 - Rajpurkar et al. [2016]).\nAs shown in Table 2, DistilBERT is only 0.6% point behind BERT in test accuracy on the IMDb\nbenchmark while being 40% smaller. On SQuAD, DistilBERT is within 3.9 points of the full BERT.\nWe also studied whether we could add another step of distillation during the adaptation phase by\nﬁne-tuning DistilBERT on SQuAD using a BERT model previously ﬁne-tuned on SQuAD as a\n4We use jiant [Wang et al., 2019] to compute the baseline.\n3\x0cTable 4: Ablation study. Variations are relative to the model trained with triple loss and teacher\nweights initialization.\nAblation Variation on GLUE macro-score\n∅-Lcos-Lmlm -2.96\nLce-∅-Lmlm -1.46\nLce-Lcos-∅ -0.31\nTriple loss + random weights initialization -3.69\nteacher for an additional term in the loss (knowledge distillation). In this setting, there are thus two\nsuccessive steps of distillation, one during the pre-training phase and one during the adaptation phase.\nIn this case, we were able to reach interesting performances given the size of the model: 79.8 F1 and\n70.4 EM, i.e. within 3 points of the full model.\nSize and ', 'DistilBERT, a distilled version of BERT: smaller,\nfaster, cheaper and lighter\nVictor SANH, Lysandre DEBUT, Julien CHAUMOND, Thomas WOLF\nHugging Face\n{victor,lysandre,julien,thomas}@huggingface.co\nAbstract\nAs Transfer Learning from large-scale pre-trained models becomes more prevalent\nin Natural Language Processing (NLP), operating these large models in on-the-\nedge and/or under constrained computational training or inference budgets remains\nchallenging. In this work, we propose a method to pre-train a smaller general-\npurpose language representation model, called DistilBERT, which can then be ﬁne-\ntuned with good performances on a wide range of tasks like its larger counterparts.\nWhile most prior work investigated the use of distillation for building task-speciﬁc\nmodels, we leverage knowledge distillation during the pre-training phase and show\nthat it is possible to reduce the size of a BERT model by 40%, while retaining 97%\nof its language understanding capabilities and being 60% faster. To leverage the\ninductive biases learned by larger models during pre-training, we introduce a triple\nloss combining language modeling, distillation and cosine-distance losses. Our\nsmaller, faster and lighter model is cheaper to pre-train and we demonstrate its\ncapabilities for on-device computations in a proof-of-concept experiment and a\ncomparative on-device study.\n1 Introduction\nFigure 1: Parameter counts of several recently released\npretrained language models.The last two years have seen the rise\nof Transfer Learning approaches in\nNatural Language Processing (NLP)\nwith large-scale pre-trained language\nmodels becoming a basic tool in\nmany NLP tasks [Devlin et al., 2018,\nRadford et al., 2019, Liu et al., 2019].\nWhile these models lead to signiﬁ-\ncant improvement, they often have\nseveral hundred million parameters\nand current research1on pre-trained\nmodels indicates that training even\nlarger models still leads to better per-\nformances on downstream tasks.\nThe trend toward bigger models\nraises several concerns. First is the\nenvironmental cost of exponentially ', 'yields to comparable\nperformance on downstream tasks. Com-\nparison on downstream tasks: IMDb (test ac-\ncuracy) and SQuAD 1.1 (EM/F1 on dev set).\nD: with a second step of distillation during\nﬁne-tuning.\nModel IMDb SQuAD\n(acc.) (EM/F1)\nBERT-base 93.46 81.2/88.5\nDistilBERT 92.82 77.7/85.8\nDistilBERT (D) - 79.1/86.9Table 3: DistilBERT is signiﬁcantly smaller\nwhile being constantly faster. Inference\ntime of a full pass of GLUE task STS-B (sen-\ntiment analysis) on CPU with a batch size of\n1.\nModel # param. Inf. time\n(Millions) (seconds)\nELMo 180 895\nBERT-base 110 668\nDistilBERT 66 410\nDistillation We applied best practices for training BERT model recently proposed in Liu et al. [2019].\nAs such, DistilBERT is distilled on very large batches leveraging gradient accumulation (up to 4K\nexamples per batch) using dynamic masking and without the next sentence prediction objective.\nData and compute power We train DistilBERT on the same corpus as the original BERT model:\na concatenation of English Wikipedia and Toronto Book Corpus [Zhu et al., 2015]. DistilBERT\nwas trained on 8 16GB V100 GPUs for approximately 90 hours. For the sake of comparison, the\nRoBERTa model [Liu et al., 2019] required 1 day of training on 1024 32GB V100.\n4 Experiments\nGeneral Language Understanding We assess the language understanding and generalization ca-\npabilities of DistilBERT on the General Language Understanding Evaluation (GLUE) benchmark\n[Wang et al., 2018], a collection of 9 datasets for evaluating natural language understanding systems.\nWe report scores on the development sets for each task by ﬁne-tuning DistilBERT without the use\nof ensembling or multi-tasking scheme for ﬁne-tuning (which are mostly orthogonal to the present\nwork). We compare the results to the baseline provided by the authors of GLUE: an ELMo (Peters\net al. [2018]) encoder followed ']",DistilBERT retains 97% of BERT's language understanding capabilities with a 40% reduction in size.,DistilBERT retains 97% of BERT's language understanding capabilities and achieves a 40% size reduction.,0.75,1.0,0.9858813285827637
"What datasets and computational resources were used to train DistilBERT, and how do they compare to the original BERT training setup?","['by two BiLSTMs.4\nThe results on each of the 9 tasks are showed on Table 1 along with the macro-score (average of\nindividual scores). Among the 9 tasks, DistilBERT is always on par or improving over the ELMo\nbaseline (up to 19 points of accuracy on STS-B). DistilBERT also compares surprisingly well to\nBERT, retaining 97% of the performance with 40% fewer parameters.\n4.1 Downstream task benchmark\nDownstream tasks We further study the performances of DistilBERT on several downstream tasks\nunder efﬁcient inference constraints: a classiﬁcation task (IMDb sentiment classiﬁcation - Maas et al.\n[2011]) and a question answering task (SQuAD v1.1 - Rajpurkar et al. [2016]).\nAs shown in Table 2, DistilBERT is only 0.6% point behind BERT in test accuracy on the IMDb\nbenchmark while being 40% smaller. On SQuAD, DistilBERT is within 3.9 points of the full BERT.\nWe also studied whether we could add another step of distillation during the adaptation phase by\nﬁne-tuning DistilBERT on SQuAD using a BERT model previously ﬁne-tuned on SQuAD as a\n4We use jiant [Wang et al., 2019] to compute the baseline.\n3\x0cTable 4: Ablation study. Variations are relative to the model trained with triple loss and teacher\nweights initialization.\nAblation Variation on GLUE macro-score\n∅-Lcos-Lmlm -2.96\nLce-∅-Lmlm -1.46\nLce-Lcos-∅ -0.31\nTriple loss + random weights initialization -3.69\nteacher for an additional term in the loss (knowledge distillation). In this setting, there are thus two\nsuccessive steps of distillation, one during the pre-training phase and one during the adaptation phase.\nIn this case, we were able to reach interesting performances given the size of the model: 79.8 F1 and\n70.4 EM, i.e. within 3 points of the full model.\nSize and ', 'yields to comparable\nperformance on downstream tasks. Com-\nparison on downstream tasks: IMDb (test ac-\ncuracy) and SQuAD 1.1 (EM/F1 on dev set).\nD: with a second step of distillation during\nﬁne-tuning.\nModel IMDb SQuAD\n(acc.) (EM/F1)\nBERT-base 93.46 81.2/88.5\nDistilBERT 92.82 77.7/85.8\nDistilBERT (D) - 79.1/86.9Table 3: DistilBERT is signiﬁcantly smaller\nwhile being constantly faster. Inference\ntime of a full pass of GLUE task STS-B (sen-\ntiment analysis) on CPU with a batch size of\n1.\nModel # param. Inf. time\n(Millions) (seconds)\nELMo 180 895\nBERT-base 110 668\nDistilBERT 66 410\nDistillation We applied best practices for training BERT model recently proposed in Liu et al. [2019].\nAs such, DistilBERT is distilled on very large batches leveraging gradient accumulation (up to 4K\nexamples per batch) using dynamic masking and without the next sentence prediction objective.\nData and compute power We train DistilBERT on the same corpus as the original BERT model:\na concatenation of English Wikipedia and Toronto Book Corpus [Zhu et al., 2015]. DistilBERT\nwas trained on 8 16GB V100 GPUs for approximately 90 hours. For the sake of comparison, the\nRoBERTa model [Liu et al., 2019] required 1 day of training on 1024 32GB V100.\n4 Experiments\nGeneral Language Understanding We assess the language understanding and generalization ca-\npabilities of DistilBERT on the General Language Understanding Evaluation (GLUE) benchmark\n[Wang et al., 2018], a collection of 9 datasets for evaluating natural language understanding systems.\nWe report scores on the development sets for each task by ﬁne-tuning DistilBERT without the use\nof ensembling or multi-tasking scheme for ﬁne-tuning (which are mostly orthogonal to the present\nwork). We compare the results to the baseline provided by the authors of GLUE: an ELMo (Peters\net al. [2018]) encoder followed ', 'ELMo,\nOpenAI GPT and BERT. The comparisons be-\ntween the model architectures are shown visually\nin Figure 3. Note that in addition to the architec-\nture differences, BERT and OpenAI GPT are ﬁne-\ntuning approaches, while ELMo is a feature-based\napproach.\nThe most comparable existing pre-training\nmethod to BERT is OpenAI GPT, which trains a\nleft-to-right Transformer LM on a large text cor-\npus. In fact, many of the design decisions in BERT\nwere intentionally made to make it as close to\nGPT as possible so that the two methods could be\nminimally compared. The core argument of this\nwork is that the bi-directionality and the two pre-\ntraining tasks presented in Section 3.1 account for\nthe majority of the empirical improvements, but\nwe do note that there are several other differences\nbetween how BERT and GPT were trained:\n• GPT is trained on the BooksCorpus (800M\nwords); BERT is trained on the BooksCor-\npus (800M words) and Wikipedia (2,500M\nwords).\n• GPT uses a sentence separator ( [SEP] ) and\nclassiﬁer token ( [CLS] ) which are only in-\ntroduced at ﬁne-tuning time; BERT learns\n[SEP] ,[CLS] and sentence A/Bembed-\ndings during pre-training.\n• GPT was trained for 1M steps with a batch\nsize of 32,000 words; BERT was trained for\n1M steps with a batch size of 128,000 words.\n• GPT used the same learning rate of 5e-5 for\nall ﬁne-tuning experiments; BERT chooses a\ntask-speciﬁc ﬁne-tuning learning rate which\nperforms the best on the development set.To isolate the effect of these differences, we per-\nform ablation experiments in Section 5.1 which\ndemonstrate that the majority of the improvements\nare in fact coming from the two pre-training tasks\nand the bidirectionality they enable.\nA.5 Illustrations of Fine-tuning on Different\nTasks\nThe illustration of ﬁne-tuning BERT ']","DistilBERT was trained on the same English Wikipedia and Toronto Book Corpus as BERT, using 8 NVIDIA V100 GPUs for approximately 90 hours, showcasing efficient resource use compared to larger models.","DistilBERT was trained on the same corpus as the original BERT model: a concatenation of English Wikipedia and Toronto Book Corpus. It was trained on 8 16GB V100 GPUs for approximately 90 hours. In comparison, the RoBERTa model required 1 day of training on 1024 32GB V100 GPUs.",1.0,1.0,0.8182450532913208
"What findings were revealed about model performance on HellaSwag when evaluated in zero-shot scenarios, and what implications does this have for future model development?","['Yun,\nJack Merullo, and Aaron Traylor for comments and\ndiscussions on early drafts of this paper. Special\nthanks to Victor, Colin, and Teven for technical\nclariﬁcations and code review.\nFurthermore, Albert is indebted to Colin and\nSasha for their patience on the many iterations of\nthe zero-shot Figure 5 as well as invaluable men-\ntorship throughout the T0 project.\nReferences\nJonathan Bragg, Arman Cohan, Kyle Lo, and Iz Belt-\nagy. 2021. FLEX: Unifying evaluation for few-shot\nNLP. ArXiv preprint , abs/2107.07170.\nTom B. Brown, Benjamin Mann, Nick Ryder, Melanie\nSubbiah, Jared Kaplan, Prafulla Dhariwal, Arvind\nNeelakantan, Pranav Shyam, Girish Sastry, Amanda\nAskell, Sandhini Agarwal, Ariel Herbert-V oss,\nGretchen Krueger, Tom Henighan, Rewon Child,\nAditya Ramesh, Daniel M. Ziegler, Jeffrey Wu,\nClemens Winter, Christopher Hesse, Mark Chen,\nEric Sigler, Mateusz Litwin, Scott Gray, Benjamin\nChess, Jack Clark, Christopher Berner, Sam Mc-\nCandlish, Alec Radford, Ilya Sutskever, and Dario\nAmodei. 2020. Language models are few-shot learn-\ners. In Advances in Neural Information Processing\nSystems 33: Annual Conference on Neural Informa-\ntion Processing Systems 2020, NeurIPS 2020, De-\ncember 6-12, 2020, virtual .\nIdo Dagan, Oren Glickman, and Bernardo Magnini.\n2006. The pascal recognising textual entailment\nchallenge. In Machine Learning Challenges Work-\nshop , pages 177–190. Springer.\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and\nKristina Toutanova. 2019. BERT: Pre-training of\ndeep bidirectional transformers for language under-\nstanding. In Proceedings of the 2019 Conference\nof the North American Chapter of the Association\nfor Computational Linguistics: Human Language\nTechnologies, Volume 1 (Long and Short Papers) ,\npages 4171–4186, Minneapolis, Minnesota. Associ-\nation for Computational Linguistics.\nStephen Ferrigno, Julian Jara-Ettinger, Steven T Pianta-\ndosi, and Jessica F Cantlon. 2017. Universal and\nuniquely human factors in spontaneous number per-\nception. Nature communications , 8(1):1–10.Leo Gao, Jonathan Tow, Stella Biderman, Sid Black,\nAnthony DiPoﬁ, Charles Foster, Laurence Gold-\ning, Jeffrey ', 'GPT-3 175B and even PaLM 540B (4 ×larger) in\nzero-shot setting. This is probably owing to GLM-130B’s bidirectional context attention and MIP,\nwhich has been proved to improve zero-shot results in unseen tasks (Wei et al., 2022a; Sanh et al.,\n2022). As the number of shots increases, GLM-130B’s performance keeps going up, maintaining its\noutperformance over GPT-3 (Cf. Appendix C.5 and Table 14 for details on each model and task).\nLimitations and Discussions. In the experiments above, we observe that GLM-130B’s performance\ngrowth (13.31 to 15.12) with the increase of few-shot samples is not as significant as GPT-3’s (4.35\nto 13.18). Here is our intuitive attempt to understand the phenomenon.\nFirst, the bidirectional nature of GLM-130B could lead to strong zero-shot performance (as is indi-\ncated in zero-shot language modeling), thus getting closer to the few-shot “upper-bound” for models\nof similar scale (i.e., 100B-scale) than unidirectional LLMs. Second, it may be also attributed to a\ndeficit of existing MIP paradigms (Wei et al., 2022a; Sanh et al., 2022), which only involve zero-shot\nprediction in the training and will be likely to bias GLM-130B for stronger zero-shot learning but\nrelatively weaker in-context few-shot performance. To correct the bias, a potential solution we came\nup with would be to employ MIP with varied shots of in-context samples rather than only zero-shot\nsamples.\nFinally, despite almost the same GPT architecture as GPT-3, PaLM 540B’s relative growth with few-\nshot in-context learning is substantially more significant than GPT-3’s. We conjecture this further\nacceleration in performance growth is a source of PaLM’s high-quality and diverse private-collected\ntraining corpora. By combining our experiences with (Hoffmann et al., 2022)’s insights, we came ', 'we\nconsider zero-shot and few-shot tasks, and report\nresults on a total of 20 benchmarks:\n•Zero-shot. We provide a textual description\nof the task and a test example. The model\neither provides an answer using open-ended\ngeneration, or ranks the proposed answers.\n•Few-shot. We provide a few examples of the\ntask (between 1 and 64) and a test example.\nThe model takes this text as input and gener-\nates the answer or ranks different options.\nWe compare LLaMA with other foundation mod-\nels, namely the non-publicly available language\nmodels GPT-3 (Brown et al., 2020), Gopher (Rae\net al., 2021), Chinchilla (Hoffmann et al., 2022)\nand PaLM (Chowdhery et al., 2022), as well as\nthe open-sourced OPT models (Zhang et al., 2022),\nGPT-J (Wang and Komatsuzaki, 2021), and GPT-\nNeo (Black et al., 2022). In Section 4, we also\nbrieﬂy compare LLaMA with instruction-tuned\nmodels such as OPT-IML (Iyer et al., 2022) and\nFlan-PaLM (Chung et al., 2022).We evaluate LLaMA on free-form generation\ntasks and multiple choice tasks. In the multiple\nchoice tasks, the objective is to select the most\nappropriate completion among a set of given op-\ntions, based on a provided context. We select the\ncompletion with the highest likelihood given the\nprovided context. We follow Gao et al. (2021)\nand use the likelihood normalized by the number\nof characters in the completion, except for certain\ndatasets (OpenBookQA, BoolQ), for which we fol-\nlow Brown et al. (2020), and select a completion\nbased on the likelihood normalized by the likeli-\nhood of the completion given “Answer:” as context:\nP(completion|context )/P(completion|“Answer :”).\n0-shot 1-shot 5-shot 64-shot\nGPT-3 175B 14.6 23.0 - 29.9\nGopher 280B 10.1 - 24.5 28.2\nChinchilla 70B 16.6 - 31.5 35.5\nPaLM8B 8.4 10.6 - 14.6\n62B 18.1 26.5 - 27.6\n540B 21.2 29.3 ']","Models showed a decline in performance in zero-shot scenarios, highlighting the need for future models to improve generalization capabilities and adapt to unseen contexts or domains.","The findings revealed that PaLM 540B outperformed GPT-3 175B and even PaLM 62B in zero-shot scenarios. This suggests that PaLM's high-quality and diverse private-collected training corpora significantly contributed to its relative growth with few-shot in-context learning. The implication for future model development is that the quality and diversity of training data play a crucial role in enhancing model performance, especially in zero-shot and few-shot scenarios.",1.0,1.0,0.5478958487510681
Describe RoBERTa's approach to training with large mini-batches and its effect on model optimization and performance.,"['0.98\nGradient Clipping 0.0 0.0\nTable 9: Hyperparameters for pretraining RoBERTa LARGE and RoBERTa BASE.\nHyperparam RACE SQuAD GLUE\nLearning Rate 1e-5 1.5e-5 {1e-5, 2e-5, 3e-5 }\nBatch Size 16 48 {16, 32}\nWeight Decay 0.1 0.01 0.1\nMax Epochs 4 2 10\nLearning Rate Decay Linear Linear Linear\nWarmup ratio 0.06 0.06 0.06\nTable 10: Hyperparameters for ﬁnetuning RoBERTa LARGE on RACE, SQuAD and GLUE.', 'RoBERTa is trained with dynamic mask-\ning (Section 4.1),FULL -SENTENCES without NSP\nloss (Section 4.2), large mini-batches (Section 4.3)\nand a larger byte-level BPE (Section 4.4).\nAdditionally, we investigate two other impor-\ntant factors that have been under-emphasized in\nprevious work: (1) the data used for pretraining,\nand (2) the number of training passes through the\ndata. For example, the recently proposed XLNet\narchitecture ( Yang et al. ,2019 ) is pretrained us-\ning nearly 10 times more data than the original\nBERT ( Devlin et al. ,2019 ). It is also trained with\na batch size eight times larger for half as many op-\ntimization steps, thus seeing four times as many\nsequences in pretraining compared to BERT.\nTo help disentangle the importance of these fac-\ntors from other modeling choices (e.g., the pre-\ntraining objective), we begin by training RoBERTa\nfollowing the BERT LARGE architecture ( L= 24 ,\nH= 1024 ,A= 16 , 355M parameters). We\npretrain for 100K steps over a comparable B OOK -\nCORPUS plus W IKIPEDIA dataset as was used in\x0cModel data bsz stepsSQuADMNLI-m SST-2(v1.1/2.0)\nRoBERTa\nwith B OOKS + W IKI 16GB 8K 100K 93.6/87.3 89.0 95.3\n+ additional data ( §3.2) 160GB 8K 100K 94.0/87.7 89.3 95.6\n+ pretrain longer 160GB 8K 300K 94.4/88.7 90.0 96.1\n+ pretrain even longer 160GB 8K 500K 94.6/89.4 90.2 96.4\nBERT LARGE\nwith B OOKS + W IKI 13GB 256 1M 90.9/81.8 86.6 93.7\nXLNet LARGE\nwith B OOKS + W IKI 13GB 256 1M 94.0/87.8 88.4 94.4\n+ additional data 126GB 2K 500K 94.5/88.8 89.8 95.6\nTable 4: Development set results for RoBERTa as we pretrain o ver more data (16GB →160GB of text) and pretrain\nfor longer (100K →300K→500K steps). Each row ', 'accumulates improvements from the row s above. RoBERTa\nmatches the architecture and training objective of BERT LARGE . Results for BERT LARGE and XLNet LARGE are from\nDevlin et al. (2019 ) and Yang et al. (2019 ), respectively. Complete results on all GLUE tasks can be fo und in the\nAppendix.\nDevlin et al. (2019 ). We pretrain our model using\n1024 V100 GPUs for approximately one day.\nResults We present our results in Table 4. When\ncontrolling for training data, we observe that\nRoBERTa provides a large improvement over the\noriginally reported BERT LARGE results, reafﬁrming\nthe importance of the design choices we explored\nin Section 4.\nNext, we combine this data with the three ad-\nditional datasets described in Section 3.2. We\ntrain RoBERTa over the combined data with the\nsame number of training steps as before (100K).\nIn total, we pretrain over 160GB of text. We ob-\nserve further improvements in performance across\nall downstream tasks, validating the importance of\ndata size and diversity in pretraining.9\nFinally, we pretrain RoBERTa for signiﬁcantly\nlonger, increasing the number of pretraining steps\nfrom 100K to 300K, and then further to 500K. We\nagain observe signiﬁcant gains in downstream task\nperformance, and the 300K and 500K step mod-\nels outperform XLNet LARGE across most tasks. We\nnote that even our longest-trained model does not\nappear to overﬁt our data and would likely beneﬁt\nfrom additional training.\nIn the rest of the paper, we evaluate our best\nRoBERTa model on the three different bench-\nmarks: GLUE, SQuaD and RACE. Speciﬁcally\n9Our experiments conﬂate increases in data size and di-\nversity. We leave a more careful analysis of these two dimen-\nsions to future work.we consider RoBERTa trained for 500K steps over\nall ']","RoBERTa's training with large mini-batches, significantly larger than those used for BERT, improves both optimization speed and end-task performance. This approach, facilitated by appropriate scaling of the learning rate, enables more efficient training and better generalization across tasks.","RoBERTa's approach to training with large mini-batches involves using dynamic masking, processing full sentences without NSP loss, and utilizing a larger byte-level BPE. This approach allows RoBERTa to train with larger batches, which results in seeing more sequences during pretraining. The large mini-batches help in optimizing the model by allowing for more efficient processing of data and gradients. This approach has a positive effect on model optimization and leads to improved performance across all downstream tasks. Additionally, training with large mini-batches helps RoBERTa outperform XLNet LARGE in most tasks, showcasing the effectiveness of this training approach on model performance.",1.0,1.0,0.8036133646965027
What findings does RoBERTa reveal about the efficacy of masked language model (MLM) pretraining under its optimized design choices?,"['RoBERTa is trained with dynamic mask-\ning (Section 4.1),FULL -SENTENCES without NSP\nloss (Section 4.2), large mini-batches (Section 4.3)\nand a larger byte-level BPE (Section 4.4).\nAdditionally, we investigate two other impor-\ntant factors that have been under-emphasized in\nprevious work: (1) the data used for pretraining,\nand (2) the number of training passes through the\ndata. For example, the recently proposed XLNet\narchitecture ( Yang et al. ,2019 ) is pretrained us-\ning nearly 10 times more data than the original\nBERT ( Devlin et al. ,2019 ). It is also trained with\na batch size eight times larger for half as many op-\ntimization steps, thus seeing four times as many\nsequences in pretraining compared to BERT.\nTo help disentangle the importance of these fac-\ntors from other modeling choices (e.g., the pre-\ntraining objective), we begin by training RoBERTa\nfollowing the BERT LARGE architecture ( L= 24 ,\nH= 1024 ,A= 16 , 355M parameters). We\npretrain for 100K steps over a comparable B OOK -\nCORPUS plus W IKIPEDIA dataset as was used in\x0cModel data bsz stepsSQuADMNLI-m SST-2(v1.1/2.0)\nRoBERTa\nwith B OOKS + W IKI 16GB 8K 100K 93.6/87.3 89.0 95.3\n+ additional data ( §3.2) 160GB 8K 100K 94.0/87.7 89.3 95.6\n+ pretrain longer 160GB 8K 300K 94.4/88.7 90.0 96.1\n+ pretrain even longer 160GB 8K 500K 94.6/89.4 90.2 96.4\nBERT LARGE\nwith B OOKS + W IKI 13GB 256 1M 90.9/81.8 86.6 93.7\nXLNet LARGE\nwith B OOKS + W IKI 13GB 256 1M 94.0/87.8 88.4 94.4\n+ additional data 126GB 2K 500K 94.5/88.8 89.8 95.6\nTable 4: Development set results for RoBERTa as we pretrain o ver more data (16GB →160GB of text) and pretrain\nfor longer (100K →300K→500K steps). Each row ', 'from\nKocijan et al. (2019 ). For a given input sentence,\nwe use spaCy ( Honnibal and Montani ,2017 ) to\nextract additional candidate noun phrases from the\nsentence and ﬁnetune our model so that it assigns\nhigher scores to positive referent phrases than for\nany of the generated negative candidate phrases.\nOne unfortunate consequence of this formulation\nis that we can only make use of the positive train-\ning examples, which excludes over half of the pro-\nvided training examples.10\n10While we only use the provided WNLI training data, ourResults We present our results in Table 5. In the\nﬁrst setting ( single-task, dev ), RoBERTa achieves\nstate-of-the-art results on all 9 of the GLUE\ntask development sets. Crucially, RoBERTa uses\nthe same masked language modeling pretrain-\ning objective and architecture as BERT LARGE , yet\nconsistently outperforms both BERT LARGE and\nXLNet LARGE . This raises questions about the rel-\native importance of model architecture and pre-\ntraining objective, compared to more mundane de-\ntails like dataset size and training time that we ex-\nplore in this work.\nIn the second setting ( ensembles, test ), we\nsubmit RoBERTa to the GLUE leaderboard and\nachieve state-of-the-art results on 4 out of 9 tasks\nand the highest average score to date. This is espe-\ncially exciting because RoBERTa does not depend\non multi-task ﬁnetuning, unlike most of the other\ntop submissions. We expect future work may fur-\nther improve these results by incorporating more\nsophisticated multi-task ﬁnetuning procedures.\n5.2 SQuAD Results\nWe adopt a much simpler approach for SQuAD\ncompared to past work. In particular, while\nboth BERT ( Devlin et al. ,2019 ) and XL-\nNet ( Yang et al. ,2019 ) augment their training data\nwith additional QA datasets, we ', 'In the following sections, we will\noutline some of the most pressing challenges that must\nbe addressed in order to facilitate further progress in the\ndevelopment of language models.\na) Emergent Ability: As described in the previous\nwork [87], emergent ability is defined as An ability is\nemergent if it is not present in smaller models but is\npresent in larger models.. From our diagnosis, we suc-\ncessfully identify a few unethical behaviors in ChatGPT\nthat were inadequately discussed in previous works, which\ncould be potentially be viewed as emergent risks. Kaplan\net al. [84] has confirmed that risks inside small language\nmodels can be further expanded in large ones due to\nthe model scales. On the basis of this finding, we add\nthat the model scales and the current trend of prompt-\ning training can exacerbate risks from all dimensions.\nThe main reason is that LLMs could be too feasible\nfrom the learning perspective. Firstly, these models are\nmore context-dependent, meaning that they are easily\nmanipulated by prompt injections. Although we agree\nthat some injected scenarios can be temporarily mitigated\nwith ad-hoc parameter tuning, there is no silver bullet to\navoid all risk concerns brought by prompting. Meanwhile,\nwe urge up-to-date benchmarks for measuring unfore-\nseen behaviors inside large language models. Without\nbenchmarking the emergent abilities, it could be hard to\nmitigate the risks and problems at scale. Secondly, we\nnote that larger language models are generally trained\nwith more data. Assuming the data is completely clean\nand informatively correct, language models will still fail to\nlearnallinformationandknowledge,andalsomaywrongly\ncorrelate information to each other. Furthermore, under\nthescopeofthefoundationmodels,multimodaldatacould\nbring the possibility of miscorrelation between different\nmodalities.\nb) Machine Learning Data: Our discussion lies in the\ncollection and usage of machine learning data. Previous\nstudy [88] ']","RoBERTa's findings reaffirm the efficacy of MLM pretraining, suggesting that with optimized design choices such as dynamic masking and training on extended sequences, MLM pretraining remains highly competitive with, or superior to, other recently proposed pretraining objectives.","RoBERTa consistently outperforms both BERT LARGE and XLNet LARGE, raising questions about the relative importance of model architecture and pretraining objective compared to mundane details like dataset size and training time that were explored in the study.",1.0,1.0,0.41973379254341125
Describe the triple loss used in DistilBERT's training and its components.,"['feature) contains\nabout the joint distribution pw(x,y) = ˆp(x)pw(y|x): If the\nclassiﬁcation performance for a given task does not depend\nstrongly a parameter, the corresponding entry in the FIM\nwill be small. The FIM is also related to the (Kolmogorov)\ncomplexity of a task, a property that can be used to de-\nﬁne a computable metric of the learning distance between\ntasks [3]. Finally, the FIM can be interpreted as an easy-to-\ncompute positive semideﬁnite upper-bound to the Hessian\nof the cross-entropy loss, and coincides with it at local min-\nima [24]. In particular, “ﬂat minima” correspond to weights\nthat have, on average, low (Fisher) information [5, 13].\x0c2.1. TASK 2VECembedding using a probe network\nWhile the network activations capture the information in\nthe input image which are needed to infer the image label,\nthe FIM indicates the set of feature maps which are more\ninformative for solving the current task. Following this in-\ntuition, we use the FIM to represent the task itself. How-\never, the FIMs computed on different networks are not di-\nrectly comparable. To address this, we use single “probe”\nnetwork pre-trained on ImageNet as a feature extractor and\nre-train only the classiﬁer layer on any given task, which\nusually can be done efﬁciently. After training is complete,\nwe compute the FIM for the feature extractor parameters.\nSince the full FIM is unmanageably large for rich probe\nnetworks based on CNNs, we make two additional approxi-\nmations. First, we only consider the diagonal entries, which\nimplicitly assumes that correlations between different ﬁlters\nin the probe network are not important. Second, since the\nweights in each ﬁlter are usually not independent, we aver-\nage the Fisher Information for all weights in the same ', 'of models.\nIn supervised learning, a classiﬁcation model is generally trained to predict an instance class by\nmaximizing the estimated probability of gold labels. A standard training objective thus involves\nminimizing the cross-entropy between the model’s predicted distribution and the one-hot empirical\ndistribution of training labels. A model performing well on the training set will predict an output\ndistribution with high probability on the correct class and with near-zero probabilities on other\nclasses. But some of these ""near-zero"" probabilities are larger than others and reﬂect, in part, the\ngeneralization capabilities of the model and how well it will perform on the test set3.\nTraining loss The student is trained with a distillation loss over the soft target probabilities of\nthe teacher: Lce=∑\niti∗log(si)where ti(resp. si) is a probability estimated by the teacher\n(resp. the student). This objective results in a rich training signal by leveraging the full teacher\ndistribution. Following Hinton et al. [2015] we used a softmax-temperature :pi=exp(zi/T)∑\njexp(zj/T)\nwhere Tcontrols the smoothness of the output distribution and ziis the model score for the class i.\nThe same temperature Tis applied to the student and the teacher at training time, while at inference,\nTis set to 1 to recover a standard softmax .\nThe ﬁnal training objective is a linear combination of the distillation loss Lcewith the supervised\ntraining loss, in our case the masked language modeling lossLmlm [Devlin et al., 2018]. We found it\nbeneﬁcial to add a cosine embedding loss (Lcos) which will tend to align the directions of the student\nand teacher hidden states vectors.\n3 DistilBERT: a distilled version of BERT\nStudent architecture In the present work, the student - DistilBERT - has ', 'DistilBERT, a distilled version of BERT: smaller,\nfaster, cheaper and lighter\nVictor SANH, Lysandre DEBUT, Julien CHAUMOND, Thomas WOLF\nHugging Face\n{victor,lysandre,julien,thomas}@huggingface.co\nAbstract\nAs Transfer Learning from large-scale pre-trained models becomes more prevalent\nin Natural Language Processing (NLP), operating these large models in on-the-\nedge and/or under constrained computational training or inference budgets remains\nchallenging. In this work, we propose a method to pre-train a smaller general-\npurpose language representation model, called DistilBERT, which can then be ﬁne-\ntuned with good performances on a wide range of tasks like its larger counterparts.\nWhile most prior work investigated the use of distillation for building task-speciﬁc\nmodels, we leverage knowledge distillation during the pre-training phase and show\nthat it is possible to reduce the size of a BERT model by 40%, while retaining 97%\nof its language understanding capabilities and being 60% faster. To leverage the\ninductive biases learned by larger models during pre-training, we introduce a triple\nloss combining language modeling, distillation and cosine-distance losses. Our\nsmaller, faster and lighter model is cheaper to pre-train and we demonstrate its\ncapabilities for on-device computations in a proof-of-concept experiment and a\ncomparative on-device study.\n1 Introduction\nFigure 1: Parameter counts of several recently released\npretrained language models.The last two years have seen the rise\nof Transfer Learning approaches in\nNatural Language Processing (NLP)\nwith large-scale pre-trained language\nmodels becoming a basic tool in\nmany NLP tasks [Devlin et al., 2018,\nRadford et al., 2019, Liu et al., 2019].\nWhile these models lead to signiﬁ-\ncant improvement, they often have\nseveral hundred million parameters\nand current research1on pre-trained\nmodels indicates that training even\nlarger models still leads to better per-\nformances on downstream tasks.\nThe trend toward bigger models\nraises several concerns. First is the\nenvironmental cost of exponentially ']","The triple loss in DistilBERT's training combines distillation loss (Lce), masked language modeling loss (Lmlm), and cosine embedding loss (Lcos), aiming to retain performance while reducing model size.","The triple loss used in DistilBERT's training consists of three components: language modeling, distillation, and cosine-distance losses. This triple loss is used during the pre-training phase of DistilBERT to reduce the size of the BERT model while still retaining 97% of its language understanding capabilities and being 60% faster.",1.0,1.0,0.8125609159469604
What advantages does DistilBERT present for on-device computations and mobile applications?,"['inference speed\nTo further investigate the speed-up/size trade-off of DistilBERT, we compare (in Table 3) the number\nof parameters of each model along with the inference time needed to do a full pass on the STS-\nB development set on CPU (Intel Xeon E5-2690 v3 Haswell @2.9GHz) using a batch size of 1.\nDistilBERT has 40% fewer parameters than BERT and is 60% faster than BERT.\nOn device computation We studied whether DistilBERT could be used for on-the-edge applications\nby building a mobile application for question answering. We compare the average inference time on\na recent smartphone (iPhone 7 Plus) against our previously trained question answering model based\non BERT-base. Excluding the tokenization step, DistilBERT is 71% faster than BERT, and the whole\nmodel weighs 207 MB (which could be further reduced with quantization). Our code is available5.\n4.2 Ablation study\nIn this section, we investigate the inﬂuence of various components of the triple loss and the student\ninitialization on the performances of the distilled model. We report the macro-score on GLUE. Table 4\npresents the deltas with the full triple loss: removing the Masked Language Modeling loss has little\nimpact while the two distillation losses account for a large portion of the performance.\n5 Related work\nTask-speciﬁc distillation Most of the prior works focus on building task-speciﬁc distillation se-\ntups. Tang et al. [2019] transfer ﬁne-tune classiﬁcation model BERT to an LSTM-based classiﬁer.\nChatterjee [2019] distill BERT model ﬁne-tuned on SQuAD in a smaller Transformer model previ-\nously initialized from BERT. In the present work, we found it beneﬁcial to use a general-purpose\npre-training distillation rather than a task-speciﬁc distillation. Turc et al. [2019] use ', 'studies of LLMs’ theory, capacity, and flaws. Researchers can also modify the\nmodel architecture and weights, to validate the proposed algorithms to improve LLMs Zhu et al.\n(2020); Cao et al. (2021); Hase et al. (2021); Mitchell et al. (2022).\nWith INT4 quantization, GLM-130B can perform inference on popularized GPUs such as 4 ×RTX\n3090 or 8 ×RTX 2080 Ti, which can be easily accessed from cloud service. As a result, researchers\nwho cannot afford powerful data-center GPU servers like DGX-A100 can also utilize GLM-130B.\nG.2 I MPACT ON INDIVIDUAL DEVELOPERS AND SMALL COMPANIES\nCurrently, individual developers and small companies who want to integrate LLMs into their busi-\nness can only choose paid inference APIs. The increased cost can hinder their attempts. Instead,\nGLM-130B can be deployed on popularized hardware that they own or can access via cloud service\nto reduce the cost. Furthermore, they can utilize distillation techniques Sanh et al. (2019); Jiao et al.\n(2020) to obtain smaller models that preserve comparable performance on their specific tasks. While\nsome developers may lack the ability to complete deployment and distillation on their own, we be-\nlieve with GLM-130B and more open LLMs in the future, the corresponding toolkits and service\nproviders will become more available.\nWe also note that currently most applications of LLMs are based on prompt engineering, partly\ndue to the limitation of inference APIs. In downstream scenarios such as online customer service,\nthe companies accumulate huge amounts of human-generated data that contain domain knowledge.\nWith the open-source weights and code, developers can finetune GLM-130B on their own data to\nmitigate the gap of domain knowledge.\nG.3 S OCIAL IMPACT\nLarge language models, together ', 'scaling these models’ computational requirements as mentioned\nin Schwartz et al. [2019], Strubell et al. [2019]. Second, while operating these models on-device\nin real-time has the potential to enable novel and interesting language processing applications, the\ngrowing computational and memory requirements of these models may hamper wide adoption.\n1See for instance the recently released MegatronLM ( https://nv-adlr.github.io/MegatronLM )\nEMC^2: 5th Edition Co-located with NeurIPS’19arXiv:1910.01108v4 [cs.CL] 1 Mar 2020\x0cIn this paper, we show that it is possible to reach similar performances on many downstream-tasks\nusing much smaller language models pre-trained with knowledge distillation, resulting in models\nthat are lighter and faster at inference time, while also requiring a smaller computational training\nbudget. Our general-purpose pre-trained models can be ﬁne-tuned with good performances on several\ndownstream tasks, keeping the ﬂexibility of larger models. We also show that our compressed models\nare small enough to run on the edge, e.g. on mobile devices.\nUsing a triple loss, we show that a 40% smaller Transformer (Vaswani et al. [2017]) pre-trained\nthrough distillation via the supervision of a bigger Transformer language model can achieve similar\nperformance on a variety of downstream tasks, while being 60% faster at inference time. Further\nablation studies indicate that all the components of the triple loss are important for best performances.\nWe have made the trained weights available along with the training code in the Transformers2\nlibrary from HuggingFace [Wolf et al., 2019].\n2 Knowledge distillation\nKnowledge distillation [Bucila et al., 2006, Hinton et al., 2015] is a compression technique in which\na compact model - the student - is trained to reproduce the behaviour of a larger model - the teacher -\nor an ensemble ']","DistilBERT's reduced size and faster inference capabilities make it highly suitable for on-device computations, demonstrated through a mobile application for question answering.","DistilBERT is 60% faster than BERT for on-device computations and mobile applications. It is also 71% faster than BERT excluding the tokenization step, making it more efficient for inference on mobile devices. Additionally, the whole model of DistilBERT weighs 207 MB, which could be further reduced with quantization, making it more lightweight and easier to deploy on mobile devices.",0.75,1.0,0.6246423721313477
"In what ways does HellaSwag expand upon its predecessor, SWAG, to offer a more rigorous test of AI commonsense reasoning?","['HellaSwag : Can a Machine Really Finish Your Sentence?\nRowan Zellers♠Ari Holtzman♠Yonatan Bisk♠Ali Farhadi♠♥Yejin Choi♠♥\n♠Paul G. Allen School of Computer Science & Engineering, University of Washington\n♥Allen Institute for Artiﬁcial Intelligence\nhttps://rowanzellers.com/hellaswag\nAbstract\nRecent work by Zellers et al. (2018) intro-\nduced a new task of commonsense natural lan-\nguage inference : given an event description\nsuch as “A woman sits at a piano,” a machine\nmust select the most likely followup: “She\nsets her ﬁngers on the keys.” With the intro-\nduction of BERT (Devlin et al., 2018), near\nhuman-level performance was reached. Does\nthis mean that machines can perform human\nlevel commonsense inference?\nIn this paper, we show that commonsense in-\nference still proves di ﬃcult for even state-\nof-the-art models, by presenting HellaSwag ,\na new challenge dataset. Though its ques-\ntions are trivial for humans ( ą95% accuracy),\nstate-of-the-art models struggle ( ă48%). We\nachieve this via Adversarial Filtering (AF), a\ndata collection paradigm wherein a series of\ndiscriminators iteratively select an adversarial\nset of machine-generated wrong answers. AF\nproves to be surprisingly robust. The key in-\nsight is to scale up the length and complex-\nity of the dataset examples towards a critical\n‘Goldilocks’ zone wherein generated text is\nridiculous to humans, yet often misclassiﬁed\nby state-of-the-art models.\nOur construction of HellaSwag , and its result-\ning di ﬃculty, sheds light on the inner work-\nings of deep pretrained models. More broadly,\nit suggests a new path forward for NLP re-\nsearch, in which benchmarks co-evolve with\nthe evolving state-of-the-art in an adversarial\nway, so as to present ever-harder challenges.\n1 Introduction\nImagine a woman chasing a dog around outside,\ntrying to give it a bath. What might happen next?\nHumans can read a narrative like this, shown in\nFigure 1, and connect ', 'Program\nInduction by Rationale Generation: Learning to Solve\nand Explain Algebraic Word Problems. arXiv preprint\narXiv:1705.04146 , 2017.Liu, P., Yuan, W., Fu, J., Jiang, Z., Hayashi, H., and Neubig,\nG. Pre-train, Prompt, and Predict: A Systematic Survey\nof Prompting Methods in Natural Language Processing.\narXiv preprint arXiv:2107.13586 , 2021.\nMadaan, A. and Yazdanbakhsh, A. Text and patterns: For\neffective chain of thought, it takes two to tango. arXiv\npreprint arXiv:2209.07686 , 2022.\nMadaan, A., Zhou, S., Alon, U., Yang, Y ., and Neubig, G.\nLanguage models of code are few-shot commonsense\nlearners. arXiv preprint arXiv:2210.07128 , 2022.\nMarcus, G. Deep learning: A critical appraisal. arXiv\npreprint arXiv:1801.00631 , 2018.\nMarcus, G. The next decade in ai: four steps towards robust\nartiﬁcial intelligence. arXiv preprint arXiv:2002.06177 ,\n2020.\nMiao, S.-y., Liang, C.-C., and Su, K.-Y . A diverse cor-\npus for evaluating and developing English math word\nproblem solvers. In Proceedings of the 58th Annual Meet-\ning of the Association for Computational Linguistics , pp.\n975–984, Online, July 2020. Association for Compu-\ntational Linguistics. doi: 10.18653/v1/2020.acl-main.\n92. URL https://aclanthology.org/2020.\nacl-main.92 .\nMishra, S., Finlayson, M., Lu, P., Tang, L., Welleck, S.,\nBaral, C., Rajpurohit, T., Tafjord, O., Sabharwal, A.,\nClark, P., and Kalyan, A. Lila: A uniﬁed benchmark\nfor mathematical reasoning. In Proceedings of the 2022\nConference on Empirical Methods in Natural Language\nProcessing (EMNLP) , 2022.\nNogueira, R., Jiang, Z., and Lin, J. Investigating the limita-\ntions of transformers with simple arithmetic tasks. arXiv\npreprint arXiv:2102.13019 , 2021.\nNye, M., Andreassen, A. J., Gur-Ari, G., Michalewski, H.,\nAustin, J., Bieber, D., Dohan, D., Lewkowycz, A., Bosma,\nM., Luan, D., Sutton, C., and Odena, A. Show your\nWork: Scratchpads for Intermediate Computation with\nLanguage Models. arXiv preprint arXiv:2112.00114 ,\n2021.\nPatel, A., Bhattamishra, S., and Goyal, N. Are ', 'Dai, Hongkun Yu, Slav Petrov, Ed Huai\nhsin Chi, Jeff Dean, Jacob Devlin, Adam Roberts,\nDenny Zhou, Quoc Le, and Jason Wei. 2022. Scal-\ning instruction-ﬁnetuned language models. arXiv\npreprint arXiv:2210.11416 .\nChristopher Clark, Kenton Lee, Ming-Wei Chang,\nTom Kwiatkowski, Michael Collins, and Kristina\nToutanova. 2019. Boolq: Exploring the surprising\ndifﬁculty of natural yes/no questions. arXiv preprint\narXiv:1905.10044 .\nPeter Clark, Isaac Cowhey, Oren Etzioni, Tushar Khot,\nAshish Sabharwal, Carissa Schoenick, and Oyvind\nTafjord. 2018. Think you have solved question an-\nswering? try arc, the ai2 reasoning challenge. arXiv\npreprint arXiv:1803.05457 .\nKarl Cobbe, Vineet Kosaraju, Mohammad Bavarian,\nMark Chen, Heewoo Jun, Lukasz Kaiser, Matthias\nPlappert, Jerry Tworek, Jacob Hilton, Reiichiro\nNakano, et al. 2021. Training veriﬁers to solve math\nword problems. arXiv preprint arXiv:2110.14168 .\nZihang Dai, Zhilin Yang, Yiming Yang, Jaime Car-\nbonell, Quoc V Le, and Ruslan Salakhutdinov.\n2019. Transformer-xl: Attentive language mod-\nels beyond a ﬁxed-length context. arXiv preprint\narXiv:1901.02860 .\nTri Dao, Daniel Y Fu, Stefano Ermon, Atri Rudra,\nand Christopher Ré. 2022. Flashattention: Fast and\nmemory-efﬁcient exact attention with io-awareness.\narXiv preprint arXiv:2205.14135 .\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and\nKristina Toutanova. 2018. Bert: Pre-training of deep\nbidirectional transformers for language understand-\ning. arXiv preprint arXiv:1810.04805 .\nJeffrey L Elman. 1990. Finding structure in time. Cog-\nnitive science , 14(2):179–211.\nDaniel Fried, Armen Aghajanyan, Jessy Lin, Sida\nWang, Eric Wallace, Freda Shi, Ruiqi Zhong, Wen-\ntau Yih, Luke Zettlemoyer, and Mike Lewis. 2022.\nIncoder: A generative model for code inﬁlling and\nsynthesis. arXiv preprint arXiv:2204.05999 .\nLeo Gao, Stella Biderman, Sid Black, Laurence Gold-\ning, Travis Hoppe, Charles Foster, Jason Phang,\nHorace He, Anish Thite, Noa Nabeshima, Shawn\nPresser, and Connor Leahy. 2020. The Pile: An\n800gb dataset of diverse text for language modeling.\narXiv preprint arXiv:2101.00027 .\nLeo Gao, Jonathan Tow, Stella Biderman, Sid ']","HellaSwag expands on SWAG by incorporating longer and more diverse contexts from WikiHow articles, introducing more complex and varied scenarios for testing commonsense reasoning.","HellaSwag expands upon its predecessor, SWAG, by introducing Adversarial Filtering (AF) as a data collection paradigm to select an adversarial set of machine-generated wrong answers. This process helps to create more challenging examples for AI models, making the dataset more difficult for state-of-the-art models to accurately classify. Additionally, HellaSwag scales up the length and complexity of dataset examples towards a critical 'Goldilocks' zone, where generated text is ridiculous to humans but often misclassified by AI models. These advancements make HellaSwag a more rigorous test of AI commonsense reasoning compared to SWAG.",1.0,1.0,0.5996360778808594
How does RoBERTa's use of a byte-level BPE (Byte Pair Encoding) vocabulary contribute to its model architecture and performance?,"['RoBERTa is trained with dynamic mask-\ning (Section 4.1),FULL -SENTENCES without NSP\nloss (Section 4.2), large mini-batches (Section 4.3)\nand a larger byte-level BPE (Section 4.4).\nAdditionally, we investigate two other impor-\ntant factors that have been under-emphasized in\nprevious work: (1) the data used for pretraining,\nand (2) the number of training passes through the\ndata. For example, the recently proposed XLNet\narchitecture ( Yang et al. ,2019 ) is pretrained us-\ning nearly 10 times more data than the original\nBERT ( Devlin et al. ,2019 ). It is also trained with\na batch size eight times larger for half as many op-\ntimization steps, thus seeing four times as many\nsequences in pretraining compared to BERT.\nTo help disentangle the importance of these fac-\ntors from other modeling choices (e.g., the pre-\ntraining objective), we begin by training RoBERTa\nfollowing the BERT LARGE architecture ( L= 24 ,\nH= 1024 ,A= 16 , 355M parameters). We\npretrain for 100K steps over a comparable B OOK -\nCORPUS plus W IKIPEDIA dataset as was used in\x0cModel data bsz stepsSQuADMNLI-m SST-2(v1.1/2.0)\nRoBERTa\nwith B OOKS + W IKI 16GB 8K 100K 93.6/87.3 89.0 95.3\n+ additional data ( §3.2) 160GB 8K 100K 94.0/87.7 89.3 95.6\n+ pretrain longer 160GB 8K 300K 94.4/88.7 90.0 96.1\n+ pretrain even longer 160GB 8K 500K 94.6/89.4 90.2 96.4\nBERT LARGE\nwith B OOKS + W IKI 13GB 256 1M 90.9/81.8 86.6 93.7\nXLNet LARGE\nwith B OOKS + W IKI 13GB 256 1M 94.0/87.8 88.4 94.4\n+ additional data 126GB 2K 500K 94.5/88.8 89.8 95.6\nTable 4: Development set results for RoBERTa as we pretrain o ver more data (16GB →160GB of text) and pretrain\nfor longer (100K →300K→500K steps). Each row ', 'diverse cor-\npora, such as the ones considered in this work.\nRadford et al. (2019 ) introduce a clever imple-\nmentation of BPE that uses bytes instead of uni-\ncode characters as the base subword units. Using\nbytes makes it possible to learn a subword vocab-\nulary of a modest size (50K units) that can still en-\ncode any input text without introducing any “un-\nknown” tokens.\n8Large batch training can improve training efﬁciency even\nwithout large scale parallel hardware through gradient ac-\ncumulation , whereby gradients from multiple mini-batches\nare accumulated locally before each optimization step. Thi s\nfunctionality is supported natively in FAIRSEQ (Ott et al. ,\n2019 ).The original BERT implementa-\ntion ( Devlin et al. ,2019 ) uses a character-level\nBPE vocabulary of size 30K, which is learned\nafter preprocessing the input with heuristic tok-\nenization rules. Following Radford et al. (2019 ),\nwe instead consider training BERT with a larger\nbyte-level BPE vocabulary containing 50K sub-\nword units, without any additional preprocessing\nor tokenization of the input. This adds approxi-\nmately 15M and 20M additional parameters for\nBERT BASEand BERT LARGE , respectively.\nEarly experiments revealed only slight dif-\nferences between these encodings, with the\nRadford et al. (2019 ) BPE achieving slightly\nworse end-task performance on some tasks. Nev-\nertheless, we believe the advantages of a univer-\nsal encoding scheme outweighs the minor degre-\ndation in performance and use this encoding in\nthe remainder of our experiments. A more de-\ntailed comparison of these encodings is left to fu-\nture work.\n5 RoBERTa\nIn the previous section we propose modiﬁcations\nto the BERT pretraining procedure that improve\nend-task performance. We now aggregate these\nimprovements and evaluate their combined im-\npact. We call this conﬁguration RoBERTa for\nRobustly optimized BERT approach. Speciﬁ-\ncally, ', '57tasks. On the right are UniﬁedQA\ntransfer accuracies for all of the 57tasks. For both models, capabilities are lopsided.\nA.1 A NALYSIS WITH MORE FINE-TUNED MODELS\nWe primarily analyzed models with more than 10billion parameters in the main body of the paper.\nFor this section, we analyze smaller models including RoBERTa-base (125 million parameters) (Liu\n11\x0cPublished as a conference paper at ICLR 2021\net al., 2019), ALBERT-xxlarge (223 million parameters) (Lan et al., 2020), and GPT-2 (1,558 million\nparameters) (Radford et al., 2019). Models are ﬁne-tuned to predict one of four classes using the\nUniﬁedQA MCQ questions and using our dev+val set. We test on our multitask test set.\nWe observe that these smaller models can attain better-than-random accuracy. RoBERTa-base attains\nan overall accuracy of 27.9%, with 27.9%accuracy for the humanities, 28.8%for social sciences,\n27.0%for STEM, and 27.7%for other. ALBERT-xxlarge attains an accuracy of 27.1%, with 27.2%\naccuracy for the humanities, 25.7%for the social sciences, 27.7%for STEM, and 27.9%for other.\nGPT-2 attains an accuracy of 32.4%, with 32.8%accuracy for the humanities, 33.3%for the social\nsciences, 30.2%for STEM, and 33.1%for other.\nCompare this to UniﬁedQA’s smallest variant, which has just 60million parameters and approximately\n29.3%accuracy. It obtains higher accuracy than RoBERTa and ALBERT, even though it has fewer\nparameters. This suggests that its larger pretraining dataset enables higher accuracy. Likewise,\nUniﬁedQA with 3billion parameters attains 43.7%, while the similarly sized GPT-2 model with 1.5\nbillion parameters attains 32.4%accuracy. This again suggests that T5’s larger pretraining dataset\nsize (and therefore UniﬁedQA’s pretraining dataset size) can increase accuracy.\nA.2 E RROR ANALYSIS\nWe qualitatively analyze when GPT-3 makes high conﬁdence mistakes. We ﬁnd that while many of\nthese mistakes were clearly wrong, ']","RoBERTa adopts a byte-level BPE vocabulary, allowing for more efficient handling of large and diverse corpora without the need for additional preprocessing or tokenization. This encoding scheme supports a modest-sized vocabulary that can encode any input text, potentially enhancing the model's linguistic flexibility and performance on various NLP tasks.","RoBERTa's use of a byte-level BPE vocabulary contributes to its model architecture and performance by allowing it to learn a subword vocabulary of a modest size (50K units) that can still encode any input text without introducing any ""unknown"" tokens. This encoding scheme helps in achieving a universal representation of text, which outweighs the minor degradation in performance compared to other encoding schemes.",0.75,1.0,0.8647494912147522
Discuss RoBERTa's contributions to the understanding of effective pretraining strategies in NLP.,"['David Luan, Dario Amodei, and Ilya Sutskever. Language models are\nunsupervised multitask learners. 2019.\nYinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar S. Joshi, Danqi Chen, Omer Levy, Mike Lewis,\nLuke S. Zettlemoyer, and Veselin Stoyanov. Roberta: A robustly optimized bert pretraining approach. ArXiv ,\nabs/1907.11692, 2019.\nRoy Schwartz, Jesse Dodge, Noah A. Smith, and Oren Etzioni. Green ai. ArXiv , abs/1907.10597, 2019.\nEmma Strubell, Ananya Ganesh, and Andrew McCallum. Energy and policy considerations for deep learning in\nnlp. In ACL, 2019.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser,\nand Illia Polosukhin. Attention is all you need. In NIPS , 2017.\nThomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac,\nTim Rault, Rémi Louf, Morgan Funtowicz, and Jamie Brew. Transformers: State-of-the-art natural language\nprocessing, 2019.\nCristian Bucila, Rich Caruana, and Alexandru Niculescu-Mizil. Model compression. In KDD , 2006.\nGeoffrey E. Hinton, Oriol Vinyals, and Jeffrey Dean. Distilling the knowledge in a neural network. ArXiv ,\nabs/1503.02531, 2015.\nYukun Zhu, Ryan Kiros, Richard S. Zemel, Ruslan Salakhutdinov, Raquel Urtasun, Antonio Torralba, and Sanja\nFidler. Aligning books and movies: Towards story-like visual explanations by watching movies and reading\nbooks. 2015 IEEE International Conference on Computer Vision (ICCV) , pages 19–27, 2015.\nAlex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel R. Bowman. Glue: A\nmulti-task benchmark and analysis platform for natural language understanding. In ICLR , 2018.\nMatthew E. Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke\nZettlemoyer. Deep contextualized word representations. In NAACL , 2018.\nAlex Wang, Ian F. Tenney, Yada Pruksachatkun, Katherin Yu, Jan Hula, Patrick Xia, ', 'and\nYejin Choi. 2019. Defending against neural fake\nnews. arXiv preprint arXiv:1905.12616 .\nYukun Zhu, Ryan Kiros, Richard Zemel, Ruslan\nSalakhutdinov, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Aligning books and movies:\nTowards story-like visual explanations by watch-\ning movies and reading books. In arXiv preprint\narXiv:1506.06724 .\nAppendix for “RoBERTa: A Robustly\nOptimized BERT Pretraining Approach”\nA Full results on GLUE\nIn Table 8we present the full set of development\nset results for RoBERTa. We present results for\naLARGE conﬁguration that follows BERT LARGE ,\nas well as a BASE conﬁguration that follows\nBERT BASE.B Pretraining Hyperparameters\nTable 9describes the hyperparameters for pre-\ntraining of RoBERTa LARGE and RoBERTa BASE\nC Finetuning Hyperparameters\nFinetuning hyperparameters for RACE, SQuAD\nand GLUE are given in Table 10. We select the\nbest hyperparameter values based on the median\nof 5 random seeds for each task.\x0cMNLI QNLI QQP RTE SST MRPC CoLA STS\nRoBERTa BASE\n+ all data + 500k steps 87.6 92.8 91.9 78.7 94.8 90.2 63.6 91.2\nRoBERTa LARGE\nwith B OOKS + W IKI 89.0 93.9 91.9 84.5 95.3 90.2 66.3 91.6\n+ additional data ( §3.2) 89.3 94.0 92.0 82.7 95.6 91.4 66.1 92.2\n+ pretrain longer 300k 90.0 94.5 92.2 83.3 96.1 91.1 67.4 92.3\n+ pretrain longer 500k 90.2 94.7 92.2 86.6 96.4 90.9 68.0 92.4\nTable 8: Development set results on GLUE tasks for various co nﬁgurations of RoBERTa.\nHyperparam RoBERTa LARGE RoBERTa BASE\nNumber of Layers 24 12\nHidden size 1024 768\nFFN inner hidden size 4096 3072\nAttention heads 16 12\nAttention head size 64 64\nDropout 0.1 0.1\nAttention Dropout 0.1 0.1\nWarmup Steps 30k 24k\nPeak Learning Rate 4e-4 6e-4\nBatch Size 8k 8k\nWeight Decay 0.01 0.01\nMax Steps 500k 500k\nLearning Rate Decay Linear Linear\nAdamǫ 1e-6 1e-6\nAdamβ1 0.9 0.9\nAdamβ2 0.98 ', 'into an output layer for token-\nlevel tasks, such as sequence tagging or question\nanswering, and the [CLS] representation is fed\ninto an output layer for classiﬁcation, such as en-\ntailment or sentiment analysis.\nCompared to pre-training, ﬁne-tuning is rela-\ntively inexpensive. All of the results in the pa-\nper can be replicated in at most 1 hour on a sin-\ngle Cloud TPU, or a few hours on a GPU, starting\nfrom the exact same pre-trained model.7We de-\nscribe the task-speciﬁc details in the correspond-\ning subsections of Section 4. More details can be\nfound in Appendix A.5.\n4 Experiments\nIn this section, we present BERT ﬁne-tuning re-\nsults on 11 NLP tasks.\n4.1 GLUE\nThe General Language Understanding Evaluation\n(GLUE) benchmark (Wang et al., 2018a) is a col-\nlection of diverse natural language understanding\ntasks. Detailed descriptions of GLUE datasets are\nincluded in Appendix B.1.\nTo ﬁne-tune on GLUE, we represent the input\nsequence (for single sentence or sentence pairs)\nas described in Section 3, and use the ﬁnal hid-\nden vectorC∈RHcorresponding to the ﬁrst\ninput token ( [CLS] ) as the aggregate representa-\ntion. The only new parameters introduced during\nﬁne-tuning are classiﬁcation layer weights W∈\nRK×H, whereKis the number of labels. We com-\npute a standard classiﬁcation loss with CandW,\ni.e.,log(softmax( CWT)).\n7For example, the BERT SQuAD model can be trained in\naround 30 minutes on a single Cloud TPU to achieve a Dev\nF1 score of 91.0%.\n8See (10) in https://gluebenchmark.com/faq .\x0cSystem MNLI-(m/mm) QQP QNLI SST-2 CoLA STS-B MRPC RTE Average\n392k 363k 108k 67k 8.5k 5.7k 3.5k 2.5k -\nPre-OpenAI SOTA 80.6/80.1 66.1 82.3 93.2 35.0 81.0 86.0 61.7 74.0\nBiLSTM+ELMo+Attn 76.4/76.1 64.8 79.8 90.4 36.0 73.3 84.9 56.8 71.0\nOpenAI GPT 82.1/81.4 70.3 87.4 91.3 45.4 80.0 82.3 ']","RoBERTa's comprehensive evaluation of pretraining strategies, including the effects of dynamic masking, data size, batch size, and the removal of the NSP objective, contributes valuable insights into the design and optimization of language models. Its success offers guidance for future model development, emphasizing the importance of these previously under-explored factors in achieving high performance in NLP tasks.","RoBERTa made significant contributions to the understanding of effective pretraining strategies in NLP by introducing various configurations that improved performance on a range of tasks. By fine-tuning on the General Language Understanding Evaluation (GLUE) benchmark, RoBERTa showcased the effectiveness of using the final hidden vector corresponding to the first input token ([CLS]) as the aggregate representation, along with introducing new parameters for the classification layer weights. Additionally, RoBERTa demonstrated that compared to pre-training, fine-tuning is relatively inexpensive and can be replicated in a short amount of time, making it more accessible for researchers and practitioners in the field. Overall, RoBERTa's experiments and results highlighted the importance of pretraining strategies in enhancing natural language processing tasks.",1.0,1.0,0.749457597732544
"How does Adversarial Filtering (AF) contribute to the creation of HellaSwag, and what unique characteristic does it bring to the dataset?","['adversarial dataset\nfor grounded commonsense inference. In Proceed-\nings of the 2018 Conference on Empirical Methods\nin Natural Language Processing (EMNLP) .\nYukun Zhu, Ryan Kiros, Richard Zemel, Ruslan\nSalakhutdinov, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Aligning books and movies:\nTowards story-like visual explanations by watch-\ning movies and reading books. In arXiv preprint\narXiv:1506.06724 .\n10\x0cSupplemental Material\nA Adversarial Filtering Setup\nIn this subsection, we provide some more details\nregarding the Adversarial Filtering experiments.\nOur version of Adversarial Filtering is mostly\nthe same as Zellers et al. (2018). Details:\na. On each iteration, we split the dataset up into\n80% training and 20% testing. We don’t do\nanything special for this split (like looking at\nthe video /article IDs).\nb. For ActivityNet, we use k“9 assigned in-\ndices for every example. (This corresponds to\nthe number of red columns in Figure 2). For\nWikiHow, we used k“5, since we found\nthat there were fewer good endings produced\nby the generators after scaling up the sequence\nlength.\nc. Similarly to Zellers et al. (2018), we train the\nAF models in a multi-way fashion. Since\nwe use BERT-Large as the discriminator, this\nmatches Devlin et al. (2018)’s model for\nSWAG: on each training example, the model\nis given exactly one positive ending and sev-\neral negative endings, and the model com-\nputes probability distribution over the endings\nthrough a softmax. However, we also wanted\nto always report 4-way probability for simplic-\nity. To do this, we train in a 4-way setting (the\ntraining set is constructed by subsampling 3\nwrong answers from the set of kthat are cur-\nrently assigned to each example). The accu-\nracy values that are reported are done so using\nthe ﬁrst 3 assigned negatives in dataset Dtest.\nd. Sometimes, BERT never converges (accuracy\naround ', 'Gen’d ending K …\nf\nTrain f to discriminate real vs. generated\nReplace easily-classiﬁed generations with adversarial ones that currently aren’t includedGenerated Ending (context M)Generated Ending (context 2)New!New!Figure 2: An overview of Adversarial Filtering. On\neach iteration, a new classiﬁer is trained on a dummy\ntraining set Dtrainto replace easily-classiﬁed negative\nendings on the dummy test set Dtestwith adversarial\nendings. This process is repeated iteratively, to obtain\na challenging dataset regardless of the ﬁnal split.\nthe-art. Continued evolution in turn requires prin-\ncipled dataset creation algorithms. Whenever a\nnew iteration of a dataset is created, these algo-\nrithms must leverage existing modeling advance-\nments to ﬁlter out spurious biases. Only once this\ncycle becomes impossible can we say that the un-\nderlying task – as opposed an individual dataset –\nis solved.\n2 Background\nSWAG is a dataset for commonsense NLI. For\neach question, a model is given a context from a\nvideo caption and four ending choices for what\nmight happen next. Only one choice is right – the\nactual next caption of the video.\nObtaining interesting negatives is challenging.\nPrior work (e.g. Gururangan et al., 2018; Poliak\net al., 2018) has found that when humans write the\nendings to NLI questions, they introduce subtle\nyet strong class-conditional biases known as an-\nnotation artifacts .3\nTo address this, Zellers et al. (2018) intro-\nduced Adversarial Filtering (AF). An overview\nis shown in Figure 2. The key idea is to produce\na dataset Dwhich is adversarial for anyarbitrary\nsplit ofpDtrain,Dtestq. This requires a generator\nof negative candidates (i.e., wrong endings that vi-\n3These biases simply inﬂate model performance, but past\nwork has also shown that are unwanted social biases induced\nwhen humans write the endings, in terms of gender and race\n(Rudinger et al., ', 'one remedy is to\nperform an ablation study on the Adversarial Fil-\ntering model used, comparing weaker ﬁlters with\nstronger discriminators. We present our results\nin Figure 11, and ﬁnd that while weak discrim-\ninators (like the stylistic ensemble used to make\nSWAG) only marginally reduce the accuracy of\nBERT-Large, increasing the gap between the ﬁlter\nand the ﬁnal discriminator is not enough to solve\nthe task. For instance, using a discriminator with\n3x the parameters as the adversarial ﬁlter (BERT-\nLarge vs. BERT-Base) results in 63% machine ac-\ncuracy.\n30 40 50 60 70 80 90 100\nOverall Accuracy on HellaSwag1021041061081010Pretraining Hours (Estimate)\nHuman performance?\nELMoGPTBERT-BaseBERT-LargeFigure 12: Estimated pretraining hours required to\nreach a desired accuracy on HellaSwag . We estimate\nperfomance with respect to a RTX 2080 Ti - a modern,\nfast GPU, and ﬁt a log-linear regression line. An ex-\ntrapolation suggests that to reach human-level perfor-\nmance on HellaSwag , without algorithmic or computa-\ntional improvements, would require 109GPU-hours of\npretraining (over 100k GPU years).\n6.2 How well does pretraining scale?\nOverall, the current paradigm of pretraining large\nmodels on lots of data has made immense progress\non NLP benchmarks. Though we expect this\ntrend to continue, it also behooves us to con-\nsider its limits. If more compute is indeed the\nanswer for human-level commonsense inference,\nwhat would the compute requirements of this hy-\npothetical massive model look like?\nWe investigate this in Figure 12 by compar-\ning the accuracies of known models on Hella-\nSwag with their computational needs. This estima-\ntion is a rough estimate: we convert reported TPU\nruntimes to our benchmark RTX 2080 Ti GPU us-\ning the Rooﬂine model (Williams et al., 2009),\nwhich focuses primarily on the bottleneck of load-\ning tensors into GPU memory. ']","AF iteratively selects challenging machine-generated wrong answers by using a series of discriminators, creating a dataset that is robust against model biases and exhibits a 'Goldilocks' zone of complexity.","Adversarial Filtering (AF) contributes to the creation of HellaSwag by producing a challenging dataset that is adversarial for any arbitrary split of training and testing data. It ensures that the dataset D is challenging regardless of the final split, which helps in filtering out spurious biases and improving the quality of the dataset. One unique characteristic it brings to the dataset is the use of a generator to create negative candidates (i.e., wrong endings) that are not easily classified, thus making the dataset more difficult for models to perform well on.",1.0,1.0,0.48604124784469604
What is the impact of removing the NSP loss on RoBERTa's performance across various benchmarks compared to BERT?,"['tokens as FULL -\nSENTENCES . We remove the NSP loss.\nResults Table 2shows results for the four dif-\nferent settings. We ﬁrst compare the original\nSEGMENT -PAIR input format from Devlin et al.\n(2019 ) to the SENTENCE -PAIR format; both for-\nmats retain the NSP loss, but the latter uses sin-\ngle sentences. We ﬁnd that using individual\nsentences hurts performance on downstream\ntasks , which we hypothesize is because the model\nis not able to learn long-range dependencies.We next compare training without the NSP\nloss and training with blocks of text from a sin-\ngle document ( DOC-SENTENCES ). We ﬁnd that\nthis setting outperforms the originally published\nBERT BASEresults and that removing the NSP loss\nmatches or slightly improves downstream task\nperformance , in contrast to Devlin et al. (2019 ).\nIt is possible that the original BERT implementa-\ntion may only have removed the loss term while\nstill retaining the SEGMENT -PAIR input format.\nFinally we ﬁnd that restricting sequences to\ncome from a single document ( DOC-SENTENCES )\nperforms slightly better than packing sequences\nfrom multiple documents ( FULL -SENTENCES ).\nHowever, because the DOC-SENTENCES format\nresults in variable batch sizes, we use FULL -\nSENTENCES in the remainder of our experiments\nfor easier comparison with related work.\n4.3 Training with large batches\nPast work in Neural Machine Translation has\nshown that training with very large mini-batches\ncan both improve optimization speed and end-task\nperformance when the learning rate is increased\nappropriately ( Ott et al. ,2018 ). Recent work has\nshown that BERT is also amenable to large batch\ntraining ( You et al. ,2019 ).\nDevlin et al. (2019 ) originally trained\nBERT BASE for 1M steps with a batch size of\n256 sequences. This is ', 'and replacement is performed once in the be-\nginning and saved for the duration of training, al-\nthough in practice, data is duplicated so the mask\nis not always the same for every training sentence\n(see Section 4.1).\nNext Sentence Prediction (NSP) NSP is a bi-\nnary classiﬁcation loss for predicting whether two\nsegments follow each other in the original text.\nPositive examples are created by taking consecu-\ntive sentences from the text corpus. Negative ex-\namples are created by pairing segments from dif-\nferent documents. Positive and negative examples\nare sampled with equal probability.\nThe NSP objective was designed to improve\nperformance on downstream tasks, such as Natural\nLanguage Inference ( Bowman et al. ,2015 ), which\nrequire reasoning about the relationships between\npairs of sentences.\n2.4 Optimization\nBERT is optimized with Adam ( Kingma and Ba ,\n2015 ) using the following parameters: β1= 0.9,\nβ2= 0.999,ǫ=1e-6 and L2weight de-\ncay of0.01. The learning rate is warmed up\nover the ﬁrst 10,000 steps to a peak value of\n1e-4, and then linearly decayed. BERT trains\nwith a dropout of 0.1 on all layers and at-\ntention weights, and a GELU activation func-\ntion ( Hendrycks and Gimpel ,2016 ). Models are\npretrained for S=1,000,000 updates, with mini-\nbatches containing B=256 sequences of maxi-\nmum length T=512 tokens.\n2.5 Data\nBERT is trained on a combination of B OOK COR-\nPUS (Zhu et al. ,2015 ) plus English W IKIPEDIA ,\nwhich totals 16GB of uncompressed text.3\n3 Experimental Setup\nIn this section, we describe the experimental setup\nfor our replication study of BERT.\n3.1 Implementation\nWe reimplement BERT in FAIRSEQ (Ott et al. ,\n2019 ). We primarily follow the original BERT\n3Yang et al. (2019 ) use the same dataset but report having\nonly 13GB ', 'NSP loss):\nSEGMENT -PAIR 90.4/78.7 84.0 92.9 64.2\nSENTENCE -PAIR 88.7/76.2 82.9 92.1 63.0\nOur reimplementation (without NSP loss):\nFULL -SENTENCES 90.4/79.1 84.7 92.5 64.8\nDOC-SENTENCES 90.6/79.7 84.7 92.7 65.6\nBERT BASE 88.5/76.3 84.3 92.8 64.3\nXLNet BASE (K = 7) –/81.3 85.8 92.7 66.1\nXLNet BASE (K = 6) –/81.0 85.6 93.4 66.7\nTable 2: Development set results for base models pretrained over B OOK CORPUS and W IKIPEDIA . All models are\ntrained for 1M steps with a batch size of 256 sequences. We rep ort F1 for SQuAD and accuracy for MNLI-m,\nSST-2 and RACE. Reported results are medians over ﬁve random initializations (seeds). Results for BERT BASEand\nXLNet BASEare from Yang et al. (2019 ).\n•SENTENCE -PAIR +NSP: Each input contains a\npair of natural sentences , either sampled from\na contiguous portion of one document or from\nseparate documents. Since these inputs are sig-\nniﬁcantly shorter than 512 tokens, we increase\nthe batch size so that the total number of tokens\nremains similar to SEGMENT -PAIR +NSP. We re-\ntain the NSP loss.\n•FULL -SENTENCES : Each input is packed with\nfull sentences sampled contiguously from one\nor more documents, such that the total length is\nat most 512 tokens. Inputs may cross document\nboundaries. When we reach the end of one doc-\nument, we begin sampling sentences from the\nnext document and add an extra separator token\nbetween documents. We remove the NSP loss.\n•DOC-SENTENCES : Inputs are constructed sim-\nilarly to FULL -SENTENCES , except that they\nmay not cross document boundaries. Inputs\nsampled near the end of a document may be\nshorter than 512 tokens, so we dynamically in-\ncrease the batch size in these cases to achieve\na similar number of total ']","Removing the NSP loss from RoBERTa's pretraining objective leads to significant improvements in downstream task performance. This finding challenges the initial hypothesis that NSP is crucial for learning sentence relationships, suggesting that masked language modeling alone, under optimal conditions, is sufficient for achieving superior performance.","The impact of removing the NSP loss on RoBERTa's performance across various benchmarks compared to BERT is that RoBERTa's performance matches or slightly improves on downstream task performance, in contrast to BERT.",1.0,1.0,0.6601064205169678
In what ways does RoBERTa's training process leverage data size and training duration for improved model performance?,"['0.98\nGradient Clipping 0.0 0.0\nTable 9: Hyperparameters for pretraining RoBERTa LARGE and RoBERTa BASE.\nHyperparam RACE SQuAD GLUE\nLearning Rate 1e-5 1.5e-5 {1e-5, 2e-5, 3e-5 }\nBatch Size 16 48 {16, 32}\nWeight Decay 0.1 0.01 0.1\nMax Epochs 4 2 10\nLearning Rate Decay Linear Linear Linear\nWarmup ratio 0.06 0.06 0.06\nTable 10: Hyperparameters for ﬁnetuning RoBERTa LARGE on RACE, SQuAD and GLUE.', 'RoBERTa is trained with dynamic mask-\ning (Section 4.1),FULL -SENTENCES without NSP\nloss (Section 4.2), large mini-batches (Section 4.3)\nand a larger byte-level BPE (Section 4.4).\nAdditionally, we investigate two other impor-\ntant factors that have been under-emphasized in\nprevious work: (1) the data used for pretraining,\nand (2) the number of training passes through the\ndata. For example, the recently proposed XLNet\narchitecture ( Yang et al. ,2019 ) is pretrained us-\ning nearly 10 times more data than the original\nBERT ( Devlin et al. ,2019 ). It is also trained with\na batch size eight times larger for half as many op-\ntimization steps, thus seeing four times as many\nsequences in pretraining compared to BERT.\nTo help disentangle the importance of these fac-\ntors from other modeling choices (e.g., the pre-\ntraining objective), we begin by training RoBERTa\nfollowing the BERT LARGE architecture ( L= 24 ,\nH= 1024 ,A= 16 , 355M parameters). We\npretrain for 100K steps over a comparable B OOK -\nCORPUS plus W IKIPEDIA dataset as was used in\x0cModel data bsz stepsSQuADMNLI-m SST-2(v1.1/2.0)\nRoBERTa\nwith B OOKS + W IKI 16GB 8K 100K 93.6/87.3 89.0 95.3\n+ additional data ( §3.2) 160GB 8K 100K 94.0/87.7 89.3 95.6\n+ pretrain longer 160GB 8K 300K 94.4/88.7 90.0 96.1\n+ pretrain even longer 160GB 8K 500K 94.6/89.4 90.2 96.4\nBERT LARGE\nwith B OOKS + W IKI 13GB 256 1M 90.9/81.8 86.6 93.7\nXLNet LARGE\nwith B OOKS + W IKI 13GB 256 1M 94.0/87.8 88.4 94.4\n+ additional data 126GB 2K 500K 94.5/88.8 89.8 95.6\nTable 4: Development set results for RoBERTa as we pretrain o ver more data (16GB →160GB of text) and pretrain\nfor longer (100K →300K→500K steps). Each row ', 'accumulates improvements from the row s above. RoBERTa\nmatches the architecture and training objective of BERT LARGE . Results for BERT LARGE and XLNet LARGE are from\nDevlin et al. (2019 ) and Yang et al. (2019 ), respectively. Complete results on all GLUE tasks can be fo und in the\nAppendix.\nDevlin et al. (2019 ). We pretrain our model using\n1024 V100 GPUs for approximately one day.\nResults We present our results in Table 4. When\ncontrolling for training data, we observe that\nRoBERTa provides a large improvement over the\noriginally reported BERT LARGE results, reafﬁrming\nthe importance of the design choices we explored\nin Section 4.\nNext, we combine this data with the three ad-\nditional datasets described in Section 3.2. We\ntrain RoBERTa over the combined data with the\nsame number of training steps as before (100K).\nIn total, we pretrain over 160GB of text. We ob-\nserve further improvements in performance across\nall downstream tasks, validating the importance of\ndata size and diversity in pretraining.9\nFinally, we pretrain RoBERTa for signiﬁcantly\nlonger, increasing the number of pretraining steps\nfrom 100K to 300K, and then further to 500K. We\nagain observe signiﬁcant gains in downstream task\nperformance, and the 300K and 500K step mod-\nels outperform XLNet LARGE across most tasks. We\nnote that even our longest-trained model does not\nappear to overﬁt our data and would likely beneﬁt\nfrom additional training.\nIn the rest of the paper, we evaluate our best\nRoBERTa model on the three different bench-\nmarks: GLUE, SQuaD and RACE. Speciﬁcally\n9Our experiments conﬂate increases in data size and di-\nversity. We leave a more careful analysis of these two dimen-\nsions to future work.we consider RoBERTa trained for 500K steps over\nall ']","RoBERTa extensively explores the impact of both increased data size and prolonged training duration, demonstrating that both factors significantly contribute to enhanced model performance. Training over larger datasets and for more steps than BERT allows RoBERTa to better generalize and excel on downstream tasks.","RoBERTa's training process leverages data size and training duration for improved model performance by pretraining the model over increasing amounts of text data (from 16GB to 160GB), and increasing the number of pretraining steps from 100K to 300K and then 500K. This approach leads to significant gains in downstream task performance, surpassing XLNet LARGE in most tasks without overfitting the data, suggesting that additional training could further benefit the model.",1.0,1.0,0.8154347538948059
What defines the Task2Vec embedding's ability to capture the complexity of a visual classification task and its semantic relationships?,"['TASK2VEC: Task Embedding for Meta-Learning\nAlessandro Achille\nUCLA and AWS\nachille@cs.ucla.eduMichael Lam\nAWS\nmichlam@amazon.comRahul Tewari\nAWS\ntewarir@amazon.comAvinash Ravichandran\nAWS\nravinash@amazon.com\nSubhransu Maji\nUMass and AWS\nsmmaji@amazon.comCharless Fowlkes\nUCI and AWS\nfowlkec@amazon.comStefano Soatto\nUCLA and AWS\nsoattos@amazon.comPietro Perona\nCaltech and AWS\nperonapp@amazon.com\nAbstract\nWe introduce a method to provide vectorial represen-\ntations of visual classiﬁcation tasks which can be used\nto reason about the nature of those tasks and their re-\nlations. Given a dataset with ground-truth labels and a\nloss function deﬁned over those labels, we process images\nthrough a “probe network” and compute an embedding\nbased on estimates of the Fisher information matrix asso-\nciated with the probe network parameters. This provides a\nﬁxed-dimensional embedding of the task that is independent\nof details such as the number of classes and does not require\nany understanding of the class label semantics. We demon-\nstrate that this embedding is capable of predicting task sim-\nilarities that match our intuition about semantic and tax-\nonomic relations between different visual tasks ( e.g., tasks\nbased on classifying different types of plants are similar).\nWe also demonstrate the practical value of this framework\nfor the meta-task of selecting a pre-trained feature extractor\nfor a new task. We present a simple meta-learning frame-\nwork for learning a metric on embeddings that is capable of\npredicting which feature extractors will perform well. Se-\nlecting a feature extractor with task embedding obtains a\nperformance close to the best available feature extractor,\nwhile costing substantially less than exhaustively training\nand evaluating on all available feature extractors.\n1. Introduction\nThe success of Deep Learning hinges in part on the fact\nthat models learned for one task can be used on other related\ntasks. Yet, no general framework exists to describe and\nlearn relations between tasks. We introduce the TASK 2VEC\nembedding, a technique to ', 'represent tasks as elements of a\nvector space based on the Fisher Information Matrix. The\nnorm of the embedding correlates with the complexity of\nthe task, while the distance between embeddings capturessemantic similarities between tasks (Fig. 1). When other\nnatural distances are available, such as the taxonomical dis-\ntance in biological classiﬁcation, we ﬁnd that the embed-\nding distance correlates positively with it (Fig. 2). More-\nover, we introduce an asymmetric distance on tasks which\ncorrelates with the transferability between tasks.\nComputation of the embedding leverages a duality be-\ntween network parameters (weights) and outputs (activa-\ntions) in a deep neural network (DNN): Just as the activa-\ntions of a DNN trained on a complex visual recognition task\nare a rich representation of the input images, we show that\nthe gradients of the weights relative to a task-speciﬁc loss\nare a rich representation of the task itself. Speciﬁcally, given\na task deﬁned by a dataset D={(xi,yi)}N\ni=1of labeled\nsamples, we feed the data through a pre-trained reference\nconvolutional neural network which we call “ probe net-\nwork ”, and compute the diagonal Fisher Information Ma-\ntrix (FIM) of the network ﬁlter parameters to capture the\nstructure of the task (Sect. 2). Since the architecture and\nweights of the probe network are ﬁxed, the FIM provides a\nﬁxed-dimensional representation of the task. We show this\nembedding encodes the “difﬁculty” of the task, character-\nistics of the input domain, and which features of the probe\nnetwork are useful to solve it (Sect. 2.1).\nOur task embedding can be used to reason about the\nspace of tasks and solve meta-tasks. As a motivating exam-\nple, we study the problem of selecting the best pre-trained\nfeature extractor to solve a new ', 'embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ']","Task2Vec embedding utilizes the Fisher Information Matrix (FIM) computed from a probe network's parameters, capturing the task's complexity and semantic relationships by representing tasks as elements in a vector space.","The Task2Vec embedding's ability to capture the complexity of a visual classification task and its semantic relationships is defined by the norm of the embedding correlating with the complexity of the task, while the distance between embeddings captures semantic similarities between tasks. Additionally, when other natural distances are available, such as taxonomical distance in biological classification, the embedding distance positively correlates with it.",1.0,1.0,0.6909395456314087
How does Task2Vec's embedding relate to the difficulty and domain characteristics of a task?,"['embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ', 'represent tasks as elements of a\nvector space based on the Fisher Information Matrix. The\nnorm of the embedding correlates with the complexity of\nthe task, while the distance between embeddings capturessemantic similarities between tasks (Fig. 1). When other\nnatural distances are available, such as the taxonomical dis-\ntance in biological classiﬁcation, we ﬁnd that the embed-\nding distance correlates positively with it (Fig. 2). More-\nover, we introduce an asymmetric distance on tasks which\ncorrelates with the transferability between tasks.\nComputation of the embedding leverages a duality be-\ntween network parameters (weights) and outputs (activa-\ntions) in a deep neural network (DNN): Just as the activa-\ntions of a DNN trained on a complex visual recognition task\nare a rich representation of the input images, we show that\nthe gradients of the weights relative to a task-speciﬁc loss\nare a rich representation of the task itself. Speciﬁcally, given\na task deﬁned by a dataset D={(xi,yi)}N\ni=1of labeled\nsamples, we feed the data through a pre-trained reference\nconvolutional neural network which we call “ probe net-\nwork ”, and compute the diagonal Fisher Information Ma-\ntrix (FIM) of the network ﬁlter parameters to capture the\nstructure of the task (Sect. 2). Since the architecture and\nweights of the probe network are ﬁxed, the FIM provides a\nﬁxed-dimensional representation of the task. We show this\nembedding encodes the “difﬁculty” of the task, character-\nistics of the input domain, and which features of the probe\nnetwork are useful to solve it (Sect. 2.1).\nOur task embedding can be used to reason about the\nspace of tasks and solve meta-tasks. As a motivating exam-\nple, we study the problem of selecting the best pre-trained\nfeature extractor to solve a new ', 'from iNat-\nuralist and CUB, and aims to test ﬁne-grained expert selec-\ntion in a restricted domain. The second contains a mix of\n26 curated experts and 50 random tasks extracted from all\ndatasets, and aims to test model selection between different\ndomains and tasks (see Supplementary Material for details).5.1. Task Embedding Results\nTask Embedding qualitatively reﬂects taxonomic dis-\ntance for iNaturalist For tasks extracted from the iNat-\nuralist dataset (classiﬁcation of species), the taxonomical\ndistance between orders provides a natural metric of the se-\nmantic similarity between tasks. In Figure 2 we compare\nthe symmetric TASK 2VEC distance with the taxonomical\ndistance, showing strong agreement.\nTask embedding for iMaterialist In Fig. 1 we show a\nt-SNE visualization of the embedding for iMaterialist and\niNaturalist tasks. Task embedding yields interpretable re-\nsults: Tasks that are correlated in the dataset, such as binary\nclasses corresponding to the same categorical attribute, may\nend up far away from each other and close to other tasks that\nare semantically more similar ( e.g., the jeans category task\nis close to the ripped attribute and the denim material). This\nis reﬂected in the mixture of colors of semantically related\nnearby tasks, showing non-trivial grouping.\nWe also compare the TASK 2VEC embedding with a do-\nmain embedding baseline, which only exploits the input\ndistribution p(x)rather than the task distribution p(x,y).\nWhile some tasks are highly correlated with their domain\n(e.g., tasks from iNaturalist), other tasks differ only on the\nlabels ( e.g., all the attribute tasks of iMaterialist, which\nshare the same clothes domain). Accordingly, the domain\x0c102103104\nNumber of samples-10%0%10%Error relative to brute force\n(lower is better)\nBrute force fixed\nImageNet fixed\nTask2Vec fixedImageNet finetune\nTask2Vec finetuneFigure 4: TASK 2VEC improves results at different\ndataset sizes and training ']","The embedding's norm correlates with task difficulty, while its orientation and distance from other embeddings capture domain characteristics and task similarities.","The Task2Vec embedding relates to the difficulty of a task by capturing the complexity of the task, as indicated by the norm of the embedding. It also captures the semantic similarities between tasks by measuring the distance between embeddings, reflecting characteristics of the input domain and indicating which features of the probe network are useful to solve the task.",1.0,1.0,0.7645609378814697
How does Task2Vec differentiate itself from traditional domain embeddings and other task representation methods?,"['embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ', 'represent tasks as elements of a\nvector space based on the Fisher Information Matrix. The\nnorm of the embedding correlates with the complexity of\nthe task, while the distance between embeddings capturessemantic similarities between tasks (Fig. 1). When other\nnatural distances are available, such as the taxonomical dis-\ntance in biological classiﬁcation, we ﬁnd that the embed-\nding distance correlates positively with it (Fig. 2). More-\nover, we introduce an asymmetric distance on tasks which\ncorrelates with the transferability between tasks.\nComputation of the embedding leverages a duality be-\ntween network parameters (weights) and outputs (activa-\ntions) in a deep neural network (DNN): Just as the activa-\ntions of a DNN trained on a complex visual recognition task\nare a rich representation of the input images, we show that\nthe gradients of the weights relative to a task-speciﬁc loss\nare a rich representation of the task itself. Speciﬁcally, given\na task deﬁned by a dataset D={(xi,yi)}N\ni=1of labeled\nsamples, we feed the data through a pre-trained reference\nconvolutional neural network which we call “ probe net-\nwork ”, and compute the diagonal Fisher Information Ma-\ntrix (FIM) of the network ﬁlter parameters to capture the\nstructure of the task (Sect. 2). Since the architecture and\nweights of the probe network are ﬁxed, the FIM provides a\nﬁxed-dimensional representation of the task. We show this\nembedding encodes the “difﬁculty” of the task, character-\nistics of the input domain, and which features of the probe\nnetwork are useful to solve it (Sect. 2.1).\nOur task embedding can be used to reason about the\nspace of tasks and solve meta-tasks. As a motivating exam-\nple, we study the problem of selecting the best pre-trained\nfeature extractor to solve a new ', 'on different\ntasks can be seen in Figure 4. Our task-speciﬁc\nmodels are formed by incorporating BERT with\none additional output layer, so a minimal num-\nber of parameters need to be learned from scratch.\nAmong the tasks, (a) and (b) are sequence-level\ntasks while (c) and (d) are token-level tasks. In\nthe ﬁgure,Erepresents the input embedding, Ti\nrepresents the contextual representation of token i,\n[CLS] is the special symbol for classiﬁcation out-\nput, and [SEP] is the special symbol to separate\nnon-consecutive token sequences.\nB Detailed Experimental Setup\nB.1 Detailed Descriptions for the GLUE\nBenchmark Experiments.\nOur GLUE results in Table1 are obtained\nfrom https://gluebenchmark.com/\nleaderboard and https://blog.\nopenai.com/language-unsupervised .\nThe GLUE benchmark includes the following\ndatasets, the descriptions of which were originally\nsummarized in Wang et al. (2018a):\nMNLI Multi-Genre Natural Language Inference\nis a large-scale, crowdsourced entailment classiﬁ-\ncation task (Williams et al., 2018). Given a pair of\nsentences, the goal is to predict whether the sec-\nond sentence is an entailment ,contradiction , or\nneutral with respect to the ﬁrst one.\nQQP Quora Question Pairs is a binary classiﬁ-\ncation task where the goal is to determine if two\nquestions asked on Quora are semantically equiv-\nalent (Chen et al., 2018).\nQNLI Question Natural Language Inference is\na version of the Stanford Question Answering\nDataset (Rajpurkar et al., 2016) which has been\nconverted to a binary classiﬁcation task (Wang\net al., 2018a). The positive examples are (ques-\ntion, sentence) pairs which do contain the correct\nanswer, and the negative examples are (question,\nsentence) from the same paragraph which do not\ncontain the answer.\x0cBERT E[CLS] E1 E[SEP] ... ENE1’... EM’\nC\nT1\nT[SEP] ... TN\nT1’... TM’\n[CLS] Tok 1 [SEP] ...Tok NTok 1...Tok\nM\nQuestion Paragraph BERT E[CLS] E1 E2 EN\nC\nT1 T2 TN\nSingle Sentence ...\n...BERT Tok 1 Tok 2 ']","Unlike domain embeddings that focus on input data distribution, Task2Vec uniquely represents tasks based on the joint input-output distribution's structure, offering a novel perspective on task similarity and complexity.","Task2Vec differentiates itself from traditional domain embeddings and other task representation methods by basing its information on the domain specifically on data near the decision boundary, which is called task-weighted domain embedding. Traditional domain embeddings, such as C1, only reflect which features vary over the dataset without indicating whether they are relevant to the task. Task2Vec, on the other hand, encodes useful features for the task by leveraging a duality between network parameters and outputs in a deep neural network, providing a rich representation of the task itself. Additionally, Task2Vec computes the Fisher Information Matrix of the network filter parameters to capture the structure of the task, encoding the difficulty of the task, characteristics of the input domain, and useful features of the probe network to solve it.",1.0,1.0,0.8051294684410095
How does Task2Vec ensure its task embeddings are invariant to the number of classes and label semantics within a dataset?,"['embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ', 'TASK2VEC: Task Embedding for Meta-Learning\nAlessandro Achille\nUCLA and AWS\nachille@cs.ucla.eduMichael Lam\nAWS\nmichlam@amazon.comRahul Tewari\nAWS\ntewarir@amazon.comAvinash Ravichandran\nAWS\nravinash@amazon.com\nSubhransu Maji\nUMass and AWS\nsmmaji@amazon.comCharless Fowlkes\nUCI and AWS\nfowlkec@amazon.comStefano Soatto\nUCLA and AWS\nsoattos@amazon.comPietro Perona\nCaltech and AWS\nperonapp@amazon.com\nAbstract\nWe introduce a method to provide vectorial represen-\ntations of visual classiﬁcation tasks which can be used\nto reason about the nature of those tasks and their re-\nlations. Given a dataset with ground-truth labels and a\nloss function deﬁned over those labels, we process images\nthrough a “probe network” and compute an embedding\nbased on estimates of the Fisher information matrix asso-\nciated with the probe network parameters. This provides a\nﬁxed-dimensional embedding of the task that is independent\nof details such as the number of classes and does not require\nany understanding of the class label semantics. We demon-\nstrate that this embedding is capable of predicting task sim-\nilarities that match our intuition about semantic and tax-\nonomic relations between different visual tasks ( e.g., tasks\nbased on classifying different types of plants are similar).\nWe also demonstrate the practical value of this framework\nfor the meta-task of selecting a pre-trained feature extractor\nfor a new task. We present a simple meta-learning frame-\nwork for learning a metric on embeddings that is capable of\npredicting which feature extractors will perform well. Se-\nlecting a feature extractor with task embedding obtains a\nperformance close to the best available feature extractor,\nwhile costing substantially less than exhaustively training\nand evaluating on all available feature extractors.\n1. Introduction\nThe success of Deep Learning hinges in part on the fact\nthat models learned for one task can be used on other related\ntasks. Yet, no general framework exists to describe and\nlearn relations between tasks. We introduce the TASK 2VEC\nembedding, a technique to ', 'represent tasks as elements of a\nvector space based on the Fisher Information Matrix. The\nnorm of the embedding correlates with the complexity of\nthe task, while the distance between embeddings capturessemantic similarities between tasks (Fig. 1). When other\nnatural distances are available, such as the taxonomical dis-\ntance in biological classiﬁcation, we ﬁnd that the embed-\nding distance correlates positively with it (Fig. 2). More-\nover, we introduce an asymmetric distance on tasks which\ncorrelates with the transferability between tasks.\nComputation of the embedding leverages a duality be-\ntween network parameters (weights) and outputs (activa-\ntions) in a deep neural network (DNN): Just as the activa-\ntions of a DNN trained on a complex visual recognition task\nare a rich representation of the input images, we show that\nthe gradients of the weights relative to a task-speciﬁc loss\nare a rich representation of the task itself. Speciﬁcally, given\na task deﬁned by a dataset D={(xi,yi)}N\ni=1of labeled\nsamples, we feed the data through a pre-trained reference\nconvolutional neural network which we call “ probe net-\nwork ”, and compute the diagonal Fisher Information Ma-\ntrix (FIM) of the network ﬁlter parameters to capture the\nstructure of the task (Sect. 2). Since the architecture and\nweights of the probe network are ﬁxed, the FIM provides a\nﬁxed-dimensional representation of the task. We show this\nembedding encodes the “difﬁculty” of the task, character-\nistics of the input domain, and which features of the probe\nnetwork are useful to solve it (Sect. 2.1).\nOur task embedding can be used to reason about the\nspace of tasks and solve meta-tasks. As a motivating exam-\nple, we study the problem of selecting the best pre-trained\nfeature extractor to solve a new ']","By basing the embeddings on the structure of the task via the FIM, Task2Vec creates representations that are independent of class count or label semantics, focusing on the task's intrinsic characteristics.","Task2Vec ensures its task embeddings are invariant to the number of classes and label semantics within a dataset by processing images through a ""probe network"" and computing an embedding based on estimates of the Fisher information matrix associated with the probe network parameters. This provides a fixed-dimensional embedding of the task that is independent of details such as the number of classes and does not require any understanding of the class label semantics.",0.5,1.0,0.753809928894043
How does Task2Vec handle the variance in data size and complexity across different tasks in its embeddings?,"['embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ', 'are interested in has\nrelatively few samples. In Fig. 4 we show how the perfor-\nmance of TASK 2VEC varies on a model selection task as the\nnumber of samples varies. At all sample sizes TASK 2VEC is\nclose to the optimum, and improves over selecting a generic\nexpert (ImageNet), both when ﬁne-tuning and when train-\ning only a classiﬁer. We observe that the best choice of ex-\nperts is not affected by the dataset size, and that even with\nfew examples TASK 2VEC is able to ﬁnd the optimal experts.\nChoice of probe network In Table 1 we show that\nDenseNet [15] and ResNet architectures [11] perform sig-\nniﬁcantly better when used as probe networks to compute\ntheTASK 2VEC embedding than a VGG [32] architecture.\n6. Related Work\nTask and Domain embedding. Tasks distinguished by\ntheir domain can be understood simply in terms of image\nstatistics. Due to the bias of different datasets, sometimes a\nbenchmark task may be identiﬁed just by looking at a few\nimages [34]. The question of determining what summary\x0cMeta-task Optimal Chance ImageNet TASK 2VEC Asymmetric TASK 2VEC MODEL 2VEC\niNat + CUB 31.24 +59.52% +30.18% +42.54% +9.97% +6.81%\nMixed 22.90 +112.49% +75.73% +40.30% +29.23% +27.81%\nTable 2: Model selection performance of different metrics. Average optimal error obtained on two meta-learning tasks\nby exhaustive search over the best expert, and relative error increase when using cheaper model selection methods. Always\npicking a ﬁxed good general model ( e.g., a model pretrained on ImageNet) performs better than picking an expert at random\n(chance). However, picking an expert using the Asymmetric TASK 2VEC distance can achieve an overall better performance\nthan using a general model. Notice also the ', 'represent tasks as elements of a\nvector space based on the Fisher Information Matrix. The\nnorm of the embedding correlates with the complexity of\nthe task, while the distance between embeddings capturessemantic similarities between tasks (Fig. 1). When other\nnatural distances are available, such as the taxonomical dis-\ntance in biological classiﬁcation, we ﬁnd that the embed-\nding distance correlates positively with it (Fig. 2). More-\nover, we introduce an asymmetric distance on tasks which\ncorrelates with the transferability between tasks.\nComputation of the embedding leverages a duality be-\ntween network parameters (weights) and outputs (activa-\ntions) in a deep neural network (DNN): Just as the activa-\ntions of a DNN trained on a complex visual recognition task\nare a rich representation of the input images, we show that\nthe gradients of the weights relative to a task-speciﬁc loss\nare a rich representation of the task itself. Speciﬁcally, given\na task deﬁned by a dataset D={(xi,yi)}N\ni=1of labeled\nsamples, we feed the data through a pre-trained reference\nconvolutional neural network which we call “ probe net-\nwork ”, and compute the diagonal Fisher Information Ma-\ntrix (FIM) of the network ﬁlter parameters to capture the\nstructure of the task (Sect. 2). Since the architecture and\nweights of the probe network are ﬁxed, the FIM provides a\nﬁxed-dimensional representation of the task. We show this\nembedding encodes the “difﬁculty” of the task, character-\nistics of the input domain, and which features of the probe\nnetwork are useful to solve it (Sect. 2.1).\nOur task embedding can be used to reason about the\nspace of tasks and solve meta-tasks. As a motivating exam-\nple, we study the problem of selecting the best pre-trained\nfeature extractor to solve a new ']","Through robust Fisher computation, Task2Vec accommodates variance in data size and complexity, ensuring embeddings remain informative by adjusting for irregularities in the loss landscape.","Task2Vec handles the variance in data size and complexity across different tasks in its embeddings by encoding the ""difficulty"" of the task, characteristics of the input domain, and which features of the probe network are useful to solve it. The embedding correlates with the complexity of the task, while the distance between embeddings captures semantic similarities between tasks. Additionally, Task2Vec introduces an asymmetric distance on tasks that correlates with the transferability between tasks, allowing for a comprehensive representation of the tasks regardless of their differences in data size and complexity.",0.8571428571428571,1.0,0.6638389825820923
"How does GLM-130B's architecture differ from traditional GPT-style models, and what are its key features?","['et al., 2022) to leverage its bidirectional at-\ntention advantage and autoregressive blank infilling objective. Table 1 summarizes the comparison\nbetween GLM-130B, GPT-3 and another two open-source efforts—OPT-175B and BLOOM-176B,\nas well as PaLM 540B (Chowdhery et al., 2022)—a 4 ×larger model—as a reference.\nAltogether, the conceptual uniqueness and engineering efforts enable GLM-130B to exhibit perfor-\nmance that surpasses the level of GPT-3 on a wide range of benchmarks (in total 112 tasks) and also\noutperforms PaLM 540B in many cases, while outperformance over GPT-3 has not been observed in\nOPT-175B and BLOOM-176B (Cf. Figure 1 left). For zero-shot performance, GLM-130B is better\nthan GPT-3 175B (+5.0%), OPT-175B (+6.5%), and BLOOM-176B (+13.0%) on LAMBADA (Pa-\nperno et al., 2016), and achieves 3 ×better performance than GPT-3 on Big-bench-lite (Srivastava\net al., 2022). For the 5-shot MMLU (Hendrycks et al., 2021) tasks, it is better than GPT-3 175B\n(+0.9%) and BLOOM-176B (+12.7%). As a bilingual LLM also in Chinese, it offers significantly\nbetter results than ERNIE TITAN 3.0 260B (Wang et al., 2021)—the largest Chinese LLM—on 7\nzero-shot CLUE (Xu et al., 2020) datasets (+24.26%) and 5 zero-shot FewCLUE (Xu et al., 2021)\nones (+12.75%). Importantly, as summarized in Figure 1 right, GLM-130B as an open model is\nassociated with significantly less bias and generation toxicity than its 100B-scale counterparts .\nFinally, we design GLM-130B to empower as many people as possible to conduct 100B-scale LLM\nstudies. First, instead of using 175B+ parameters as OPT and BLOOM, the 130B size is decided be-\ncause such a size supports inference on a single A100 (8 ×40G) server. Second, to further lower the\nGPU requirements, we quantize GLM-130B ', 'evaluation of GLM-130B on the SuperGLUE (Wang et al., 2019) benchmark,\nwhich consists 8 different natural language understanding challenges. Noted that these results\nare neither zero/few-shot nor fine-tuned results, because 7 out of 8 tasks’ training sets have been\nincluded in GLM-130B’s MIP training (except for ReCoRD) together with other 67 multi-task\ndatasets; however, GLM-130B is also not individually fine-tuned on any of them. Therefore, these\nresults are not for relative comparison for any other models’, but only for readers’ reference on\nGLM-130B’s absolute ability.\n44\x0cPublished as a conference paper at ICLR 2023\ncb record wsc multirc rte wic copa boolq20406080100\nGLM-130B (uni)\nGLM-130B (bi)\nFigure 17: GLM-130B (uni and bi)’s untuned results on SuperGLUE development set, using prompt-\nsource (Bach et al., 2022) prompts and task formulation. DISCLAIMER: Noted that some of the\nSuperGLUE training sets have been included in the MIP training. We report the results here\nonly for readers’ reference.\nSports LLC Coin Flip Coin Flip (OOD: 3) Reverse List Date020406080100\n54.0\n1.084.5\n47.953.1\n15.773.7\n13.495.0\n58.668.3\n27.9Standard Prompting Chain-of-Thoughts\nFigure 18: Chain-of-thought prompting can also improve GLM-130B’s performance on reasoning\ntasks compared to standard prompting.\nBoolQ CB COPA MultiRC ReCoRD RTE WiC WSC\nGLM-130B 89.69 98.21 100 89.32 92.11 94.22 76.96 88.5\nTable 21: The results of GLM-130B on the SuperGLUE dataset obtained using the P-tuning v2 (Liu\net al., 2022). We report the Accuracy metric for all datasets except for MultiRC (F1a) and ReCoRD\n(F1).\nThe results are presented in Figure 17. We ablate the unidirectional and bidirectional GLM-130B to\njustify the usefulness of GLM objective in boosting LLMs’ ability to understand. Each point in the\nfigure refers to a prompt-specific result, for which the prompt is from the promptsource (Bach et al.,\n2022) ', 'studies of LLMs’ theory, capacity, and flaws. Researchers can also modify the\nmodel architecture and weights, to validate the proposed algorithms to improve LLMs Zhu et al.\n(2020); Cao et al. (2021); Hase et al. (2021); Mitchell et al. (2022).\nWith INT4 quantization, GLM-130B can perform inference on popularized GPUs such as 4 ×RTX\n3090 or 8 ×RTX 2080 Ti, which can be easily accessed from cloud service. As a result, researchers\nwho cannot afford powerful data-center GPU servers like DGX-A100 can also utilize GLM-130B.\nG.2 I MPACT ON INDIVIDUAL DEVELOPERS AND SMALL COMPANIES\nCurrently, individual developers and small companies who want to integrate LLMs into their busi-\nness can only choose paid inference APIs. The increased cost can hinder their attempts. Instead,\nGLM-130B can be deployed on popularized hardware that they own or can access via cloud service\nto reduce the cost. Furthermore, they can utilize distillation techniques Sanh et al. (2019); Jiao et al.\n(2020) to obtain smaller models that preserve comparable performance on their specific tasks. While\nsome developers may lack the ability to complete deployment and distillation on their own, we be-\nlieve with GLM-130B and more open LLMs in the future, the corresponding toolkits and service\nproviders will become more available.\nWe also note that currently most applications of LLMs are based on prompt engineering, partly\ndue to the limitation of inference APIs. In downstream scenarios such as online customer service,\nthe companies accumulate huge amounts of human-generated data that contain domain knowledge.\nWith the open-source weights and code, developers can finetune GLM-130B on their own data to\nmitigate the gap of domain knowledge.\nG.3 S OCIAL IMPACT\nLarge language models, together ']","Unlike GPT-style architectures, GLM-130B is based on the General Language Model (GLM) framework with bidirectional attention and autoregressive blank infilling, enabling more effective context comprehension.","GLM-130B's architecture leverages bidirectional attention and autoregressive blank infilling objective, which gives it a performance advantage over traditional GPT-style models like GPT-3. Key features of GLM-130B include surpassing GPT-3 in performance on a wide range of benchmarks, better zero-shot performance on tasks like LAMBADA and Big-bench-lite, outperforming PaLM 540B in many cases, and demonstrating significantly less bias and generation toxicity. Additionally, GLM-130B is designed to support inference on a single A100 server, making it more accessible for researchers and small companies compared to models with larger parameters.",1.0,1.0,0.7673383355140686
How does GLM-130B's performance compare to other 100B-scale models and PaLM 540B across English benchmarks?,"['et al., 2022) to leverage its bidirectional at-\ntention advantage and autoregressive blank infilling objective. Table 1 summarizes the comparison\nbetween GLM-130B, GPT-3 and another two open-source efforts—OPT-175B and BLOOM-176B,\nas well as PaLM 540B (Chowdhery et al., 2022)—a 4 ×larger model—as a reference.\nAltogether, the conceptual uniqueness and engineering efforts enable GLM-130B to exhibit perfor-\nmance that surpasses the level of GPT-3 on a wide range of benchmarks (in total 112 tasks) and also\noutperforms PaLM 540B in many cases, while outperformance over GPT-3 has not been observed in\nOPT-175B and BLOOM-176B (Cf. Figure 1 left). For zero-shot performance, GLM-130B is better\nthan GPT-3 175B (+5.0%), OPT-175B (+6.5%), and BLOOM-176B (+13.0%) on LAMBADA (Pa-\nperno et al., 2016), and achieves 3 ×better performance than GPT-3 on Big-bench-lite (Srivastava\net al., 2022). For the 5-shot MMLU (Hendrycks et al., 2021) tasks, it is better than GPT-3 175B\n(+0.9%) and BLOOM-176B (+12.7%). As a bilingual LLM also in Chinese, it offers significantly\nbetter results than ERNIE TITAN 3.0 260B (Wang et al., 2021)—the largest Chinese LLM—on 7\nzero-shot CLUE (Xu et al., 2020) datasets (+24.26%) and 5 zero-shot FewCLUE (Xu et al., 2021)\nones (+12.75%). Importantly, as summarized in Figure 1 right, GLM-130B as an open model is\nassociated with significantly less bias and generation toxicity than its 100B-scale counterparts .\nFinally, we design GLM-130B to empower as many people as possible to conduct 100B-scale LLM\nstudies. First, instead of using 175B+ parameters as OPT and BLOOM, the 130B size is decided be-\ncause such a size supports inference on a single A100 (8 ×40G) server. Second, to further lower the\nGPU requirements, we quantize GLM-130B ', 'evaluation of GLM-130B on the SuperGLUE (Wang et al., 2019) benchmark,\nwhich consists 8 different natural language understanding challenges. Noted that these results\nare neither zero/few-shot nor fine-tuned results, because 7 out of 8 tasks’ training sets have been\nincluded in GLM-130B’s MIP training (except for ReCoRD) together with other 67 multi-task\ndatasets; however, GLM-130B is also not individually fine-tuned on any of them. Therefore, these\nresults are not for relative comparison for any other models’, but only for readers’ reference on\nGLM-130B’s absolute ability.\n44\x0cPublished as a conference paper at ICLR 2023\ncb record wsc multirc rte wic copa boolq20406080100\nGLM-130B (uni)\nGLM-130B (bi)\nFigure 17: GLM-130B (uni and bi)’s untuned results on SuperGLUE development set, using prompt-\nsource (Bach et al., 2022) prompts and task formulation. DISCLAIMER: Noted that some of the\nSuperGLUE training sets have been included in the MIP training. We report the results here\nonly for readers’ reference.\nSports LLC Coin Flip Coin Flip (OOD: 3) Reverse List Date020406080100\n54.0\n1.084.5\n47.953.1\n15.773.7\n13.495.0\n58.668.3\n27.9Standard Prompting Chain-of-Thoughts\nFigure 18: Chain-of-thought prompting can also improve GLM-130B’s performance on reasoning\ntasks compared to standard prompting.\nBoolQ CB COPA MultiRC ReCoRD RTE WiC WSC\nGLM-130B 89.69 98.21 100 89.32 92.11 94.22 76.96 88.5\nTable 21: The results of GLM-130B on the SuperGLUE dataset obtained using the P-tuning v2 (Liu\net al., 2022). We report the Accuracy metric for all datasets except for MultiRC (F1a) and ReCoRD\n(F1).\nThe results are presented in Figure 17. We ablate the unidirectional and bidirectional GLM-130B to\njustify the usefulness of GLM objective in boosting LLMs’ ability to understand. Each point in the\nfigure refers to a prompt-specific result, for which the prompt is from the promptsource (Bach et al.,\n2022) ', 'GPT-3 175B and even PaLM 540B (4 ×larger) in\nzero-shot setting. This is probably owing to GLM-130B’s bidirectional context attention and MIP,\nwhich has been proved to improve zero-shot results in unseen tasks (Wei et al., 2022a; Sanh et al.,\n2022). As the number of shots increases, GLM-130B’s performance keeps going up, maintaining its\noutperformance over GPT-3 (Cf. Appendix C.5 and Table 14 for details on each model and task).\nLimitations and Discussions. In the experiments above, we observe that GLM-130B’s performance\ngrowth (13.31 to 15.12) with the increase of few-shot samples is not as significant as GPT-3’s (4.35\nto 13.18). Here is our intuitive attempt to understand the phenomenon.\nFirst, the bidirectional nature of GLM-130B could lead to strong zero-shot performance (as is indi-\ncated in zero-shot language modeling), thus getting closer to the few-shot “upper-bound” for models\nof similar scale (i.e., 100B-scale) than unidirectional LLMs. Second, it may be also attributed to a\ndeficit of existing MIP paradigms (Wei et al., 2022a; Sanh et al., 2022), which only involve zero-shot\nprediction in the training and will be likely to bias GLM-130B for stronger zero-shot learning but\nrelatively weaker in-context few-shot performance. To correct the bias, a potential solution we came\nup with would be to employ MIP with varied shots of in-context samples rather than only zero-shot\nsamples.\nFinally, despite almost the same GPT architecture as GPT-3, PaLM 540B’s relative growth with few-\nshot in-context learning is substantially more significant than GPT-3’s. We conjecture this further\nacceleration in performance growth is a source of PaLM’s high-quality and diverse private-collected\ntraining corpora. By combining our experiences with (Hoffmann et al., 2022)’s insights, we came ']","GLM-130B surpasses GPT-3 and other 100B-scale models in a range of English benchmarks and performs competitively against PaLM 540B, demonstrating its effectiveness in language understanding.","GLM-130B's performance surpasses the level of GPT-3 on a wide range of benchmarks and also outperforms PaLM 540B in many cases. However, GLM-130B's outperformance over GPT-3 has not been observed in OPT-175B and BLOOM-176B when compared across English benchmarks.",1.0,1.0,0.8199959993362427
What record-setting performance did Megatron-LM achieve in terms of parameter count and sustained PetaFLOPs on NVIDIA V100 GPUs?,"['so large that they exceed FP16’s\nrange, as the model scales up. There are a few options to overcome this issue in LLMs. In\nCogView (Ding et al., 2021), PB-Relax is proposed to remove bias terms and deduct extremum\nvalue in attention computation to avoid the problem, which unfortunately does not help avoid dis-\nconvergence in GLM-130B. In BLOOM-176B, the BF16 format is used instead of FP16, due to its\nwide range of values on NVIDIA Ampere GPUs (i.e., A100). However, BF16 consumes ∼15%\nmore run-time GPU memory than FP16 in our experiments due to its conversion to FP32 in gradi-\n5\x0cPublished as a conference paper at ICLR 2023\nent accumulation, and more importantly it is not supported on other GPU platforms (e.g., NVIDIA\nTesla V100), limiting the accessibility of produced LLMs. Another option from BLOOM-176B is\nto apply embedding norm with BF16, but in sacrifice of a significant penalty on model performance,\nas they notice that embedding norm can harm model’s zero-shot learning (Cf. Section 4.3 in (Scao\net al., 2022)).\nEmbedding Layer Gradient Shrink (EGS). Our empirical search identifies that the gradient norm\ncan serve as an informative indicator of training collapses. Specifically, we find that a training\ncollapse usually lags behind a “spike” in gradient norm by a few training steps. Such spikes are\nusually caused by the embedding layer’s abnormal gradients, as we observe that its gradient norm\nis often several magnitude larger that those of other layers in GLM-130B’s early stage training (Cf.\nFigure 4 (a)). In addition, it tends to fluctuate dramatically in the early training. The problem is\nhandled in vision models (Chen et al., 2021) via freezing ', 'prompted datasets from (Sanh et al., 2022; Wang et al., 2022a), listed\nin Appendix C and Table 12. GLM-130B users are suggested to avoid evaluating its zero-shot and\nfew-shot capabilities on these datasets according to the criterion illustrated in Section 5.\n2.3 P LATFORM -AWARE PARALLEL STRATEGIES AND MODEL CONFIGURATIONS\nGLM-130B is trained on a cluster of 96 DGX-A100 GPU (8 ×40G) servers with a 60-day access.\nThe goal is to pass through as many tokens as possible, as a recent study (Hoffmann et al., 2022)\nsuggests that most existing LLMs are largely under-trained.\nThe 3D Parallel Strategy. The data parallelism (Valiant, 1990) and tensor model paral-\nlelism (Shoeybi et al., 2019) are the de facto practices for training billion-scale models (Wang &\nKomatsuzaki, 2021; Du et al., 2022). To further handle the huge GPU memory requirement and the\ndecrease in overall GPU utilization resulted from applying tensor parallel between nodes—as 40G\nrather than 80G A100s are used for training GLM-130B, we combine the pipeline model parallelism\nwith the other two strategies to form a 3D parallel strategy.\nThe pipeline parallelism divides the model into sequential stages for each parallel group, and to fur-\nther minimize bubbles introduced by pipeline, we leverage the PipeDream-Flush (Narayanan et al.,\n2021) implementation from DeepSpeed (Rasley et al., 2020) to train GLM-130B with a relative\n4\x0cPublished as a conference paper at ICLR 2023\nbig global batch size (4,224) to reduce time and GPU memory wasting. Through both numeri-\ncal and empirical examinations, we adopt 4-way tensor parallelism and 8-way pipeline parallelism\n(Cf. Appendix B.4 for details). Following the calculation in (Chowdhery et al., 2022), we report\nhardware FLOPs utilization (HFU) ', 'into INT4 precision without post training while OPT\nand BLOOM can only reach INT8. Due to a unique property of the GLM architecture, GLM-130B’s\nINT4 quantization introduces negligible performance degradation, e.g., -0.74% on LAMBADA and\neven +0.05% on MMLU, making it still better than the uncompressed GPT-3. This enables GLM-\n130B’s fast inference with performance guarantee on a server of 4 ×RTX 3090 (24G) or 8 ×RTX\n2080 Ti (11G), the most affordable GPU required for using 100B-scale LLMs to date.\n2\x0cPublished as a conference paper at ICLR 2023\nGradient Norm(a) More than 30 failed preliminary trials at 100B-scale (b) Final decisive trials: Sandwich-LN v.s. DeepNorm012345678910111213\n0 500 1k 1.5k 2k2.5k 3k\nFigure 3: Trials on different LayerNorms for GLM-130B training. It turns out that DeepNorm is the\nmost stable one, as it has small gradient norm and does not spike in the early stage training.\nWe open-source the model checkpoints, code, training logs, related toolkits, and lessons learned.\n2 T HEDESIGN CHOICES OF GLM-130B\nThe architecture of a machine learning model defines its inductive bias. However, it has been real-\nized that it is computationally unaffordable to explore various architectural designs for LLMs. We\nintroduce and explain the unique design choices of GLM-130B.\n2.1 GLM-130B’ SARCHITECTURE\nGLM as Backbone. Most recent 100B-scale LLMs, such as GPT-3, PaLM, OPT, and BLOOM,\nfollow the traditional GPT-style (Radford et al., 2019) architecture of decoder-only autoregressive\nlanguage modeling. In GLM-130B, we instead make an attempt to explore the potential of a bidi-\nrectional GLM—General Language Model (Du et al., 2022)—as its backbone.\nGLM is a transformer-based language model that leverages autoregressive blank infilling as its train-\ning objective. Briefly, for a ']","Megatron-LM trained models up to 8.3 billion parameters, sustaining 15.1 PetaFLOPs across 512 GPUs with 76% scaling efficiency.",None,1.0,0.0,0.22742800414562225
What computational approach does PAL use to integrate programmatic reasoning within natural language tasks?,"['PAL: Program-aided Language Models\nLuyu Gao* 1Aman Madaan* 1Shuyan Zhou* 1Uri Alon1Pengfei Liu1 2Yiming Yang1Jamie Callan1\nGraham Neubig1 2\n{luyug,amadaan,shuyanzh,ualon,pliu3,yiming,callan,gneubig }@cs.cmu.edu\nAbstract\nLarge language models (LLMs) have recently\ndemonstrated an impressive ability to perform\narithmetic and symbolic reasoning tasks, when\nprovided with a few examples at test time (“few-\nshot prompting”). Much of this success can be\nattributed to prompting methods such as “chain-\nof-thought”, which employ LLMs for both under-\nstanding the problem description by decomposing\nit into steps, as well as solving each step of the\nproblem. While LLMs seem to be adept at this\nsort of step-by-step decomposition, LLMs often\nmake logical and arithmetic mistakes in the solu-\ntion part, even when the problem is decomposed\ncorrectly. In this paper, we present Program-\nAided Language models ( PAL): a novel approach\nthat uses the LLM to read natural language prob-\nlems and generate programs as the intermediate\nreasoning steps, but ofﬂoads the solution step to a\nruntime such as a Python interpreter. With PAL,\ndecomposing the natural language problem into\nrunnable steps remains the only learning task for\nthe LLM, while solving is delegated to the inter-\npreter. We demonstrate this synergy between a\nneural LLM and a symbolic interpreter across 13\nmathematical, symbolic, and algorithmic reason-\ning tasks from BIG-Bench Hard and other bench-\nmarks. In all these natural language reasoning\ntasks, generating code using an LLM and rea-\nsoning using a Python interpreter leads to more\naccurate results than much larger models. For ex-\nample, PALusing CODEX achieves state-of-the-\nart few-shot accuracy on the GSM 8Kbenchmark\nof math word problems, surpassing PaLM-540 B\nwhich uses chain-of-thought by absolute 15% top-\n1. Our code and data are publicly available at\nhttp://reasonwithpal.com .\n*The ﬁrst three authors contributed equally.1Language Tech-\nnologies Institute, Carnegie Mellon University, ', 'ChatGPT tool.1In contrast to\nthe in-context-learning methods we used in the main paper, here we instruct ChatGPT to perform program-aided reasoning\nthrough one of the user utterances.\nIn Figure 13, in COT-style reasoning, while the reasoning chain is correct, the ﬁnal answer is wrong. In contrast, PAL-style\nreasoning could not only accurately extract the color of objects from the question but also produce the correct lines of code\nto branch to different situations that yield their corresponding correct answers.\nA more intriguing example is letting an LLM count the number of letters in the word “intriguing”. In Figure 14a, while the\nstep-by-step explanation appears reasonable by splitting the letters by spaces, ChatGPT does not change the answer after\nthis explicit reasoning and insists on the wrong answer. Explicitly instructing the model to perform step-by-step reasoning\nbefore answering the question still yields the wrong answer. In contrast, PAL-style reasoning only takes a few lines of code,\nand the execution does produce the correct answer, in this case. These examples indicate that PALcan beneﬁt even an\nostensibly powerful model like ChatGPT.\n1chat.openai.com\x0cPAL: Program-aided Language Models 18\n(a) In C OT style reasoning, the correct intermediate reasoning chain leads to wrong answers.\n(b) In P AL, the execution of the code will produce the correct answer.\nFigure 13: ChatGPT with P AL and C OT to answer a user-posted question\x0cPAL: Program-aided Language Models 19\n(a) Step-by-step reasoning struggle on counting the number of letters in the word “intrigu-\ning” which has ten letters.\n(b) Explicitly instructing ChatGPT to reason step-by-step before generating answer still\nleads to the wrong answer.\n(c) P AL takes a few lines of code and ', 'the execution could result in the correct answer.\nFigure 14: ChatGPT with P AL and C OT to answer a user-posted question\x0cPAL: Program-aided Language Models 20\nG. Closer Look into Token-level Behaviors of Different Mechanisms\nBeyond empirical results, we make initial attempts to gain a deeper understanding of the behavior of LLMs with different\nreasoning mechanisms by looking into the token-level log-likelihood of reasoning chains produced by COTandPAL.\nWe randomly selected 20 questions from the COLORED OBJECTS dataset, along with their corresponding COTandPAL\nsolutions. We then manually compared the two mechanisms by focusing on tokens with a low log-likelihood.\nOur analysis reveals that COToften has lower conﬁdence in tokens related to numbers and quantitative information, the\ngrounded position of spatial adjectives ( e.g., right-most), properties such as the color of objects, and nouns that refer to the\nobjects. Speciﬁcally, we found that this occurred in seven, six, two, and six examples out of the 20 we examined. In contrast,\nPALuses list manipulations, such as len(objects) , and accesses objects and their associated properties through list\nindexing ( e.g.,object[3][0] ). We found that the LLM is typically conﬁdent in producing these programs. Furthermore,\nwe observed that while COTrequires different expressions for the same concept in different contexts, PALalmost always\nuses the same expression, which is presumably more robust. For example, when there are ﬁve objects, COTpredicts “the\nright-most thing is the ﬁfth item on the list”, and “the right-most thing is the third item on the list” when the number of\nobjects is three. Occasionally, COTalso predicts “the right-most thing is lastitem on the list” which does not provide more\nconcrete information. On ']","PAL leverages large language models (LLMs) to generate programs as intermediate reasoning steps for natural language problems, offloading solution steps to a Python interpreter, ensuring accuracy by focusing LLMs on decomposing problems into executable code.","PAL uses a computational approach that involves using a neural LLM to read natural language problems and generate programs as intermediate reasoning steps, but offloads the solution step to a runtime such as a Python interpreter.",1.0,1.0,0.8662465810775757
How does PAL handle tasks involving large numbers differently than models relying on chain-of-thought methodologies?,"['program itself. While this is not guaranteed due to possible spurious\ncorrelations, we manually checked 25 programs and found all of them are correct. For the incorrect 29% of the cases, we\nrunPALagain and perform nucleus sampling (Holtzman et al., 2019) with temperature 0.7, and repeat the above process if\nany correct solution is found. Finally, the authors manually annotate the correct answer for 50remaining cases that PALwas\nnot able to solve after 100 iterations.\nH.2. GSM-HARD Analysis\nTable 11 shows thoughts generated with COTonGSM 8Kand GSM -HARD . A manual analysis reveals that a majority of the\ngenerated thoughts (16/25) were identical for GSM 8Kand GSM -HARD , indicating that larger numbers primarily diminish\nperformance due to failure of LLM to do arithmetic..\x0cPAL: Program-aided Language Models 24\nI. Generalization of PAL to Least-to-Most Prompting\nQ: Four years ago, Kody was only half as old as Mohamed. If Mohamed is currently\ntwice 30 years old, how old is Kody? ↪→\nA: To answer the question ""How old is Kody?"", we need to know: ""How old is Mohamed?"",\n""How old was Mohamed four years ago?"", ""How old was Kody four years ago?"". ↪→\n(a) Least-to-Most Math Reducing Prompt\nFour years ago, Kody was only half as old as Mohamed. If Mohamed is currently twice\n30 years old, how old is Kody? ↪→\nQ: How old was Mohamed four years ago?\nA: We were told that Mohamed is currently twice 30 years old, so he is currently 30 *\n2 = 60 years old. That means that four years ago he must have been 60 - 4 = 56\nyears old. The answer is 56.↪→\n↪→\nQ: How old is ', '23.7%. Similarly, PAL\nvastly outperforms COTby absolute 21.8% on REPEAT\nCOPY. Surprisingly, DIRECT prompting performs better\nthan COTonREPEAT COPY. Yet, PALimproves over\nDIRECT by 9.3% in R EPEAT COPY.\n[0,2] [3,5] [6,8] [9,11] [12,14] [15,17] [18,20] [21,23] [24,26]0.60.81\nNumber of ObjectsAccuracy\nPaL\nCoT\nFigure 6: The solve rate on COLORED OBJECTS with re-\nspect to the number of objects included in the test question.\nIs PAL sensitive to the complexity of the question? We\nexamined how the performance of PALandCOTchange as\nthe complexity of the input question grows, measured as the\nnumber of objects in the question of COLORED OBJECTS .\nAs shown in Figure 6, PALis superior COTacross all input\nlengths. As the number of objects in the question increases,\nCOT’s accuracy is unstable and drops, while PALremains\nconsistently close to 100%. More analysis on the token-level\npredictions can be found in Appendix G.\x0cPAL: Program-aided Language Models 7\ncode-cushman-001 code-davinci-001 code-davinci-002020406080\n21.731.872.0\n19.126.060.1\n13.6%22.3%19.8%Solve ratePAL\nCOT\nRelative Improvement\nFigure 7: PALwith different models on GSM8K: though\nthe absolute accuracies with code-cushman-001\nandcode-davinci-001 are lower than\ncode-davinci-002 , the relative improvement of\nPAL over C OT is consistent across models.text-davinci-001 text-davinci-002 text-davinci-003020406080\n26.546.965.3\n8.665.869.8 COT PAL\nFigure 8: PALwith NL LMs on GSM 8K: though\nCOToutperforms PALwithtext-davinci-001 , once\nthe base LM is sufﬁciently strong, PALis beneﬁcial\nwithtext-davinci-002 andtext-davinci-003\nas well. That is, P AL is not limited to code-LMs only.\n6. Analysis\nDoes P AL work with weaker LMs? In all our experi-\nments in Section 5, PALused thecode-davinci-002\nmodel; but can PALwork with weaker models of code? We\ncompared PALwith COTwhen both prompting approaches\nuse the same weaker base LMs code-cushman-001\nandcode-davinci-001 . As shown in Figure 7, even\nthough the absolute accuracies of code-cushman-001\nandcode-davinci-001 are lower, the relative improve-\nment of PALover COTremains consistent across models.\nThis shows that PALcan ', 'return a single line expression (see Figure 11b) to\ncalculate the result? Results in Table 6 ( 4throw) shows that is not the case. With single-line expressions, the performance of\nPAL falls to the level of direct prompting.\nGenerating the answer directly PALﬁrst generates a reasoning chain in the form of a Python program, and passes the\ngenerated program to a runtime to obtain an answer. Is PALbetter only because of the program-style intermediate reasoning\nchains, or are the improvements derived from ofﬂoading execution to the Python runtime? To investigate this, we experiment\nwith a variant that forces the LLM to generate the answer after generating the reasoning chain (Figure 11e). This setting\ncompels the LLM to condition on the generated code-based reasoning to generate an answer, simulating the runtime. The\nresults in Table 6 ( 5throw) show that the solve rate drops to near DIRECT levels. This reinforces our hypothesis that while\ncurrent LLMs can be excellent at specifying a high-level plan to solve a task—they are still incapable of executing them.\nAblation Solve Rate\nDIRECT (no intermediate reasoning) 19.7\nCOT 65.6\nPAL 72.0\nSuccinct Code 47.8\nLLM Simulating Runtime 23.2\nTable 6: Solve Rates for Ablations\nC. Effect of Using Language Models of Code\nIn our experiments, we focused on evaluating the performance of a language model for code. We aimed to investigate\nwhether the additional performance boost observed in our results was due to the use of models like Codex, or whether our\nformulation was useful even for text-based models. To this end, we conducted additional experiments using text-based\nlanguage models. Our ﬁndings indicate that the PAL approach is not restricted to working solely ']","For tasks with large numbers, PAL demonstrates robust performance by leveraging the Python interpreter for accurate calculations, contrasting with chain-of-thought methodologies where performance drops due to LLMs' computational limitations.",The context does not provide information on how PAL handles tasks involving large numbers differently than models relying on chain-of-thought methodologies. None,0.0,0.0,0.6291572451591492
Describe the process and tools provided by CodeNet for transforming code samples into machine-learning-friendly formats.,"['in code recommendation algorithms, and code translation\nbetween a large variety of programming languages, to advances in code performance improvement\ntechniques. We hope that the scale, diversity and rich, high-quality annotations of CodeNet will offer\nunprecedented research opportunities at the intersection of AI and Software Engineering.\n11 Acknowledgements\nWe would like to acknowledge AIZU and AtCoder for making the code submissions publicly available.\nWe would like to thank the IBM Data Asset eXchange team for providing a platform to host the\nCodeNet dataset. We would like to thank the Women in Data Science team at Stanford University\nand the IBM Call for Code team for their collaboration in launching the CodeNet challenge.\n12 Bibliography\n[1]Miltiadis Allamanis, Earl T Barr, Premkumar Devanbu, and Charles Sutton. A survey of\nmachine learning for big code and naturalness. ACM Computing Surveys (CSUR) , 51(4):1–37,\n2018.\n[2]Yanming Yang, Xin Xia, David Lo, and John Grundy. A survey on deep learning for software\nengineering. arXiv preprint arXiv:2011.14597 , 2020.\n[3]Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira Pinto,\nJared Kaplan, Harri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, Alex Ray, Raul\nPuri, Gretchen Krueger, Michael Petrov, Heidy Khlaaf, Girish Sastry, Pamela Mishkin, Brooke\nChan, Scott Gray, Nick Ryder, Mikhail Pavlov, Alethea Power, Lukasz Kaiser, Mohammad\nBavarian, Clemens Winter, Philippe Tillet, Felipe Petroski Such, Dave Cummings, Matthias\nPlappert, Fotios Chantzis, Elizabeth Barnes, Ariel Herbert-V oss, William Hebgen Guss, Alex\nNichol, Alex Paino, Nikolas Tezak, Jie Tang, Igor Babuschkin, Suchir Balaji, Shantanu Jain,\nWilliam Saunders, Christopher Hesse, Andrew N. Carr, Jan Leike, Josh Achiam, Vedant Misra,\nEvan Morikawa, Alec Radford, Matthew Knight, Miles Brundage, Mira Murati, Katie Mayer,\nPeter Welinder, Bob McGrew, Dario Amodei, ', 'for source code exist, with many targeting one or a small number of\ntasks. Such tasks include clone detection, vulnerability detection [ 10,11], cloze test [ 12], code\ncompletion [ 13,14], code repair [ 15], code-to-code translation, natural language code search [ 16],\ntext-to-code generation [ 17], and code summarization [ 16]. A detailed discussion of several of these\ntasks and their respective datasets is available in CodeXGLUE [ 18], which is a collection of existing\ndatasets. CodeNet, on the other hand, is a new dataset curated from scratch, that aims to support a\nbroad set of use cases. Popular datasets of a similar kind are POJ-104 [ 19] (which is incorporated as\npart of CodeXGLUE as well) and GCJ [ 20] (derived from Google Code Jam). We compare CodeNet\nto these datasets in the following.\n3.1 POJ-104\nPOJ-104 was collected from a pedagogical online judge system. The code samples are submissions\nto 104 programming problems. With 500 submissions to each problem, there is a total of 52,000 code\nsamples in the dataset. This dataset has been used by many authors for code classiﬁcation [ 19] and\ncode similarity [21].\nPOJ-104 is faced with several limitations.\n1.The code samples are in C and C++, but the two languages are not distinguished. Although they are\nclosely related, mixing them leads to parsing errors and a reduction of useful code samples [21].\n2.Useful metadata such as the results of the judging system (acceptance, error types etc.) are missing.\nTherefore, for certain applications where compilabilty or code correctness is important, additional\npre-processing efforts are needed and useful code samples are reduced [ 21]. The dataset does\nnot contain the ', 'large collection of code samples with extensive metadata. It\nalso contains documented tools to transform code samples into intermediate representations and to\naccess the dataset and make tailored selections. Our goal is to provide the community with a large,\nhigh-quality curated dataset that can be used to advance AI techniques for source code.\nCodeNet is derived from the data available on two online judge websites: AIZU [ 8] and AtCoder [ 9].\nOnline judge websites pose programming problems in the form of courses and contests. The dataset\nconsists of submissions to these problems, which are judged by an automated review process for\ncorrectness. Problem descriptions, submission outcomes, and associated metadata are available via\nvarious REST APIs.\nScale and Statistics. CodeNet contains a total of 13,916,868 submissions, divided into 4053\nproblems. Among the submissions, 53.6% (7,460,588) are accepted (compilable and pass the\nprescribed tests), 29.5% are marked with wrong answer, and the remaining rejected due to their\nfailure to meet run time or memory requirements. To our knowledge, this is the largest dataset so\nfar among similar kinds. Submissions are in 55 different languages; 95% of them are coded in C++,\nPython, Java, C, Ruby, and C#. C++ is the most common language, with 8,008,527 submissions (57%\nof the total), of which 4,353,049 are accepted. With the abundance of code samples, users can extract\nlarge benchmark datasets that are customized to their downstream use. See Figure 1 for a summary.\nDiversity. The problems in CodeNet are mainly pedagogical and range from elementary exercises\nto sophisticated problems that require advanced algorithms. The submitters range from beginners\nto experienced coders. Some submissions are correct while others contain different ']","CodeNet offers pre-processing tools for tokenization, simplified parse tree generation, and code graph formation, easing the transformation of code into representations for machine learning models.","CodeNet provides documented tools to transform code samples into intermediate representations and access the dataset for making tailored selections. This includes tools for converting code samples into machine-learning-friendly formats, such as representations that are suitable for training neural networks or other AI models. These tools streamline the process of working with the CodeNet dataset and enable researchers to leverage the large, high-quality curated dataset for advancing AI techniques in source code analysis and other related tasks.",1.0,0.5,0.7917186617851257
What specific challenges do the tasks in SuperGLUE address in natural language processing?,"['high-level goals, the original version of\nthe benchmark is no longer a suitable metric for quantifying such progress.\nIn response, we introduce SuperGLUE, a new benchmark designed to pose a more rigorous test of\nlanguage understanding. SuperGLUE has the same high-level motivation as GLUE: to provide a\nsimple, hard-to-game measure of progress toward general-purpose language understanding technolo-\ngies for English. We anticipate that signiﬁcant progress on SuperGLUE should require substantive\ninnovations in a number of core areas of machine learning, including sample-efﬁcient, transfer,\nmultitask, and unsupervised or self-supervised learning.\nSuperGLUE follows the basic design of GLUE: It consists of a public leaderboard built around\neight language understanding tasks, drawing on existing data, accompanied by a single-number\nperformance metric, and an analysis toolkit. However, it improves upon GLUE in several ways:\nMore challenging tasks: SuperGLUE retains the two hardest tasks in GLUE. The remaining tasks\nwere identiﬁed from those submitted to an open call for task proposals and were selected based on\ndifﬁculty for current NLP approaches.\nMore diverse task formats: The task formats in GLUE are limited to sentence- and sentence-pair\nclassiﬁcation. We expand the set of task formats in SuperGLUE to include coreference resolution\nand question answering (QA).\nComprehensive human baselines: We include human performance estimates for all benchmark\ntasks, which verify that substantial headroom exists between a strong BERT-based baseline and\nhuman performance.\nImproved code support: SuperGLUE is distributed with a new, modular toolkit for work on\npretraining, multi-task learning, and transfer learning in NLP, built around standard tools including\nPyTorch (Paszke et al., 2017) and AllenNLP (Gardner et al., 2017).\nReﬁned usage rules: The conditions for inclusion on the SuperGLUE leaderboard have been\nrevamped to ensure fair ', 'corresponds well to human\njudgments of output quality. Some text generation tasks fail to meet this criteria due to issues with\nautomatic metrics like ROUGE and BLEU (Callison-Burch et al., 2006; Liu et al., 2016, i.a.).\n4\x0cPublic data: We require that tasks have existing public training data in order to minimize the risks\ninvolved in newly-created datasets. We also prefer tasks for which we have access to (or could create)\na test set with private labels.\nTask format: We prefer tasks that had relatively simple input and output formats, to avoid incentiviz-\ning the users of the benchmark to create complex task-speciﬁc model architectures. Still, while GLUE\nis restricted to tasks involving single sentence or sentence pair inputs, for SuperGLUE we expand\nthe scope to consider tasks with longer inputs. This yields a set of tasks that requires understanding\nindividual tokens in context, complete sentences, inter-sentence relations, and entire paragraphs.\nLicense: Task data must be available under licences that allow use and redistribution for research\npurposes.\nTo identify possible tasks for SuperGLUE, we disseminated a public call for task proposals to the\nNLP community, and received approximately 30 proposals. We ﬁltered these proposals according\nto our criteria. Many proposals were not suitable due to licensing issues, complex formats, and\ninsufﬁcient headroom; we provide examples of such tasks in Appendix D. For each of the remaining\ntasks, we ran a BERT-based baseline and a human baseline, and ﬁltered out tasks which were either\ntoo challenging for humans without extensive training or too easy for our machine baselines.\n3.2 Selected Tasks\nFollowing this process, we arrived at eight tasks to use in SuperGLUE. See Tables 1 and 2 ', 'SuperGLUE: A Stickier Benchmark for\nGeneral-Purpose Language Understanding Systems\nAlex Wang∗\nNew York UniversityYada Pruksachatkun∗\nNew York UniversityNikita Nangia∗\nNew York University\nAmanpreet Singh∗\nFacebook AI ResearchJulian Michael\nUniversity of WashingtonFelix Hill\nDeepMindOmer Levy\nFacebook AI Research\nSamuel R. Bowman\nNew York University\nAbstract\nIn the last year, new models and methods for pretraining and transfer learning have\ndriven striking performance improvements across a range of language understand-\ning tasks. The GLUE benchmark, introduced a little over one year ago, offers\na single-number metric that summarizes progress on a diverse set of such tasks,\nbut performance on the benchmark has recently surpassed the level of non-expert\nhumans, suggesting limited headroom for further research. In this paper we present\nSuperGLUE, a new benchmark styled after GLUE with a new set of more difﬁ-\ncult language understanding tasks, a software toolkit, and a public leaderboard.\nSuperGLUE is available at super.gluebenchmark.com .\n1 Introduction\nRecently there has been notable progress across many natural language processing (NLP) tasks, led\nby methods such as ELMo (Peters et al., 2018), OpenAI GPT (Radford et al., 2018), and BERT\n(Devlin et al., 2019). The unifying theme of these methods is that they couple self-supervised learning\nfrom massive unlabelled text corpora with effective adapting of the resulting model to target tasks.\nThe tasks that have proven amenable to this general approach include question answering, textual\nentailment, and parsing, among many others (Devlin et al., 2019; Kitaev et al., 2019, i.a.).\nIn this context, the GLUE benchmark (Wang et al., 2019a) has become a prominent evaluation\nframework for research towards general-purpose language understanding technologies. GLUE is\na collection of nine language understanding tasks built on existing public datasets, together with\nprivate test data, an evaluation server, a single-number ']","The tasks challenge models on various fronts, including deep textual understanding, commonsense reasoning, fine-grained word sense disambiguation, and the ability to handle ambiguity and complexity in language, reflecting a broad spectrum of NLP challenges.","Substantive innovations in core areas of machine learning, including sample-efficient, transfer, multitask, and unsupervised or self-supervised learning.",1.0,1.0,0.23035049438476562
"How does SuperGLUE's scoring system work, and what does it aim to achieve?","['limitations, we believe that\nWinogender’s inclusion is worthwhile in providing a coarse sense of how social biases evolve with\nmodel performance and for keeping attention on the social ramiﬁcations of NLP models.\n4 Using SuperGLUE\nSoftware Tools To facilitate using SuperGLUE, we release jiant (Wang et al., 2019b),4a modular\nsoftware toolkit, built with PyTorch (Paszke et al., 2017), components from AllenNLP (Gardner\net al., 2017), and the transformers package.5jiant implements our baselines and supports the\nevaluation of custom models and training methods on the benchmark tasks. The toolkit includes\nsupport for existing popular pretrained models such as OpenAI GPT and BERT, as well as support\nfor multistage and multitask learning of the kind seen in the strongest models on GLUE.\nEligibility Any system or method that can produce predictions for the SuperGLUE tasks is eligible\nfor submission to the leaderboard, subject to the data-use and submission frequency policies stated\nimmediately below. There are no restrictions on the type of methods that may be used, and there is\nno requirement that any form of parameter sharing or shared initialization be used across the tasks in\nthe benchmark. To limit overﬁtting to the private test data, users are limited to a maximum of two\nsubmissions per day and six submissions per month.\nData Data for the tasks are available for download through the SuperGLUE site and through a\ndownload script included with the software toolkit. Each task comes with a standardized training set,\ndevelopment set, and unlabeled test set. Submitted systems may use any public or private data when\ndeveloping their systems, with a few exceptions: Systems may only use the SuperGLUE-distributed\nversions of the task datasets, as ', 'evaluation of GLM-130B on the SuperGLUE (Wang et al., 2019) benchmark,\nwhich consists 8 different natural language understanding challenges. Noted that these results\nare neither zero/few-shot nor fine-tuned results, because 7 out of 8 tasks’ training sets have been\nincluded in GLM-130B’s MIP training (except for ReCoRD) together with other 67 multi-task\ndatasets; however, GLM-130B is also not individually fine-tuned on any of them. Therefore, these\nresults are not for relative comparison for any other models’, but only for readers’ reference on\nGLM-130B’s absolute ability.\n44\x0cPublished as a conference paper at ICLR 2023\ncb record wsc multirc rte wic copa boolq20406080100\nGLM-130B (uni)\nGLM-130B (bi)\nFigure 17: GLM-130B (uni and bi)’s untuned results on SuperGLUE development set, using prompt-\nsource (Bach et al., 2022) prompts and task formulation. DISCLAIMER: Noted that some of the\nSuperGLUE training sets have been included in the MIP training. We report the results here\nonly for readers’ reference.\nSports LLC Coin Flip Coin Flip (OOD: 3) Reverse List Date020406080100\n54.0\n1.084.5\n47.953.1\n15.773.7\n13.495.0\n58.668.3\n27.9Standard Prompting Chain-of-Thoughts\nFigure 18: Chain-of-thought prompting can also improve GLM-130B’s performance on reasoning\ntasks compared to standard prompting.\nBoolQ CB COPA MultiRC ReCoRD RTE WiC WSC\nGLM-130B 89.69 98.21 100 89.32 92.11 94.22 76.96 88.5\nTable 21: The results of GLM-130B on the SuperGLUE dataset obtained using the P-tuning v2 (Liu\net al., 2022). We report the Accuracy metric for all datasets except for MultiRC (F1a) and ReCoRD\n(F1).\nThe results are presented in Figure 17. We ablate the unidirectional and bidirectional GLM-130B to\njustify the usefulness of GLM objective in boosting LLMs’ ability to understand. Each point in the\nfigure refers to a prompt-specific result, for which the prompt is from the promptsource (Bach et al.,\n2022) ', 'high-level goals, the original version of\nthe benchmark is no longer a suitable metric for quantifying such progress.\nIn response, we introduce SuperGLUE, a new benchmark designed to pose a more rigorous test of\nlanguage understanding. SuperGLUE has the same high-level motivation as GLUE: to provide a\nsimple, hard-to-game measure of progress toward general-purpose language understanding technolo-\ngies for English. We anticipate that signiﬁcant progress on SuperGLUE should require substantive\ninnovations in a number of core areas of machine learning, including sample-efﬁcient, transfer,\nmultitask, and unsupervised or self-supervised learning.\nSuperGLUE follows the basic design of GLUE: It consists of a public leaderboard built around\neight language understanding tasks, drawing on existing data, accompanied by a single-number\nperformance metric, and an analysis toolkit. However, it improves upon GLUE in several ways:\nMore challenging tasks: SuperGLUE retains the two hardest tasks in GLUE. The remaining tasks\nwere identiﬁed from those submitted to an open call for task proposals and were selected based on\ndifﬁculty for current NLP approaches.\nMore diverse task formats: The task formats in GLUE are limited to sentence- and sentence-pair\nclassiﬁcation. We expand the set of task formats in SuperGLUE to include coreference resolution\nand question answering (QA).\nComprehensive human baselines: We include human performance estimates for all benchmark\ntasks, which verify that substantial headroom exists between a strong BERT-based baseline and\nhuman performance.\nImproved code support: SuperGLUE is distributed with a new, modular toolkit for work on\npretraining, multi-task learning, and transfer learning in NLP, built around standard tools including\nPyTorch (Paszke et al., 2017) and AllenNLP (Gardner et al., 2017).\nReﬁned usage rules: The conditions for inclusion on the SuperGLUE leaderboard have been\nrevamped to ensure fair ']"," SuperGLUE uses a single-number metric averaging task scores to simplify comparison across models, aiming to provide a clear, comprehensive measure of progress on a wide range of language understanding tasks.","SuperGLUE's scoring system works by providing a single-number performance metric on a public leaderboard for eight language understanding tasks. The aim of SuperGLUE is to pose a more rigorous test of language understanding, requiring substantive innovations in machine learning areas such as sample-efficient, transfer, multitask, and unsupervised learning. It retains challenging tasks from GLUE, introduces more diverse task formats, includes human performance estimates, provides improved code support, and has refined usage rules to ensure fair competition and measure progress towards general-purpose language understanding technologies for English.",1.0,1.0,0.8511787056922913
"What practical meta-task is Task2Vec particularly designed to optimize, and how does it achieve this?","['task,\nand (2) jointly embed the models and tasks, and select a\nmodel using the learned metric (see Section 4). Notice that\n(1) does not use knowledge of the model performance on\nvarious tasks, which makes it more widely applicable but\nrequires we know what task a model was trained for and\nmay ignore the fact that models trained on slightly differ-\nent tasks may still provide an overall better feature extrac-\ntor (for example by over-ﬁtting less to the task they were\ntrained on).\nIn Table 2 we compare the overall results of the various\nproposed metrics on the model selection meta-tasks. On\nboth the iNat+CUB and Mixed meta-tasks, the Asymmetric\nTASK 2VEC model selection is close to the ground-truth op-\ntimal, and signiﬁcantly improves over both chance, and over\nusing an generic ImageNet expert. Notice that our method\nhasO(1)complexity, while searching over a collection of\nNexperts isO(N).\nError distribution In Fig. 3 we show in detail the error\ndistribution of the experts on multiple tasks. It is interesting\nto notice that the classiﬁcation error obtained using most ex-\nperts clusters around some mean value, and little improve-\nment is observed over using a generic expert. On the other\nhand, a few optimal experts can obtain a largely better per-\nformance on the task than a generic expert. This conﬁrms\nthe importance of having access to a large collection of ex-\nperts when solving a new task, especially if few training\ndata are available. But this collection can only be efﬁciently\nexploited if an algorithm is given to efﬁciently ﬁnd one of\nthe few experts for the task, which we propose.\nDependence on task dataset size Finding experts is es-\npecially important when the task we ', 'embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ', 'on each task.\nA similar approach has been taken in computer vision for\nselecting a detector for a new category out of a large library\nof detectors [26, 40, 38].\n7. Discussion\nTASK 2VEC is an efﬁcient way to represent a task, or the\ncorresponding dataset, as a ﬁxed dimensional vector. It has\nseveral appealing properties, in particular its norm corre-\nlates with the test error obtained on the task, and the co-\nsine distance between embeddings correlates with natural\ndistances between tasks, when available, such as the taxo-\nnomic distance for species classiﬁcation, and the ﬁne-tuning\ndistance for transfer learning. Having a representation of\ntasks paves the way for a wide variety of meta-learning\ntasks. In this work, we focused on selection of an expert\nfeature extractor in order to solve a new task, especially\nwhen little training data is present, and showed that using\nTASK 2VEC to select an expert from a collection can sen-\nsibly improve test performance while adding only a small\noverhead to the training process.\x0cMeta-learning on the space of tasks is an important step\ntoward general artiﬁcial intelligence. In this work, we in-\ntroduce a way of dealing with thousands of tasks, enough to\nenable reconstruct a topology on the task space, and to test\nmeta-learning solutions. The current experiments highlight\nthe usefulness of our methods. Even so, our collection does\nnot capture the full complexity and variety of tasks that one\nmay encounter in real-world situations. Future work should\nfurther test effectiveness, robustness, and limitations of the\nembedding on larger and more diverse collections.\nReferences\n[1] iMaterialist Challenge (Fashion) at FGVC5 workshop,\nCVPR 2018. https://www.kaggle.com/c/\nimaterialist-challenge-fashion-2018 .\n5\n[2] S. M. Abdulrahman, P. Brazdil, J. N. van Rijn, and J. Van-\nschoren. Speeding up ']",Task2Vec is designed for selecting the most suitable pre-trained feature extractor for a new task by learning a metric on task embeddings to predict feature extractor performance.,"Task2Vec is particularly designed to optimize the practical meta-task of selecting a pre-trained feature extractor from a set in order to obtain the best performance on a new training task. It achieves this by representing tasks, or the corresponding dataset, as fixed-dimensional vectors. The norm of the vectors correlates with the test error obtained on the task, and the cosine distance between the embeddings correlates with natural distances between tasks. This allows for efficient selection of an expert feature extractor for a new task, especially when limited training data is available, leading to improved test performance with minimal overhead in the training process.",1.0,1.0,0.8518930077552795
In what way does Task2Vec's asymmetric distance measure contribute to task similarity assessment and model selection?,"['embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ', 'the division\nis element-wise. This is a symmetric distance which we ex-\npect to capture semantic similarity between two tasks. For\nexample, we show in Fig. 2 that it correlates well with the\ntaxonomical distance between species on iNaturalist.\nOn the other hand, precisely for this reason, this distance\nis ill-suited for tasks such as model selection, where the (in-\ntrinsically asymmetric) transfer distance is more relevant.\nAsymmetric TASK 2VEC distance In a ﬁrst approxima-\ntion, that does not consider either the model or the training\nprocedure used, positive transfer between two tasks depends\nboth on the similarity between two tasks and on the com-\nplexity of the ﬁrst. Indeed, pre-training on a general but\ncomplex task such as ImageNet often yields a better result\nthan ﬁne-tuning from a close dataset of comparable com-\nplexity. In our case, complexity can be measured as the dis-\ntance from the trivial embedding. This suggests the follow-\ning asymmetric score, again improperly called a “distance”\ndespite being asymmetric and possibly negative:\ndasym(ta→tb) =dsym(ta,tb)−αdsym(ta,t0),\nwheret0is the trivial embedding, and αis an hyperparam-\neter. This has the effect of bring more complex models\ncloser. The hyper-parameter αcan be selected based on\nthe meta-task. In our experiments, we found that the best\nvalue ofα(α= 0.15when using a ResNet-34 pretrained\non ImageNet as the probe network) is robust to the choice\nof meta-tasks.\n4.MODEL 2VEC: task/model co-embedding\nBy construction, the TASK 2VEC distance ignores details\nof the model and only relies on the task. If we know what\ntask a model was trained on, we can represent the model by\nthe embedding of that task. However, in general we may\nnot have such information ( e.g., black-box models or hand-\nconstructed feature extractors). We may also ', 'varying k).\nEncoding task difﬁculty: As we can see from the ex-\npressions above, if the ﬁt model is very conﬁdent in its pre-\ndictions, E[(y−p)2]goes to zero. Hence, the norm of the\ntask embedding∥F∥⋆scales with the difﬁculty of the task\nfor a given feature extractor φ. Figure 2 (Right) shows that\neven for more complex models trained on real data, the FIM\nnorm correlates with test performance.\nEncoding task domain: Data points xthat are classi-\nﬁed with high conﬁdence, i.e., pis close to 0 or 1, will\nhave a lower contribution to the task embedding than points\x0c0 25 50 75 100 125\nSize k of neighborhood1.01.52.02.53.0Avg. top-k tax. distanceTask2Vec distance\nTax. distance\n0.4 0.6 0.8\nL1 norm of task embedding1e80%10%20%30%40%50%60%Test error on task (%)\nFigure 2: Distance between species classiﬁcation tasks. (Left) Task similarity matrix ordered by hierarchical clustering.\nNote that the dendrogram produced by the task similarity matches the taxonomic clusters (indicated by color bar). (Center)\nFor tasks extracted from iNaturalist and CUB, we compare the cosine distance between tasks to their taxonomical distance.\nAs the size of the task embedding neighborhood increases (measured by number of tasks in the neighborhood), we plot the\naverage taxonomical distance of tasks from the neighborhood center. While the task distance does not perfectly match the\ntaxonomical distance (whose curve is shown in orange), it shows a good correlation. Difference are both due to the fact that\ntaxonomically close species may need very different features to be classiﬁed, creating a mismatch between the two notions\nof distance, and because for some tasks in iNaturalist too few samples are provided to compute a good embedding. (Right)\nCorrelation between L1norm of the task ']","The asymmetric distance accounts for task complexity and transferability, aiding in selecting feature extractors by evaluating their proximity to a task in the embedding space.","Task2Vec's asymmetric distance measure contributes to task similarity assessment and model selection by taking into account both the similarity between two tasks and the complexity of the first task. This measure considers positive transfer between tasks based on their similarity and the complexity of the first task, which can be measured as the distance from the trivial embedding. By incorporating task complexity into the distance calculation, the asymmetric measure can bring more complex models closer, thereby helping in better assessing task similarity and selecting models that are more suitable for certain tasks.",1.0,1.0,0.7345696687698364
Describe the computational approach to obtaining Task2Vec embeddings using a probe network.,"['TASK2VEC: Task Embedding for Meta-Learning\nAlessandro Achille\nUCLA and AWS\nachille@cs.ucla.eduMichael Lam\nAWS\nmichlam@amazon.comRahul Tewari\nAWS\ntewarir@amazon.comAvinash Ravichandran\nAWS\nravinash@amazon.com\nSubhransu Maji\nUMass and AWS\nsmmaji@amazon.comCharless Fowlkes\nUCI and AWS\nfowlkec@amazon.comStefano Soatto\nUCLA and AWS\nsoattos@amazon.comPietro Perona\nCaltech and AWS\nperonapp@amazon.com\nAbstract\nWe introduce a method to provide vectorial represen-\ntations of visual classiﬁcation tasks which can be used\nto reason about the nature of those tasks and their re-\nlations. Given a dataset with ground-truth labels and a\nloss function deﬁned over those labels, we process images\nthrough a “probe network” and compute an embedding\nbased on estimates of the Fisher information matrix asso-\nciated with the probe network parameters. This provides a\nﬁxed-dimensional embedding of the task that is independent\nof details such as the number of classes and does not require\nany understanding of the class label semantics. We demon-\nstrate that this embedding is capable of predicting task sim-\nilarities that match our intuition about semantic and tax-\nonomic relations between different visual tasks ( e.g., tasks\nbased on classifying different types of plants are similar).\nWe also demonstrate the practical value of this framework\nfor the meta-task of selecting a pre-trained feature extractor\nfor a new task. We present a simple meta-learning frame-\nwork for learning a metric on embeddings that is capable of\npredicting which feature extractors will perform well. Se-\nlecting a feature extractor with task embedding obtains a\nperformance close to the best available feature extractor,\nwhile costing substantially less than exhaustively training\nand evaluating on all available feature extractors.\n1. Introduction\nThe success of Deep Learning hinges in part on the fact\nthat models learned for one task can be used on other related\ntasks. Yet, no general framework exists to describe and\nlearn relations between tasks. We introduce the TASK 2VEC\nembedding, a technique to ', 'embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ', 'are interested in has\nrelatively few samples. In Fig. 4 we show how the perfor-\nmance of TASK 2VEC varies on a model selection task as the\nnumber of samples varies. At all sample sizes TASK 2VEC is\nclose to the optimum, and improves over selecting a generic\nexpert (ImageNet), both when ﬁne-tuning and when train-\ning only a classiﬁer. We observe that the best choice of ex-\nperts is not affected by the dataset size, and that even with\nfew examples TASK 2VEC is able to ﬁnd the optimal experts.\nChoice of probe network In Table 1 we show that\nDenseNet [15] and ResNet architectures [11] perform sig-\nniﬁcantly better when used as probe networks to compute\ntheTASK 2VEC embedding than a VGG [32] architecture.\n6. Related Work\nTask and Domain embedding. Tasks distinguished by\ntheir domain can be understood simply in terms of image\nstatistics. Due to the bias of different datasets, sometimes a\nbenchmark task may be identiﬁed just by looking at a few\nimages [34]. The question of determining what summary\x0cMeta-task Optimal Chance ImageNet TASK 2VEC Asymmetric TASK 2VEC MODEL 2VEC\niNat + CUB 31.24 +59.52% +30.18% +42.54% +9.97% +6.81%\nMixed 22.90 +112.49% +75.73% +40.30% +29.23% +27.81%\nTable 2: Model selection performance of different metrics. Average optimal error obtained on two meta-learning tasks\nby exhaustive search over the best expert, and relative error increase when using cheaper model selection methods. Always\npicking a ﬁxed good general model ( e.g., a model pretrained on ImageNet) performs better than picking an expert at random\n(chance). However, picking an expert using the Asymmetric TASK 2VEC distance can achieve an overall better performance\nthan using a general model. Notice also the ']","Task2Vec embeddings are obtained by processing images through a pre-trained probe network, retraining the classifier layer for the specific task, and computing the FIM of the network filter parameters.","The computational approach to obtaining Task2Vec embeddings involves processing images through a ""probe network"" and computing an embedding based on estimates of the Fisher information matrix associated with the probe network parameters. This provides a fixed-dimensional embedding of the task that is independent of details such as the number of classes and does not require any understanding of the class label semantics. The probe network is used to encode useful features for the task by capturing the sensitivity of the loss function to model parameters, specifically focusing on data near the decision boundary (task-weighted domain embedding). The diagonal entries of the Fisher information matrix represent the curvature of the loss function, while a domain embedding based on feature activations of the probe network reflects which features vary over the dataset without indicating their relevance to the task.",1.0,1.0,0.7513269186019897
What limitations does Task2Vec face regarding its ability to capture the full complexity of tasks in real-world applications?,"['task,\nand (2) jointly embed the models and tasks, and select a\nmodel using the learned metric (see Section 4). Notice that\n(1) does not use knowledge of the model performance on\nvarious tasks, which makes it more widely applicable but\nrequires we know what task a model was trained for and\nmay ignore the fact that models trained on slightly differ-\nent tasks may still provide an overall better feature extrac-\ntor (for example by over-ﬁtting less to the task they were\ntrained on).\nIn Table 2 we compare the overall results of the various\nproposed metrics on the model selection meta-tasks. On\nboth the iNat+CUB and Mixed meta-tasks, the Asymmetric\nTASK 2VEC model selection is close to the ground-truth op-\ntimal, and signiﬁcantly improves over both chance, and over\nusing an generic ImageNet expert. Notice that our method\nhasO(1)complexity, while searching over a collection of\nNexperts isO(N).\nError distribution In Fig. 3 we show in detail the error\ndistribution of the experts on multiple tasks. It is interesting\nto notice that the classiﬁcation error obtained using most ex-\nperts clusters around some mean value, and little improve-\nment is observed over using a generic expert. On the other\nhand, a few optimal experts can obtain a largely better per-\nformance on the task than a generic expert. This conﬁrms\nthe importance of having access to a large collection of ex-\nperts when solving a new task, especially if few training\ndata are available. But this collection can only be efﬁciently\nexploited if an algorithm is given to efﬁciently ﬁnd one of\nthe few experts for the task, which we propose.\nDependence on task dataset size Finding experts is es-\npecially important when the task we ', 'embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ', 'are interested in has\nrelatively few samples. In Fig. 4 we show how the perfor-\nmance of TASK 2VEC varies on a model selection task as the\nnumber of samples varies. At all sample sizes TASK 2VEC is\nclose to the optimum, and improves over selecting a generic\nexpert (ImageNet), both when ﬁne-tuning and when train-\ning only a classiﬁer. We observe that the best choice of ex-\nperts is not affected by the dataset size, and that even with\nfew examples TASK 2VEC is able to ﬁnd the optimal experts.\nChoice of probe network In Table 1 we show that\nDenseNet [15] and ResNet architectures [11] perform sig-\nniﬁcantly better when used as probe networks to compute\ntheTASK 2VEC embedding than a VGG [32] architecture.\n6. Related Work\nTask and Domain embedding. Tasks distinguished by\ntheir domain can be understood simply in terms of image\nstatistics. Due to the bias of different datasets, sometimes a\nbenchmark task may be identiﬁed just by looking at a few\nimages [34]. The question of determining what summary\x0cMeta-task Optimal Chance ImageNet TASK 2VEC Asymmetric TASK 2VEC MODEL 2VEC\niNat + CUB 31.24 +59.52% +30.18% +42.54% +9.97% +6.81%\nMixed 22.90 +112.49% +75.73% +40.30% +29.23% +27.81%\nTable 2: Model selection performance of different metrics. Average optimal error obtained on two meta-learning tasks\nby exhaustive search over the best expert, and relative error increase when using cheaper model selection methods. Always\npicking a ﬁxed good general model ( e.g., a model pretrained on ImageNet) performs better than picking an expert at random\n(chance). However, picking an expert using the Asymmetric TASK 2VEC distance can achieve an overall better performance\nthan using a general model. Notice also the ']","While effective, Task2Vec's embeddings may not fully capture the entire spectrum of task complexity and diversity found in broader real-world applications, indicating room for future enhancements.","The limitations that Task2Vec faces regarding its ability to capture the full complexity of tasks in real-world applications include:
1. Task2Vec may not consider the performance of models on various tasks, which can limit its effectiveness in selecting the best model for a specific task.
2. Models trained on slightly different tasks may still be effective in providing overall better feature extraction, but Task2Vec may ignore this aspect.
3. Task2Vec may not fully exploit the importance of having access to a large collection of experts when solving a new task, especially when limited training data are available.
4. Task2Vec's effectiveness may be impacted by the size of the task dataset, as it is especially important to find experts near the decision boundary, which may not always be captured effectively by the algorithm.
5. Task2Vec may not fully capture the semantic similarity or taxonomic distance between tasks, which can limit its ability to select the optimal pre-trained feature extractor for a new training task.",1.0,1.0,0.67212975025177
"How does GLM-130B manage to achieve INT4 weight quantization without post-training, and what are the benefits?","['INT4 version\nhelps additionally save half of the required GPU memory to 70GB, thus allowing GLM-130B infer-\nence on 4 ×RTX 3090 Ti (24G) or 8 ×RTX 2080 Ti (11G). Performance-wise, Table 2 left indicates\nthat without post-training at all, the INT4-version GLM-130B experiences almost no performance\ndegradation, thus maintaining the performance advantages over GPT-3 on common benchmarks.\nGLM’s INT4 Weight Quantization Scaling Law. We examine the underlying mechanism of this\nunique INT4 weight quantization scaling law exhibited in Figure 5 right. We plot the weight value\ndistributions in Figure 5 left, which turns out to directly impact the quantization quality. Specifically,\na wider-distributed linear layer needs to be quantized with larger bins, leading to more precision loss.\nThus the wide-distributed attn-dense andw2matrices explain the INT4 quantization failure for\nGPT-style BLOOM. Conversely, GLMs tend to have much narrower distributions than those of\nsimilar-sized GPTs, and the gap between INT4 and FP16 versions keeps further decreasing as the\nGLM model size scales up (Cf. Figure 15 in Appendix for details).\n5 T HERESULTS\nWe follow the common settings in LLMs such as GPT-3 and PaLM to evaluate GLM-130B for\nEnglish1. As a bilingual LLM with Chinese, GLM-130B is also evaluated on Chinese benchmarks.\nDiscussion on the Scope of Zero-Shot Learning in GLM-130B. Since GLM-130B has been\ntrained with MIP, here we clarify its scope of zero-shot evaluation. In fact, “zero-shot” seems to\nhave controversial interpretations without a consensus in the community. We follow one of the in-\nfluential related surveys (Xian et al., 2018), which says “At test time, in zero-shot learning setting,\nthe aim is to assign a test image to an unseen class label” where ', 'into INT4 precision without post training while OPT\nand BLOOM can only reach INT8. Due to a unique property of the GLM architecture, GLM-130B’s\nINT4 quantization introduces negligible performance degradation, e.g., -0.74% on LAMBADA and\neven +0.05% on MMLU, making it still better than the uncompressed GPT-3. This enables GLM-\n130B’s fast inference with performance guarantee on a server of 4 ×RTX 3090 (24G) or 8 ×RTX\n2080 Ti (11G), the most affordable GPU required for using 100B-scale LLMs to date.\n2\x0cPublished as a conference paper at ICLR 2023\nGradient Norm(a) More than 30 failed preliminary trials at 100B-scale (b) Final decisive trials: Sandwich-LN v.s. DeepNorm012345678910111213\n0 500 1k 1.5k 2k2.5k 3k\nFigure 3: Trials on different LayerNorms for GLM-130B training. It turns out that DeepNorm is the\nmost stable one, as it has small gradient norm and does not spike in the early stage training.\nWe open-source the model checkpoints, code, training logs, related toolkits, and lessons learned.\n2 T HEDESIGN CHOICES OF GLM-130B\nThe architecture of a machine learning model defines its inductive bias. However, it has been real-\nized that it is computationally unaffordable to explore various architectural designs for LLMs. We\nintroduce and explain the unique design choices of GLM-130B.\n2.1 GLM-130B’ SARCHITECTURE\nGLM as Backbone. Most recent 100B-scale LLMs, such as GPT-3, PaLM, OPT, and BLOOM,\nfollow the traditional GPT-style (Radford et al., 2019) architecture of decoder-only autoregressive\nlanguage modeling. In GLM-130B, we instead make an attempt to explore the potential of a bidi-\nrectional GLM—General Language Model (Du et al., 2022)—as its backbone.\nGLM is a transformer-based language model that leverages autoregressive blank infilling as its train-\ning objective. Briefly, for a ', 'from all of our generous partners, we\nfinally succeeded in making our pre-training algorithms runnable across all the platforms—frankly,\na surprising achievement for this project. The timeline of GLM-130B in Figure 21 covers most of\nthe issues we have encountered and addressed as of this writing.\nOn April 26th, we received a generous computing sponsorship from Zhipu.AI — an AI startup that\naims to teach machines to think like humans. After another week of testing, we finally kicked off\nthe training of the GLM-130B model on its 96 A100 (40G * 8) servers on May 6th. Additionally,\nZhipu.AI also sent a team to help evaluate the pre-trained model and build a demonstration website.\nThe training period spanned two months, during which we began developing a toolkit to allow GLM-\n130B’s inference in low-resource setting with swapping technique and quantization. Though it is\nalready the most accessible model of its scale, together with our partner from Tsinghua NLP, we have\nbeen exploring the limit of popularized hardware platforms, which would truly make the 100B-scale\nmodel accessible to as many people as possible. To date, we managed to reach the INT4 weight\nquantization for GLM-130B. Importantly, the INT4 version of GLM-130B without post training\n16This section is largely extracted and updated from the blog introduction of GLM-130B at http://keg.\ncs.tsinghua.edu.cn/glm-130b/ (Posted date: August 4, 2022).\n53\x0cPublished as a conference paper at ICLR 2023\n2021.12•The “千亿”(100B) project towardsan opendensepre-trained GLM at 100B scale isconceived•Survey pre-trainingstrategies of existing models of similar scale,suchasGPT-3,Gopher=> Limited public infoabout how they were trainedand issues they met•SearchforpossibleGPUclusters&sponsors2022.1•TesttheperformanceofFP16/FP32at100Bscaleononetestingcluster•UnexpectedexcessivememoryusageinGLM=> Torchisbetterwithfixedlengthinputsequences•InabilitytoconvergeandtrytricksfromCogViewandViT=> UseSandwich-LN•Frequentrandomhardwarefailures=> HavetorunHCPGtestbeforeeachrun2022.2•Veryslowtrainingspeedthanpreviouslycalculated=>Optimizekernelsandfuseoperators=>Findtheinputshapeiscriticaltokernelperformance•Collectpre-trainingcorporaandtokenize=>Useicetk:thesentencepieceissettotheunigrammode•Debugthe3Dpipelineparallelinthenewly-releasedMegatronandDeepSpeed2022.3•Itcan’trecoverperfectlyfromcheckpoints=>Ourcustomizeddataloaderdonotsaveitsstateseedproperlyindistributedtraining•Thememoryperprocessoristoosmall=>Requiretoomanypipelinestages=>Batchsizeistoolarge(upto12,000)=>Harmthemodel’sconvergency•Itcan’tlaunchmorethan2,000computingnodes=>Overcomethisandsupport6,000-nodetrainingbytuningLinuxkernelTCPparameters•Collectdataformulti-taskinstructionpre-training•Receiveopportunitiestotesttrainingsonseveralotherclusters•Veryslowtrainingspeedthanexpected=>Theunderlyingelement-wiseoperatorsdon’tsupportfastcomputationonlarge-dimensionvectors.2022.4•OptimizeA100kernel’scomputingefficiency=>A100kernelsprefersquare-shapedinputs,andseq_len=2,048isoptimalforourhidden-statedimension(12,288)•Inabilitytoconvergeduetolargegradientnorms(170+)ofinputembeddings=>Tryembeddingnormandgradientshrink,whichturnouttobealmostequivalent•Naïvepost-LNorpre-LNdisconvergesafterseveralthousandsofsteps=>TrySandwich-LNwithPB-Relax•Itstilldisconvergesafteroneweek’strial=>Thedataloaderstateseedsarenotunifiedfordifferentpipelinestages,resultinginamismatchofinputdataandlabels.•Testtwopositionalencodings:RoPEandAlibi=>Alibicanbeslowerasitrequireselement-wisemanipulationonattentionmatrices---changingnum_heads*2,048* 2,048scalarsperlayer•TestGeGLUandGAU=>GAUconvergesfasterwithrelativelypoorperformanceonfine-tunedSuperGLUE•AbnormalGPUmemoryusageofnewly-addedfunctionsandclasses=>DeepSpeedhardcodesthefunctionnamesforcheckpointactivation•DecidetotrainGLMwith130billionparameters=>allowinferenceonaDGX-A10040Gnode2022.5-6•ImplementaRoPEcudaoperatorinC++=>Seeunexpectedprecisionerrorsandfinallyhaveitabandoned•Sandwich-LNstilldisconverges=>1)Reducinglearningratedoesnothelp;2)UsingHingecross-entropybecomesslowerandharmsperformance;3)ShiftingtoDeepNormstilldisconverges•UseFP32insoftmaxofattention=>Success•FindPB-RelaxunnecessaryforFP32softmax=>Italsoslowsdowntrainingasitneedstomanipulatethewholeattentionscorematrices•Experiencefewspikesinlatertraining=>1)Reducegradientshrinkfactorfrom1to0.1:useful;2)Reducethelearningrate:sometimesuseful;3)Jumpthenoisydatabatches:sometimesuseful•Findamistakeinmulti-taskdataaftertrainingfor20,000steps=>Usethecorrectdatabutitdoesnotforget2022.6-7•AdaptthepipelineparallelcheckpointstoordinaryparallelcheckpointsforefficientinferenceonasingleA100•Workonevaluationscriptsondatasets:MMLU,Big-bench,CLUE,SuperCLUE,etc.•ImplementP-TuningandP-Tuningv2forparameter-efficienttuningonGLM-130BfortuningonSuperGLUE•WorkwithBMInfonadaptingGLM-130BtoperforminferenceonasingleV100or3090=>Usepipeline-styleasynchronousswappingbetweenmainmemoryandGPUmemory•Trytofine-tuneGLM-130BwithfewerA100nodes(i.e.,12-16nodes)=>Pipeline-stylefailsduetotoomanypipelinestages=>Findthatdataparallelcannotbeintroducedforfine-tuning=>Use32-waymodelparallelforfine-tuningwithreasonableperformance\nMajorIssuesEncounteredforTrainingGLM-130B\nhttps://github.com/THUDM/GLM-130BTsinghuaKEG\nFigure 21: The timeline of major issues that training GLM-130B encountered and ']","By leveraging the GLM architecture's unique scaling law, GLM-130B achieves INT4 weight quantization, reducing memory requirements for inference with minimal performance degradation.","GLM-130B manages to achieve INT4 weight quantization without post-training due to a unique property of the GLM architecture. This INT4 quantization introduces negligible performance degradation, such as -0.74% on LAMBADA and even +0.05% on MMLU. The benefits of this achievement are that it allows for fast inference with performance guarantee on a server of 4 ×RTX 3090 (24G) or 8 ×RTX 2080 Ti (11G), making it still better than the uncompressed GPT-3.",1.0,0.75,0.8374441862106323
What contributions does GLM-130B offer to the open-source community and AI research field?,"['from all of our generous partners, we\nfinally succeeded in making our pre-training algorithms runnable across all the platforms—frankly,\na surprising achievement for this project. The timeline of GLM-130B in Figure 21 covers most of\nthe issues we have encountered and addressed as of this writing.\nOn April 26th, we received a generous computing sponsorship from Zhipu.AI — an AI startup that\naims to teach machines to think like humans. After another week of testing, we finally kicked off\nthe training of the GLM-130B model on its 96 A100 (40G * 8) servers on May 6th. Additionally,\nZhipu.AI also sent a team to help evaluate the pre-trained model and build a demonstration website.\nThe training period spanned two months, during which we began developing a toolkit to allow GLM-\n130B’s inference in low-resource setting with swapping technique and quantization. Though it is\nalready the most accessible model of its scale, together with our partner from Tsinghua NLP, we have\nbeen exploring the limit of popularized hardware platforms, which would truly make the 100B-scale\nmodel accessible to as many people as possible. To date, we managed to reach the INT4 weight\nquantization for GLM-130B. Importantly, the INT4 version of GLM-130B without post training\n16This section is largely extracted and updated from the blog introduction of GLM-130B at http://keg.\ncs.tsinghua.edu.cn/glm-130b/ (Posted date: August 4, 2022).\n53\x0cPublished as a conference paper at ICLR 2023\n2021.12•The “千亿”(100B) project towardsan opendensepre-trained GLM at 100B scale isconceived•Survey pre-trainingstrategies of existing models of similar scale,suchasGPT-3,Gopher=> Limited public infoabout how they were trainedand issues they met•SearchforpossibleGPUclusters&sponsors2022.1•TesttheperformanceofFP16/FP32at100Bscaleononetestingcluster•UnexpectedexcessivememoryusageinGLM=> Torchisbetterwithfixedlengthinputsequences•InabilitytoconvergeandtrytricksfromCogViewandViT=> UseSandwich-LN•Frequentrandomhardwarefailures=> HavetorunHCPGtestbeforeeachrun2022.2•Veryslowtrainingspeedthanpreviouslycalculated=>Optimizekernelsandfuseoperators=>Findtheinputshapeiscriticaltokernelperformance•Collectpre-trainingcorporaandtokenize=>Useicetk:thesentencepieceissettotheunigrammode•Debugthe3Dpipelineparallelinthenewly-releasedMegatronandDeepSpeed2022.3•Itcan’trecoverperfectlyfromcheckpoints=>Ourcustomizeddataloaderdonotsaveitsstateseedproperlyindistributedtraining•Thememoryperprocessoristoosmall=>Requiretoomanypipelinestages=>Batchsizeistoolarge(upto12,000)=>Harmthemodel’sconvergency•Itcan’tlaunchmorethan2,000computingnodes=>Overcomethisandsupport6,000-nodetrainingbytuningLinuxkernelTCPparameters•Collectdataformulti-taskinstructionpre-training•Receiveopportunitiestotesttrainingsonseveralotherclusters•Veryslowtrainingspeedthanexpected=>Theunderlyingelement-wiseoperatorsdon’tsupportfastcomputationonlarge-dimensionvectors.2022.4•OptimizeA100kernel’scomputingefficiency=>A100kernelsprefersquare-shapedinputs,andseq_len=2,048isoptimalforourhidden-statedimension(12,288)•Inabilitytoconvergeduetolargegradientnorms(170+)ofinputembeddings=>Tryembeddingnormandgradientshrink,whichturnouttobealmostequivalent•Naïvepost-LNorpre-LNdisconvergesafterseveralthousandsofsteps=>TrySandwich-LNwithPB-Relax•Itstilldisconvergesafteroneweek’strial=>Thedataloaderstateseedsarenotunifiedfordifferentpipelinestages,resultinginamismatchofinputdataandlabels.•Testtwopositionalencodings:RoPEandAlibi=>Alibicanbeslowerasitrequireselement-wisemanipulationonattentionmatrices---changingnum_heads*2,048* 2,048scalarsperlayer•TestGeGLUandGAU=>GAUconvergesfasterwithrelativelypoorperformanceonfine-tunedSuperGLUE•AbnormalGPUmemoryusageofnewly-addedfunctionsandclasses=>DeepSpeedhardcodesthefunctionnamesforcheckpointactivation•DecidetotrainGLMwith130billionparameters=>allowinferenceonaDGX-A10040Gnode2022.5-6•ImplementaRoPEcudaoperatorinC++=>Seeunexpectedprecisionerrorsandfinallyhaveitabandoned•Sandwich-LNstilldisconverges=>1)Reducinglearningratedoesnothelp;2)UsingHingecross-entropybecomesslowerandharmsperformance;3)ShiftingtoDeepNormstilldisconverges•UseFP32insoftmaxofattention=>Success•FindPB-RelaxunnecessaryforFP32softmax=>Italsoslowsdowntrainingasitneedstomanipulatethewholeattentionscorematrices•Experiencefewspikesinlatertraining=>1)Reducegradientshrinkfactorfrom1to0.1:useful;2)Reducethelearningrate:sometimesuseful;3)Jumpthenoisydatabatches:sometimesuseful•Findamistakeinmulti-taskdataaftertrainingfor20,000steps=>Usethecorrectdatabutitdoesnotforget2022.6-7•AdaptthepipelineparallelcheckpointstoordinaryparallelcheckpointsforefficientinferenceonasingleA100•Workonevaluationscriptsondatasets:MMLU,Big-bench,CLUE,SuperCLUE,etc.•ImplementP-TuningandP-Tuningv2forparameter-efficienttuningonGLM-130BfortuningonSuperGLUE•WorkwithBMInfonadaptingGLM-130BtoperforminferenceonasingleV100or3090=>Usepipeline-styleasynchronousswappingbetweenmainmemoryandGPUmemory•Trytofine-tuneGLM-130BwithfewerA100nodes(i.e.,12-16nodes)=>Pipeline-stylefailsduetotoomanypipelinestages=>Findthatdataparallelcannotbeintroducedforfine-tuning=>Use32-waymodelparallelforfine-tuningwithreasonableperformance\nMajorIssuesEncounteredforTrainingGLM-130B\nhttps://github.com/THUDM/GLM-130BTsinghuaKEG\nFigure 21: The timeline of major issues that training GLM-130B encountered and ', '. . . . . . . . . . 52\nE.4 Project Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\nE.5 Computation Sponsor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\nF A Brief History of GLM-130B 53\nG Broader Impact 55\nG.1 Impact on AI Research . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\nG.2 Impact on Individual Developers and Small Companies . . . . . . . . . . . . . . 55\n20\x0cPublished as a conference paper at ICLR 2023\nG.3 Social Impact . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\nH Environmental Impact 56\nA E THICS : EVALUATION ON BIASES AND TOXICITY\nAlbeit LLMs’ strong abilities in language and beyond, which could bring substantial welfare to\nhuman beings, they can potentially produce toxic and illegal contents for evil use (Weidinger et al.,\n2021; Sheng et al., 2021; Dev et al., 2021; Bommasani et al., 2021). In GLM-130B, before granting\nmodel weight to applicants, in the model license we demand them ', 'to agree that they will not use it\nfor any deeds that may be harmful to society and human beings.\nAdditionally, from a technical perspective, we argue that we must also understand LLMs’ toxic\nand biased behaviors and ultimately eliminate them. This aligns with our commitment to “LLM\nInclusivity”, as it is necessary to include more people in the open-sourced LLM research to facilitate\nthe process. Moreover, if an LLM is shown to be good at identifying toxic and biased content,\ntechniques such as self-diagnoses (Schick et al., 2021) can help to reduce the harmful generation\nin a self-consistent post-processing procedure. Therefore, as an initial step, we evaluate GLM-\n130B over a variety of related benchmarks to shed light on the challenging topic. Despite their\nlimitations (Blodgett et al., 2021; Jacobs & Wallach, 2021) which should be addressed in future\nwork, they still serve as a good start to arouse the community’s awareness of the problem.\nA.1 B IASMEASUREMENT : CROW S-P AIRSTable 5: CrowS-Pairs (Nangia et al., 2020) Bias\nMeasurement. The lower scores the better.\nCategory GPT-3 OPT-175B GLM-130B\nGender 62.6 65.7 55.7\nReligion 73.3 68.6 73.3\nRace/Color 64.7 68.6 58.5\nSexual orientation 76.2 78.6 60.7\nAge 64.4 67.8 63.2\nNationality 61.6 62.9 64.1\nDisability 76.7 76.7 71.6\nPhysical appearance 74.6 76.2 74.6\nSocioeconomic status 73.8 76.2 70.9\nOverall 67.2 69.5 65.8CrowS-Pairs (Nangia et al., 2020), or namely\nCrowdsourced Stereotype Pairs benchmark, is\nwidely used for measuring biases for masked\nlanguage models. It collects 1508 examples with\nnine different conventional biases and adopts a\nprobing-based approach to compare the pseudo-\nlog-likelihood of a pair of stereotypical and anti-\nstereotypical sentences. Since GLM-130B is\npre-trained with autoregressive blanking infill-\ning, CrowS-Pairs evaluation is directly appli-\ncable. We compare the ']"," GLM-130B is fully open-sourced, including model weights, code, and training logs, promoting transparency, reproducibility, and inclusivity in large-scale language model research and applications.",GLM-130B offers contributions to the open-source community and AI research field by providing a large-scale pre-trained model that is accessible to a wide range of users. It also addresses biases and toxicity in language models by evaluating its behavior on related benchmarks and promoting inclusivity in LLM research.,1.0,1.0,0.8293043375015259
What advancements does Megatron-LM contribute to the handling of layer normalization in BERT-like models to increase performance?,"['in\nour training data.\n5.3. Bi-directional Transformer Results Using BERT\nIn this section, we apply our methodology to BERT-style\ntransformer models and study the effect of model scaling\non several downstream tasks. Prior work (Lan et al., 2019)\nfound that increasing model size beyond BERT-large with\n336M parameters results in unexpected model degradation.\nTo address this degradation, the authors of that work (Lan\net al., 2019) introduced parameter sharing and showed that\nthat their models scale much better compared to the original\nBERT model.\nWe further investigated this behaviour and empirically\ndemonstrated that rearranging the order of the layer nor-\nmalization and the residual connections as shown in Figure\n7 is critical to enable the scaling of the BERT-style mod-\nels beyond BERT-Large. The architecture (b) in Figure 7\neliminates instabilities observed using the original BERT\narchitecture in (a) and also has a lower training loss. To\nthe best of our knowledge, we are the ﬁrst to report such a\nchange enables training larger BERT models.\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 5. Development set results for MNLI, QQP, SQuAD 1.1 and SQuAD 2.0 and test set results for RACE. The trained tokens represents\nconsumed tokens during model pretraining (proportional to batch size times number of iterations) normalized by consumed tokens during\nmodel pretraining for our 336M model.\nModeltrained tokens MNLI m/mm QQP SQuAD 1.1 SQuAD 2.0 RACE m/h\nratio accuracy accuracy F1 / EM F1 / EM accuracy\n(dev set) (dev set) (dev set) (dev set) (test set)\nRoBERTa (Liu et al., 2019b) 2 90.2 / 90.2 92.2 94.6 / 88.9 89.4 / 86.5 83.2 (86.5 / 81.8)\nALBERT (Lan et al., 2019) 3 90.8 92.2 94.8 / 89.3 90.2 ', 'architecture, GPT-2, and\nan encoder architecture, BERT.\nFigure 2 shows a schematic diagram of the model we used.\nWe refer the reader to prior work for a detailed descrip-\ntion of the model architecture (Vaswani et al., 2017; Devlin\net al., 2018; Radford et al., 2019). It is worthwhile to men-\ntion that both GPT-2 and BERT use GeLU (Hendrycks &\nGimpel, 2016) nonlinearities and layer normalization (Ba\net al., 2016) to the input of the multi-head attention and feed\nforward layers, whereas the original transformer (Vaswani\net al., 2017) uses ReLU nonlinearities and applies layer\nnormalization to outputs.\n2.3. Data and Model Parallelism in Deep Learning\nThere are two central paradigms for scaling out deep neu-\nral network training to numerous hardware accelerators:\ndata parallelism (Valiant, 1990) where a training minibatch\nis split across multiple workers, and model parallelism in\nwhich the memory usage and computation of a model is\ndistributed across multiple workers. By increasing the mini-\nbatch size proportionally to the number of available work-\ners (i.e. weak scaling ), one observes near linear scaling\nin training data throughput. However, large batch train-\ning introduces complications into the optimization process\nthat can result in reduced accuracy or longer time to conver-\ngence, offsetting the beneﬁt of increased training throughput\n(Keskar et al., 2017). Further research (Goyal et al., 2017;\nYou et al., 2017; 2019) has developed techniques to miti-gate these effects and drive down the training time of large\nneural networks. To scale out training even further, parallel\nwork (Chen et al., 2016) has combined data parallelism with\nactivation checkpointing: recomputing activations in the\nbackward pass without storing them in the forward pass to\nreduce memory requirements.\nHowever, these techniques have one fundamental limitation\nin the ', 'of strong baselines, with and without mas-\nsive pretraining. The models share the same for-\nmat: given a context and an ending, return a logit\nfor that ending. Accordingly, we train our models\nusing a four-way cross-entropy loss, where the ob-\njective is to predict the correct ending. In addition\nto BERT-Large, our comparisons include:\na.OpenAI GPT (Radford et al., 2018): A ﬁne-\ntuned 12-layer transformer that was pre-trained on\nthe BookCorpus (Zhu et al., 2015).\nb.Bert-Base : A smaller version of the BERT\nmodel whose architecture size matches GPT.\nc.ESIM +ELMo (Chen et al., 2017; Peters et al.,\n2018): This is the best-performing ELMo model\nfor NLI, modiﬁed slightly so the ﬁnal output layeris now a four-way softmax over endings.\nd.LSTM sentence encoder : This is a randomly\ninitialized two-layer bi-LSTM; the second layer’s\nhidden states are max-pooled and fed into an MLP\nto predict the logit. We consider three varia-\ntions: GloVe embeddings, ELMo embeddings, or\n(frozen) BERT-Base embeddings.9\ne.FastText : (Joulin et al., 2017) An o ﬀ-the-shelf\nlibrary for bag-of-words text classiﬁcation.10\nWe compare all models to human performance\nby asking ﬁve independent crowd workers to solve\nthe same four-way multiple choice problems; their\npredictions are combined via majority vote.\nOur results, shown in Table 1, hint at the di ﬃ-\nculty of the dataset: human performance is over\n95%, while overall model performance is below\n50% for every model. Surprisingly, despite BERT-\nLarge having been used as the adversarial ﬁlter,\nit still performs the strongest at 47.3% overall.\nBy making the dataset adversarial for BERT, it\nseems to also have become adversarial for every\nother model. For instance, while ESIM +ELMo\nobtained 59% accuracy on SWAG, it obtains only\n33.3% accuracy on HellaSwag .\nIn addition to pretraining being critical, ']"," It rearranges the order of layer normalization and residual connections, allowing for stable training and enhanced accuracies as model size increases.","Megatron-LM contributes advancements in rearranging the order of layer normalization and residual connections in BERT-like models, which is critical for enabling the scaling of the models beyond BERT-Large. This change eliminates instabilities observed in the original BERT architecture and leads to lower training loss, ultimately improving performance.",0.5,1.0,0.4975963830947876
What specific properties of Task2Vec embeddings allow for effective reasoning about task space?,"['embedding (distance from origin) and test error obtained on the task.\nnear the decision boundary since p(1−p)is maximized at\np= 1/2. Compare this to the covariance matrix of the data,\nC0, to which all data points contribute equally. Instead, in\nTASK 2VEC information on the domain is based on data near\nthe decision boundary (task-weighted domain embedding).\nEncoding useful features for the task: The FIM de-\npends on the curvature of the loss function with the diagonal\nentries capturing the sensitivity of the loss to model param-\neters. Speciﬁcally, in the two-layer model one can see that,\nif a given feature is uncorrelated with y, the correspond-\ning blocks of Fare zero. In contrast, a domain embedding\nbased on feature activations of the probe network (e.g., C1)\nonly reﬂects which features vary over the dataset without\nindication of whether they are relevant to the task.\n3. Similarity Measures on the Space of Tasks\nWhat metric should be used on the space of tasks? This\ndepends critically on the meta-task we are considering. As a\nmotivation, we concentrate on the meta-task of selecting the\npre-trained feature extractor from a set in order to obtain the\nbest performance on a new training task. There are several\nnatural metrics that may be considered for this meta-task.\nIn this work, we mainly consider:\nTaxonomic distance For some tasks, there is a natural no-\ntion of semantic similarity, for instance deﬁned by sets of\ncategories organized in a taxonomic hierarchy where each\ntask is classiﬁcation inside a subtree of the hierarchy ( e.g.,\nwe may say that classifying breeds of dogs is closer to clas-siﬁcation of cats than it is to classiﬁcation of species of\nplants). In this setting, ', 'TASK2VEC: Task Embedding for Meta-Learning\nAlessandro Achille\nUCLA and AWS\nachille@cs.ucla.eduMichael Lam\nAWS\nmichlam@amazon.comRahul Tewari\nAWS\ntewarir@amazon.comAvinash Ravichandran\nAWS\nravinash@amazon.com\nSubhransu Maji\nUMass and AWS\nsmmaji@amazon.comCharless Fowlkes\nUCI and AWS\nfowlkec@amazon.comStefano Soatto\nUCLA and AWS\nsoattos@amazon.comPietro Perona\nCaltech and AWS\nperonapp@amazon.com\nAbstract\nWe introduce a method to provide vectorial represen-\ntations of visual classiﬁcation tasks which can be used\nto reason about the nature of those tasks and their re-\nlations. Given a dataset with ground-truth labels and a\nloss function deﬁned over those labels, we process images\nthrough a “probe network” and compute an embedding\nbased on estimates of the Fisher information matrix asso-\nciated with the probe network parameters. This provides a\nﬁxed-dimensional embedding of the task that is independent\nof details such as the number of classes and does not require\nany understanding of the class label semantics. We demon-\nstrate that this embedding is capable of predicting task sim-\nilarities that match our intuition about semantic and tax-\nonomic relations between different visual tasks ( e.g., tasks\nbased on classifying different types of plants are similar).\nWe also demonstrate the practical value of this framework\nfor the meta-task of selecting a pre-trained feature extractor\nfor a new task. We present a simple meta-learning frame-\nwork for learning a metric on embeddings that is capable of\npredicting which feature extractors will perform well. Se-\nlecting a feature extractor with task embedding obtains a\nperformance close to the best available feature extractor,\nwhile costing substantially less than exhaustively training\nand evaluating on all available feature extractors.\n1. Introduction\nThe success of Deep Learning hinges in part on the fact\nthat models learned for one task can be used on other related\ntasks. Yet, no general framework exists to describe and\nlearn relations between tasks. We introduce the TASK 2VEC\nembedding, a technique to ', 'represent tasks as elements of a\nvector space based on the Fisher Information Matrix. The\nnorm of the embedding correlates with the complexity of\nthe task, while the distance between embeddings capturessemantic similarities between tasks (Fig. 1). When other\nnatural distances are available, such as the taxonomical dis-\ntance in biological classiﬁcation, we ﬁnd that the embed-\nding distance correlates positively with it (Fig. 2). More-\nover, we introduce an asymmetric distance on tasks which\ncorrelates with the transferability between tasks.\nComputation of the embedding leverages a duality be-\ntween network parameters (weights) and outputs (activa-\ntions) in a deep neural network (DNN): Just as the activa-\ntions of a DNN trained on a complex visual recognition task\nare a rich representation of the input images, we show that\nthe gradients of the weights relative to a task-speciﬁc loss\nare a rich representation of the task itself. Speciﬁcally, given\na task deﬁned by a dataset D={(xi,yi)}N\ni=1of labeled\nsamples, we feed the data through a pre-trained reference\nconvolutional neural network which we call “ probe net-\nwork ”, and compute the diagonal Fisher Information Ma-\ntrix (FIM) of the network ﬁlter parameters to capture the\nstructure of the task (Sect. 2). Since the architecture and\nweights of the probe network are ﬁxed, the FIM provides a\nﬁxed-dimensional representation of the task. We show this\nembedding encodes the “difﬁculty” of the task, character-\nistics of the input domain, and which features of the probe\nnetwork are useful to solve it (Sect. 2.1).\nOur task embedding can be used to reason about the\nspace of tasks and solve meta-tasks. As a motivating exam-\nple, we study the problem of selecting the best pre-trained\nfeature extractor to solve a new ']","Task2Vec embeddings are invariant to label space, encode task difficulty, represent task-weighted domain characteristics, and highlight features important for the task.","The specific properties of Task2Vec embeddings that allow for effective reasoning about the task space include:
- The norm of the embedding correlating with the complexity of the task
- The distance between embeddings capturing semantic similarities between tasks
- The ability to predict task similarities based on intuitive semantic and taxonomic relations between different visual tasks",1.0,1.0,0.831278920173645
What distinctive strategy does GLM-130B employ to ensure training stability for a 130-billion-parameter model?,"['major challenge for training\nLLMs (Zhang et al., 2022; Scao et al., 2022; Chowdhery et al., 2022) (Cf. Figure 10 in Appendix\nfor collapses in training several 100B-scale models). A proper choice of LNs can help stabilize\nthe training of LLMs. We experiment with existing practices, e.g., Pre-LN (Xiong et al., 2020),\n3\x0cPublished as a conference paper at ICLR 2023\nPost-LN (Ba et al., 2016), Sandwich-LN (Ding et al., 2021), which are unfortunately incapable of\nstabilizing our GLM-130B test runs (Cf. Figure 3 (a) and Appendix B.2 for details).\nOur search is later focused on Post-LN due to its favorable downstream results in preliminary ex-\nperiments though it does not stabilize GLM-130B. Fortunately, one of the attempts on Post-LN\ninitialized with the newly-proposed DeepNorm (Wang et al., 2022b) generates promising training\nstability. Specifically, given the number of GLM-130B’s layers N, we adopt DeepNorm (x) =\nLayerNorm (α·x+Network (x)), where α= (2N)1\n2, and apply the Xavier normal initialization\nwith the scaling factor of (2N)−1\n2toffn,v_proj andout_proj . Additionally, all bias terms\nare initialized to zero. Figure 3 shows it significantly benefits the training stability of GLM-130B.\nPositional Encoding and FFNs. We empirically test different options for positional encoding (PE)\nand FFN improvements in terms of both training stability and downstream performance (Cf. Ap-\npendix B.3 for details). For PEs in GLM-130B, we adopt Rotary Positional Encoding (RoPE, Su\net al. (2021)) rather than ALiBi (Press et al., 2021). To improve FFNs in Transformer, we pick GLU\nwith the GeLU (Hendrycks & Gimpel, 2016) activation as the replacement.\n2.2 GLM-130B’ SPRE-TRAINING SETUP\nInspired by recent works (Aribandi et al., 2022; Wei et al., 2022a; Sanh et al., 2022), the ', 'evaluation of GLM-130B on the SuperGLUE (Wang et al., 2019) benchmark,\nwhich consists 8 different natural language understanding challenges. Noted that these results\nare neither zero/few-shot nor fine-tuned results, because 7 out of 8 tasks’ training sets have been\nincluded in GLM-130B’s MIP training (except for ReCoRD) together with other 67 multi-task\ndatasets; however, GLM-130B is also not individually fine-tuned on any of them. Therefore, these\nresults are not for relative comparison for any other models’, but only for readers’ reference on\nGLM-130B’s absolute ability.\n44\x0cPublished as a conference paper at ICLR 2023\ncb record wsc multirc rte wic copa boolq20406080100\nGLM-130B (uni)\nGLM-130B (bi)\nFigure 17: GLM-130B (uni and bi)’s untuned results on SuperGLUE development set, using prompt-\nsource (Bach et al., 2022) prompts and task formulation. DISCLAIMER: Noted that some of the\nSuperGLUE training sets have been included in the MIP training. We report the results here\nonly for readers’ reference.\nSports LLC Coin Flip Coin Flip (OOD: 3) Reverse List Date020406080100\n54.0\n1.084.5\n47.953.1\n15.773.7\n13.495.0\n58.668.3\n27.9Standard Prompting Chain-of-Thoughts\nFigure 18: Chain-of-thought prompting can also improve GLM-130B’s performance on reasoning\ntasks compared to standard prompting.\nBoolQ CB COPA MultiRC ReCoRD RTE WiC WSC\nGLM-130B 89.69 98.21 100 89.32 92.11 94.22 76.96 88.5\nTable 21: The results of GLM-130B on the SuperGLUE dataset obtained using the P-tuning v2 (Liu\net al., 2022). We report the Accuracy metric for all datasets except for MultiRC (F1a) and ReCoRD\n(F1).\nThe results are presented in Figure 17. We ablate the unidirectional and bidirectional GLM-130B to\njustify the usefulness of GLM objective in boosting LLMs’ ability to understand. Each point in the\nfigure refers to a prompt-specific result, for which the prompt is from the promptsource (Bach et al.,\n2022) ', 'from all of our generous partners, we\nfinally succeeded in making our pre-training algorithms runnable across all the platforms—frankly,\na surprising achievement for this project. The timeline of GLM-130B in Figure 21 covers most of\nthe issues we have encountered and addressed as of this writing.\nOn April 26th, we received a generous computing sponsorship from Zhipu.AI — an AI startup that\naims to teach machines to think like humans. After another week of testing, we finally kicked off\nthe training of the GLM-130B model on its 96 A100 (40G * 8) servers on May 6th. Additionally,\nZhipu.AI also sent a team to help evaluate the pre-trained model and build a demonstration website.\nThe training period spanned two months, during which we began developing a toolkit to allow GLM-\n130B’s inference in low-resource setting with swapping technique and quantization. Though it is\nalready the most accessible model of its scale, together with our partner from Tsinghua NLP, we have\nbeen exploring the limit of popularized hardware platforms, which would truly make the 100B-scale\nmodel accessible to as many people as possible. To date, we managed to reach the INT4 weight\nquantization for GLM-130B. Importantly, the INT4 version of GLM-130B without post training\n16This section is largely extracted and updated from the blog introduction of GLM-130B at http://keg.\ncs.tsinghua.edu.cn/glm-130b/ (Posted date: August 4, 2022).\n53\x0cPublished as a conference paper at ICLR 2023\n2021.12•The “千亿”(100B) project towardsan opendensepre-trained GLM at 100B scale isconceived•Survey pre-trainingstrategies of existing models of similar scale,suchasGPT-3,Gopher=> Limited public infoabout how they were trainedand issues they met•SearchforpossibleGPUclusters&sponsors2022.1•TesttheperformanceofFP16/FP32at100Bscaleononetestingcluster•UnexpectedexcessivememoryusageinGLM=> Torchisbetterwithfixedlengthinputsequences•InabilitytoconvergeandtrytricksfromCogViewandViT=> UseSandwich-LN•Frequentrandomhardwarefailures=> HavetorunHCPGtestbeforeeachrun2022.2•Veryslowtrainingspeedthanpreviouslycalculated=>Optimizekernelsandfuseoperators=>Findtheinputshapeiscriticaltokernelperformance•Collectpre-trainingcorporaandtokenize=>Useicetk:thesentencepieceissettotheunigrammode•Debugthe3Dpipelineparallelinthenewly-releasedMegatronandDeepSpeed2022.3•Itcan’trecoverperfectlyfromcheckpoints=>Ourcustomizeddataloaderdonotsaveitsstateseedproperlyindistributedtraining•Thememoryperprocessoristoosmall=>Requiretoomanypipelinestages=>Batchsizeistoolarge(upto12,000)=>Harmthemodel’sconvergency•Itcan’tlaunchmorethan2,000computingnodes=>Overcomethisandsupport6,000-nodetrainingbytuningLinuxkernelTCPparameters•Collectdataformulti-taskinstructionpre-training•Receiveopportunitiestotesttrainingsonseveralotherclusters•Veryslowtrainingspeedthanexpected=>Theunderlyingelement-wiseoperatorsdon’tsupportfastcomputationonlarge-dimensionvectors.2022.4•OptimizeA100kernel’scomputingefficiency=>A100kernelsprefersquare-shapedinputs,andseq_len=2,048isoptimalforourhidden-statedimension(12,288)•Inabilitytoconvergeduetolargegradientnorms(170+)ofinputembeddings=>Tryembeddingnormandgradientshrink,whichturnouttobealmostequivalent•Naïvepost-LNorpre-LNdisconvergesafterseveralthousandsofsteps=>TrySandwich-LNwithPB-Relax•Itstilldisconvergesafteroneweek’strial=>Thedataloaderstateseedsarenotunifiedfordifferentpipelinestages,resultinginamismatchofinputdataandlabels.•Testtwopositionalencodings:RoPEandAlibi=>Alibicanbeslowerasitrequireselement-wisemanipulationonattentionmatrices---changingnum_heads*2,048* 2,048scalarsperlayer•TestGeGLUandGAU=>GAUconvergesfasterwithrelativelypoorperformanceonfine-tunedSuperGLUE•AbnormalGPUmemoryusageofnewly-addedfunctionsandclasses=>DeepSpeedhardcodesthefunctionnamesforcheckpointactivation•DecidetotrainGLMwith130billionparameters=>allowinferenceonaDGX-A10040Gnode2022.5-6•ImplementaRoPEcudaoperatorinC++=>Seeunexpectedprecisionerrorsandfinallyhaveitabandoned•Sandwich-LNstilldisconverges=>1)Reducinglearningratedoesnothelp;2)UsingHingecross-entropybecomesslowerandharmsperformance;3)ShiftingtoDeepNormstilldisconverges•UseFP32insoftmaxofattention=>Success•FindPB-RelaxunnecessaryforFP32softmax=>Italsoslowsdowntrainingasitneedstomanipulatethewholeattentionscorematrices•Experiencefewspikesinlatertraining=>1)Reducegradientshrinkfactorfrom1to0.1:useful;2)Reducethelearningrate:sometimesuseful;3)Jumpthenoisydatabatches:sometimesuseful•Findamistakeinmulti-taskdataaftertrainingfor20,000steps=>Usethecorrectdatabutitdoesnotforget2022.6-7•AdaptthepipelineparallelcheckpointstoordinaryparallelcheckpointsforefficientinferenceonasingleA100•Workonevaluationscriptsondatasets:MMLU,Big-bench,CLUE,SuperCLUE,etc.•ImplementP-TuningandP-Tuningv2forparameter-efficienttuningonGLM-130BfortuningonSuperGLUE•WorkwithBMInfonadaptingGLM-130BtoperforminferenceonasingleV100or3090=>Usepipeline-styleasynchronousswappingbetweenmainmemoryandGPUmemory•Trytofine-tuneGLM-130BwithfewerA100nodes(i.e.,12-16nodes)=>Pipeline-stylefailsduetotoomanypipelinestages=>Findthatdataparallelcannotbeintroducedforfine-tuning=>Use32-waymodelparallelforfine-tuningwithreasonableperformance\nMajorIssuesEncounteredforTrainingGLM-130B\nhttps://github.com/THUDM/GLM-130BTsinghuaKEG\nFigure 21: The timeline of major issues that training GLM-130B encountered and ']","GLM-130B utilizes embedding gradient shrink (EGS) and DeepNorm layer normalization to ensure training stability, significantly reducing the likelihood of loss spikes and divergence.","GLM-130B employs the strategy of initializing Post-LN with the newly-proposed DeepNorm, which generates promising training stability for the model.",0.875,1.0,0.7202140688896179
What parallel strategies and configurations are utilized to train GLM-130B efficiently on a GPU cluster?,"['prompted datasets from (Sanh et al., 2022; Wang et al., 2022a), listed\nin Appendix C and Table 12. GLM-130B users are suggested to avoid evaluating its zero-shot and\nfew-shot capabilities on these datasets according to the criterion illustrated in Section 5.\n2.3 P LATFORM -AWARE PARALLEL STRATEGIES AND MODEL CONFIGURATIONS\nGLM-130B is trained on a cluster of 96 DGX-A100 GPU (8 ×40G) servers with a 60-day access.\nThe goal is to pass through as many tokens as possible, as a recent study (Hoffmann et al., 2022)\nsuggests that most existing LLMs are largely under-trained.\nThe 3D Parallel Strategy. The data parallelism (Valiant, 1990) and tensor model paral-\nlelism (Shoeybi et al., 2019) are the de facto practices for training billion-scale models (Wang &\nKomatsuzaki, 2021; Du et al., 2022). To further handle the huge GPU memory requirement and the\ndecrease in overall GPU utilization resulted from applying tensor parallel between nodes—as 40G\nrather than 80G A100s are used for training GLM-130B, we combine the pipeline model parallelism\nwith the other two strategies to form a 3D parallel strategy.\nThe pipeline parallelism divides the model into sequential stages for each parallel group, and to fur-\nther minimize bubbles introduced by pipeline, we leverage the PipeDream-Flush (Narayanan et al.,\n2021) implementation from DeepSpeed (Rasley et al., 2020) to train GLM-130B with a relative\n4\x0cPublished as a conference paper at ICLR 2023\nbig global batch size (4,224) to reduce time and GPU memory wasting. Through both numeri-\ncal and empirical examinations, we adopt 4-way tensor parallelism and 8-way pipeline parallelism\n(Cf. Appendix B.4 for details). Following the calculation in (Chowdhery et al., 2022), we report\nhardware FLOPs utilization (HFU) ', 'of 43.3% and model FLOPs utilization (MFU) of 32.5% due to\nre-materialization.\nGLM-130B Configurations. We aim to enable our 100B-scale LLM to run a single DGX-A100\n(40G) node in FP16 precision. Based on the hidden state dimension of 12,288 we adopt from\nGPT-3, the resultant model size has to be no more than 130B parameters, thus GLM-130B. To\nmaximize GPU utilization, we configure the model based on the platform and its corresponding\nparallel strategy. To avoid insufficient memory utilization in the middle stages due to the additional\nword embedding at both ends, we balance the pipeline partition by removing one layer from them,\nmaking 9 ×8-2=70 transformer layers in GLM-130B.\nDuring the 60-day access to the cluster, we manage to train GLM-130B for 400 billion tokens\n(roughly 200 billion each for Chinese and English) with a fixed sequence length of 2,048 per sample.\nFor the [gMASK] training objective, we use a context window of 2,048 tokens. For the [MASK]\nand multi-task objectives, we use a context window of 512 and concatenate four samples together to\ncater the 2,048-sequence-length. We warm-up the batch size from 192 to 4224 over the first 2.5%\nsamples. We use AdamW (Loshchilov & Hutter, 2019) as our optimizer with β1andβ2set to 0.9\nand 0.95, and a weight decay value of 0.1. We warm up the learning rate from 10−7to8×10−5\nover the first 0.5% samples, then decay it by a 10×cosine schedule. We use a dropout rate of 0.1\nand clip gradients using a clipping value of 1.0 (Cf. Table 11 for the full configurations).\n3 T HETRAINING STABILITY OF GLM-130B\nThe training stability is the decisive factor in GLM-130B’s quality, which ', 'into INT4 precision without post training while OPT\nand BLOOM can only reach INT8. Due to a unique property of the GLM architecture, GLM-130B’s\nINT4 quantization introduces negligible performance degradation, e.g., -0.74% on LAMBADA and\neven +0.05% on MMLU, making it still better than the uncompressed GPT-3. This enables GLM-\n130B’s fast inference with performance guarantee on a server of 4 ×RTX 3090 (24G) or 8 ×RTX\n2080 Ti (11G), the most affordable GPU required for using 100B-scale LLMs to date.\n2\x0cPublished as a conference paper at ICLR 2023\nGradient Norm(a) More than 30 failed preliminary trials at 100B-scale (b) Final decisive trials: Sandwich-LN v.s. DeepNorm012345678910111213\n0 500 1k 1.5k 2k2.5k 3k\nFigure 3: Trials on different LayerNorms for GLM-130B training. It turns out that DeepNorm is the\nmost stable one, as it has small gradient norm and does not spike in the early stage training.\nWe open-source the model checkpoints, code, training logs, related toolkits, and lessons learned.\n2 T HEDESIGN CHOICES OF GLM-130B\nThe architecture of a machine learning model defines its inductive bias. However, it has been real-\nized that it is computationally unaffordable to explore various architectural designs for LLMs. We\nintroduce and explain the unique design choices of GLM-130B.\n2.1 GLM-130B’ SARCHITECTURE\nGLM as Backbone. Most recent 100B-scale LLMs, such as GPT-3, PaLM, OPT, and BLOOM,\nfollow the traditional GPT-style (Radford et al., 2019) architecture of decoder-only autoregressive\nlanguage modeling. In GLM-130B, we instead make an attempt to explore the potential of a bidi-\nrectional GLM—General Language Model (Du et al., 2022)—as its backbone.\nGLM is a transformer-based language model that leverages autoregressive blank infilling as its train-\ning objective. Briefly, for a ']","GLM-130B employs a 3D parallel strategy combining data, tensor, and pipeline model parallelism, optimized for 96 DGX-A100 GPU nodes, maximizing token throughput and hardware utilization.","The parallel strategies utilized to train GLM-130B efficiently on a GPU cluster are data parallelism, tensor model parallelism, and pipeline parallelism. Additionally, a 3D parallel strategy is formed by combining pipeline model parallelism with data parallelism and tensor model parallelism to handle the GPU memory requirements and increase overall GPU utilization. The model is configured based on a 4-way tensor parallelism and 8-way pipeline parallelism, with a relative big global batch size of 4,224 to reduce time and GPU memory wasting.",1.0,1.0,0.8745046854019165
How does Megatron-LM's model parallel approach optimize memory and computation distribution across GPUs?,"['language\nmodels to make a simple model-parallel implementation that\ntrains efﬁciently in PyTorch, with no custom C++ code or\ncompiler required. This approach is orthogonal to pipeline-\nbased model parallelism as advocated by approaches such\nas GPipe (Huang et al., 2018).\nTo demonstrate the scalability of our approach, we establisharXiv:1909.08053v4 [cs.CL] 13 Mar 2020\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nFigure 1. Model (blue) and model+data (green) parallel FLOPS\nas a function of number of GPUs. Model parallel (blue): up to\n8-way model parallel weak scaling with approximately 1 billion\nparameters per GPU (e.g. 2 billion for 2 GPUs and 4 billion for\n4 GPUs). Model+data parallel (green): similar conﬁguration as\nmodel parallel combined with 64-way data parallel.\na baseline by training a model of 1.2 billion parameters\non a single NVIDIA V100 32GB GPU, that sustains 39\nTeraFLOPs. This is 30% of the theoretical peak FLOPS\nfor a single GPU as conﬁgured in a DGX-2H server, and\nis thus a strong baseline. Scaling the model to 8.3 billion\nparameters on 512 GPUs with 8-way model parallelism,\nwe achieve up to 15.1 PetaFLOPs per second sustained\nover the entire application. This is 76% scaling efﬁciency\ncompared to the single GPU case. Figure 1 shows more\ndetailed scaling results.\nTo analyze the effect of model size scaling on accuracy,\nwe train both left-to-right GPT-2 (Radford et al., 2019) lan-\nguage models as well as BERT (Devlin et al., 2018) bidi-\nrectional transformers and evaluate them on several down-\nstream tasks. We show that the existing BERT architecture\nresults in model degradation as the size increases. We over-\ncome this challenge by rearranging the layer normalization\nand residual connection in the transformer layers and show\nthat with ', 'prompted datasets from (Sanh et al., 2022; Wang et al., 2022a), listed\nin Appendix C and Table 12. GLM-130B users are suggested to avoid evaluating its zero-shot and\nfew-shot capabilities on these datasets according to the criterion illustrated in Section 5.\n2.3 P LATFORM -AWARE PARALLEL STRATEGIES AND MODEL CONFIGURATIONS\nGLM-130B is trained on a cluster of 96 DGX-A100 GPU (8 ×40G) servers with a 60-day access.\nThe goal is to pass through as many tokens as possible, as a recent study (Hoffmann et al., 2022)\nsuggests that most existing LLMs are largely under-trained.\nThe 3D Parallel Strategy. The data parallelism (Valiant, 1990) and tensor model paral-\nlelism (Shoeybi et al., 2019) are the de facto practices for training billion-scale models (Wang &\nKomatsuzaki, 2021; Du et al., 2022). To further handle the huge GPU memory requirement and the\ndecrease in overall GPU utilization resulted from applying tensor parallel between nodes—as 40G\nrather than 80G A100s are used for training GLM-130B, we combine the pipeline model parallelism\nwith the other two strategies to form a 3D parallel strategy.\nThe pipeline parallelism divides the model into sequential stages for each parallel group, and to fur-\nther minimize bubbles introduced by pipeline, we leverage the PipeDream-Flush (Narayanan et al.,\n2021) implementation from DeepSpeed (Rasley et al., 2020) to train GLM-130B with a relative\n4\x0cPublished as a conference paper at ICLR 2023\nbig global batch size (4,224) to reduce time and GPU memory wasting. Through both numeri-\ncal and empirical examinations, we adopt 4-way tensor parallelism and 8-way pipeline parallelism\n(Cf. Appendix B.4 for details). Following the calculation in (Chowdhery et al., 2022), we report\nhardware FLOPs utilization (HFU) ', 'problem size they can tackle: the model must ﬁt\nentirely on one worker. With language models of increasing\nsize and complexity like BERT and GPT-2, neural networks\nhave approached the memory capacity of modern hardware\naccelerators. One solution to this problem is to employ\nparameter sharing to reduce the memory footprint of the\nmodel (Lan et al., 2019), but this limits the overall capacity\nof the model. Our approach is to utilize model parallelism\nto split the model across multiple accelerators. This not\nonly alleviates the memory pressure, but also increases the\namount of parallelism independently of the microbatch size.\nWithin model parallelism, there are two further paradigms:\nlayer-wise pipeline parallelism, and more general distributed\ntensor computation. In pipeline model parallelism, groups\nof operations are performed on one device before the outputs\nare passed to the next device in the pipeline where a differ-\nent group of operations are performed. Some approaches\n(Harlap et al., 2018; Chen et al., 2018) use a parameter\nserver (Li et al., 2014) in conjunction with pipeline par-\nallelism. However these suffer from inconsistency issues.\nThe GPipe framework for TensorFlow (Huang et al., 2018)\novercomes this inconsistency issue by using synchronous\ngradient decent. This approach requires additional logic to\nhandle the efﬁcient pipelining of these communication and\ncomputation operations, and suffers from pipeline bubbles\nthat reduce efﬁciency, or changes to the optimizer itself\nwhich impact accuracy.\nDistributed tensor computation is an orthogonal and more\ngeneral approach that partitions a tensor operation across\nmultiple devices to accelerate computation or increase\nmodel size. FlexFlow (Jia et al., 2018), a deep learning\nframework orchestrating such parallel computation, pro-\nvides a method to pick the best parallelization strategy. Re-\ncently, Mesh-TensorFlow (Shazeer et al., 2018) introduced\na language for ']", By partitioning key operations such as GEMMs within transformer layers across GPUs and minimizing communication overhead with strategic all-reduce operations.,"Megatron-LM's model parallel approach optimizes memory and computation distribution across GPUs by utilizing model parallelism to split the model across multiple accelerators. This helps alleviate memory pressure by reducing the memory footprint of the model and increases the amount of parallelism independently of the microbatch size. The approach involves layer-wise pipeline parallelism and distributed tensor computation to efficiently distribute the workload across GPUs, enabling efficient training of multi-billion parameter language models without requiring custom C++ code or compiler.",1.0,1.0,0.44093406200408936
How does Megatron-LM address the challenges of large batch training and optimization in transformer models?,"['Megatron-LM: Training Multi-Billion Parameter Language Models Using\nModel Parallelism\nMohammad Shoeybi1 2Mostofa Patwary1 2Raul Puri1 2Patrick LeGresley2Jared Casper2\nBryan Catanzaro2\nAbstract\nRecent work in language modeling demonstrates\nthat training large transformer models advances\nthe state of the art in Natural Language Processing\napplications. However, very large models can be\nquite difﬁcult to train due to memory constraints.\nIn this work, we present our techniques for train-\ning very large transformer models and implement\na simple, efﬁcient intra-layer model parallel ap-\nproach that enables training transformer models\nwith billions of parameters. Our approach does\nnot require a new compiler or library changes, is\northogonal and complimentary to pipeline model\nparallelism, and can be fully implemented with\nthe insertion of a few communication operations\nin native PyTorch. We illustrate this approach\nby converging transformer based models up to\n8.3 billion parameters using 512 GPUs. We sus-\ntain 15.1 PetaFLOPs across the entire applica-\ntion with 76% scaling efﬁciency when compared\nto a strong single GPU baseline that sustains 39\nTeraFLOPs, which is 30% of peak FLOPs. To\ndemonstrate that large language models can fur-\nther advance the state of the art (SOTA), we train\nan 8.3 billion parameter transformer language\nmodel similar to GPT-2 and a 3.9 billion parame-\nter model similar to BERT. We show that careful\nattention to the placement of layer normalization\nin BERT-like models is critical to achieving in-\ncreased performance as the model size grows. Us-\ning the GPT-2 model we achieve SOTA results\non the WikiText103 (10.8 compared to SOTA per-\nplexity of 15.8) and LAMBADA (66.5% com-\npared to SOTA accuracy of 63.2%) datasets. Our\nBERT model achieves SOTA results on the RACE\ndataset (90.9% compared to SOTA accuracy of\n89.4%).\n1Equal contribution2NVIDIA. Correspondence to: Mohammad\nShoeybi <mshoeybi@nvidia.com >.1. Introduction\nNatural Language Processing (NLP) ', 'in\nour training data.\n5.3. Bi-directional Transformer Results Using BERT\nIn this section, we apply our methodology to BERT-style\ntransformer models and study the effect of model scaling\non several downstream tasks. Prior work (Lan et al., 2019)\nfound that increasing model size beyond BERT-large with\n336M parameters results in unexpected model degradation.\nTo address this degradation, the authors of that work (Lan\net al., 2019) introduced parameter sharing and showed that\nthat their models scale much better compared to the original\nBERT model.\nWe further investigated this behaviour and empirically\ndemonstrated that rearranging the order of the layer nor-\nmalization and the residual connections as shown in Figure\n7 is critical to enable the scaling of the BERT-style mod-\nels beyond BERT-Large. The architecture (b) in Figure 7\neliminates instabilities observed using the original BERT\narchitecture in (a) and also has a lower training loss. To\nthe best of our knowledge, we are the ﬁrst to report such a\nchange enables training larger BERT models.\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 5. Development set results for MNLI, QQP, SQuAD 1.1 and SQuAD 2.0 and test set results for RACE. The trained tokens represents\nconsumed tokens during model pretraining (proportional to batch size times number of iterations) normalized by consumed tokens during\nmodel pretraining for our 336M model.\nModeltrained tokens MNLI m/mm QQP SQuAD 1.1 SQuAD 2.0 RACE m/h\nratio accuracy accuracy F1 / EM F1 / EM accuracy\n(dev set) (dev set) (dev set) (dev set) (test set)\nRoBERTa (Liu et al., 2019b) 2 90.2 / 90.2 92.2 94.6 / 88.9 89.4 / 86.5 83.2 (86.5 / 81.8)\nALBERT (Lan et al., 2019) 3 90.8 92.2 94.8 / 89.3 90.2 ', 'data, and use those patterns\nto help make predictions. This approach is also prone to\nerrors, as it relies on the training data to help make correct\npredictions, and the data might be incorrectly labeled, re-\nsulting in a model that produces a poor set of predictions.\nIn the case of GPT-2, the model only has about 100 training\nsentences for each type of phrase (subject-verb-object).\nAdditionally, languages have different rules for different\ntypes of phrasing. In English, the subject-verb-object con-\nstruction is fairly universal, but other languages have differ-\nent rules, which makes training a GPT more complicated.\nFinally, there is an inherent trade-off between the number\nof rules and the performance of the model ...\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nContext : The 36th International Conference on Machine\nLearning (ICML 2019) will be held in Long Beach, CA,\nUSA from June 10th to June 15th, 2019. The conference\nwill consist of one day of tutorials (June 10), followed\nby three days of main conference sessions (June 11-13),\nfollowed by two days of workshops (June 14-15).\nMegatron-LM : With a broad scope, the conference ad-\ndresses the challenges and opportunities in machine learning\nfor practitioners and researchers. The conference program\nwill feature sessions that cover different machine learning\ntopics, from reinforcement learning to computational biol-\nogy and from AI to deep learning. It is the world’s premier\nforum for exploring and presenting advances in machine\nlearning.\nICML 2019 will offer an impressive range of sessions,\nwhich will be of interest to practitioners, researchers, and\nstudents. Some of the topics we will cover include:\nReinforcement learning\nSoft Computing\nComputational biology\nConvolutional networks\nDeep learning\nStatistical learning theory\nStatistical learning machine\nNatural language processing\nBiology\nAwards\nSince its ﬁrst edition, the conference has grown ']","Through mixed precision training with dynamic loss scaling, weight initialization strategies, and careful optimizer configurations, including Adam with weight decay.","Megatron-LM addresses the challenges of large batch training and optimization in transformer models by implementing a simple, efficient intra-layer model parallel approach that enables training transformer models with billions of parameters. This approach does not require a new compiler or library changes, is orthogonal and complimentary to pipeline model parallelism, and can be fully implemented with the insertion of a few communication operations in native PyTorch. Additionally, they demonstrate the effectiveness of their approach by converging transformer-based models up to 8.3 billion parameters using 512 GPUs with sustained performance and efficiency improvements compared to a strong single GPU baseline. They also show careful attention to the placement of layer normalization in BERT-like models is critical to achieving increased performance as the model size grows.",0.0,1.0,0.33388441801071167
"What specific tasks and benchmarks were used to evaluate PAL's performance, and what were the results?","['times, but halfway through also\nsay quack” ).5. Results\n5.1. Math Results\nTable 1 shows the following results: across all tasks,\nPALusing Codex sets a new few-shot state-of-the-art top-\n1 decoding across all datasets, outperforming COTCodex,\nCOTPaLM-540 B, and COTMinerva 540B which was ﬁne-tuned\non explicit mathematical content.\nInterestingly, COTalso beneﬁts from Codex over PaLM-\n540 Bin some of the datasets such as ASDIV , but performs\nworse than PaLM-540 Bin others such as SVAMP . Yet,\nusing PALfurther improves the solve rate across all datasets.\nGSM-HARD On GSM -HARD (Table 1), the accuracy of\nDIRECT drops dramatically from 19.7% to 5.0% (a relative\ndrop of 74%), the accuracy of COTdrops from 65.6% to\n20.1% (a relative drop of almost 70%), while PALremains\nstable at 61.5%, dropping by only 14.3%. The results of\nCOTonGSM-HARD did not improve even when we replaced\nits prompts with prompts that include large numbers (Ap-\npendix B). This shows how PALprovides not only better\x0cPAL: Program-aided Language Models 6\nCOLORED OBJECT PENGUINS DATE REPEAT COPY OBJECT COUNTING\nDIRECT Codex 75.7 71.1 49.9 81.3 37.6\nCOTLaMDA-137B - - 26.8 - -\nCOTPaLM-540 B - 65.1 65.3 - -\nCOTCodex 86.3 79.2 64.8 68.8 73.0\nPALCodex 95.1 93.3 76.2 90.6 96.7\nTable 2: Solve rate on three symbolic reasoning datasets and two algorithmic datasets, In all datasets, PALachieves a much\nhigher accuracy than chain-of-thought. Results with closed models LaMDA-137B and PaLM-540B are included if available\nto public (Wei et al., 2022; Suzgun et al., 2022).\nresults on the standard benchmarks, but is also much more\nrobust . In fact, since PALofﬂoads the computation to the\nPython interpreter, any complex computation can be per-\nformed accurately given the correctly generated program.\nLarge Numbers or Incorrect Reasoning? Are the ', 'Samples on P AL 14\nE Standard Deviations Across Multiple Order of Prompts 17\nF P AL Beyond Benchmarks 17\nG Closer Look into Token-level Behaviors of Different Mechanisms 20\nH Datasets 20\nH.1 Creating GSM -HARD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\nH.2 GSM -HARD Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\nI Generalization of PAL to Least-to-Most Prompting 24\nJ Prompts 26\nJ.1 Reasoning about Colored Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\nJ.2 Penguins in a Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\nJ.3 Date Understanding . . . . . . . . . . . . . . . . . . . . . . . . . . . ', '23.7%. Similarly, PAL\nvastly outperforms COTby absolute 21.8% on REPEAT\nCOPY. Surprisingly, DIRECT prompting performs better\nthan COTonREPEAT COPY. Yet, PALimproves over\nDIRECT by 9.3% in R EPEAT COPY.\n[0,2] [3,5] [6,8] [9,11] [12,14] [15,17] [18,20] [21,23] [24,26]0.60.81\nNumber of ObjectsAccuracy\nPaL\nCoT\nFigure 6: The solve rate on COLORED OBJECTS with re-\nspect to the number of objects included in the test question.\nIs PAL sensitive to the complexity of the question? We\nexamined how the performance of PALandCOTchange as\nthe complexity of the input question grows, measured as the\nnumber of objects in the question of COLORED OBJECTS .\nAs shown in Figure 6, PALis superior COTacross all input\nlengths. As the number of objects in the question increases,\nCOT’s accuracy is unstable and drops, while PALremains\nconsistently close to 100%. More analysis on the token-level\npredictions can be found in Appendix G.\x0cPAL: Program-aided Language Models 7\ncode-cushman-001 code-davinci-001 code-davinci-002020406080\n21.731.872.0\n19.126.060.1\n13.6%22.3%19.8%Solve ratePAL\nCOT\nRelative Improvement\nFigure 7: PALwith different models on GSM8K: though\nthe absolute accuracies with code-cushman-001\nandcode-davinci-001 are lower than\ncode-davinci-002 , the relative improvement of\nPAL over C OT is consistent across models.text-davinci-001 text-davinci-002 text-davinci-003020406080\n26.546.965.3\n8.665.869.8 COT PAL\nFigure 8: PALwith NL LMs on GSM 8K: though\nCOToutperforms PALwithtext-davinci-001 , once\nthe base LM is sufﬁciently strong, PALis beneﬁcial\nwithtext-davinci-002 andtext-davinci-003\nas well. That is, P AL is not limited to code-LMs only.\n6. Analysis\nDoes P AL work with weaker LMs? In all our experi-\nments in Section 5, PALused thecode-davinci-002\nmodel; but can PALwork with weaker models of code? We\ncompared PALwith COTwhen both prompting approaches\nuse the same weaker base LMs code-cushman-001\nandcode-davinci-001 . As shown in Figure 7, even\nthough the absolute accuracies of code-cushman-001\nandcode-davinci-001 are lower, the relative improve-\nment of PALover COTremains consistent across models.\nThis shows that PALcan ']"," PAL was evaluated across 13 tasks, including mathematical, symbolic, and algorithmic reasoning from BIG-Bench Hard and other benchmarks, consistently outperforming larger models and setting new accuracy standards across all evaluated tasks.","The specific tasks and benchmarks used to evaluate PAL's performance were symbolic reasoning datasets and algorithmic datasets. The results showed that PAL achieved a much higher accuracy than chain-of-thought models across all datasets. Additionally, PAL outperformed COT across all tasks, setting a new few-shot state-of-the-art top-1 decoding across all datasets.",1.0,1.0,0.7819352746009827
How does the inclusion of specific metadata in CodeNet facilitate a wide range of code analysis tasks?,"['for source code exist, with many targeting one or a small number of\ntasks. Such tasks include clone detection, vulnerability detection [ 10,11], cloze test [ 12], code\ncompletion [ 13,14], code repair [ 15], code-to-code translation, natural language code search [ 16],\ntext-to-code generation [ 17], and code summarization [ 16]. A detailed discussion of several of these\ntasks and their respective datasets is available in CodeXGLUE [ 18], which is a collection of existing\ndatasets. CodeNet, on the other hand, is a new dataset curated from scratch, that aims to support a\nbroad set of use cases. Popular datasets of a similar kind are POJ-104 [ 19] (which is incorporated as\npart of CodeXGLUE as well) and GCJ [ 20] (derived from Google Code Jam). We compare CodeNet\nto these datasets in the following.\n3.1 POJ-104\nPOJ-104 was collected from a pedagogical online judge system. The code samples are submissions\nto 104 programming problems. With 500 submissions to each problem, there is a total of 52,000 code\nsamples in the dataset. This dataset has been used by many authors for code classiﬁcation [ 19] and\ncode similarity [21].\nPOJ-104 is faced with several limitations.\n1.The code samples are in C and C++, but the two languages are not distinguished. Although they are\nclosely related, mixing them leads to parsing errors and a reduction of useful code samples [21].\n2.Useful metadata such as the results of the judging system (acceptance, error types etc.) are missing.\nTherefore, for certain applications where compilabilty or code correctness is important, additional\npre-processing efforts are needed and useful code samples are reduced [ 21]. The dataset does\nnot contain the ', 'types of errors,\naccordingly labeled. The submissions are in many different languages.\nCode Samples. Each code sample is a single ﬁle and includes inputting the test cases and printing out\nthe computed results. The ﬁle name uses standard extensions that denote the programming language,\ne.g.,.pyfor Python. The majority of code samples contain only one function, although submissions\nto more complex problems might have several functions.\n2\x0c(a) Languages (b) Status\nFigure 1: Percentage of submissions per language (left) and per status (right).\nMetadata. The metadata enables data queries and selections among the large collection of problems,\nlanguages, and source ﬁles. The metadata is organized in a two level hierarchy. The ﬁrst is the\ndataset level, which describes all problems. The second is the problem level, which details all the\nsubmissions to a single problem. Metadata and data are separated in the dataset structure.\nAt the dataset level, a single CSV ﬁle lists all problems and their origins, along with the CPU time\nand memory limits set for them. Additionally, every problem has an HTML ﬁle with a detailed\ndescription of the problem, the requirements and constraints, and the IO examples.\nAt the problem level, every problem has a CSV ﬁle. The metadata for each submission is summarized\nin Table 2 below, which lists the ﬁelds contained in each CSV ﬁle as well as the corresponding\ndescriptions.\n2.1 How to read the CodeNet dataset\nThe data and metadata are organized in a rigorous directory structure. The top level Project_CodeNet\ndirectory contains several sub-directories: data ,metadata ,problem_descriptions , and\nderived . The code samples or submissions reside under the data directory. The data directory\nis organized as (problem_id)/(language)/(submission) , so the ', 'large collection of code samples with extensive metadata. It\nalso contains documented tools to transform code samples into intermediate representations and to\naccess the dataset and make tailored selections. Our goal is to provide the community with a large,\nhigh-quality curated dataset that can be used to advance AI techniques for source code.\nCodeNet is derived from the data available on two online judge websites: AIZU [ 8] and AtCoder [ 9].\nOnline judge websites pose programming problems in the form of courses and contests. The dataset\nconsists of submissions to these problems, which are judged by an automated review process for\ncorrectness. Problem descriptions, submission outcomes, and associated metadata are available via\nvarious REST APIs.\nScale and Statistics. CodeNet contains a total of 13,916,868 submissions, divided into 4053\nproblems. Among the submissions, 53.6% (7,460,588) are accepted (compilable and pass the\nprescribed tests), 29.5% are marked with wrong answer, and the remaining rejected due to their\nfailure to meet run time or memory requirements. To our knowledge, this is the largest dataset so\nfar among similar kinds. Submissions are in 55 different languages; 95% of them are coded in C++,\nPython, Java, C, Ruby, and C#. C++ is the most common language, with 8,008,527 submissions (57%\nof the total), of which 4,353,049 are accepted. With the abundance of code samples, users can extract\nlarge benchmark datasets that are customized to their downstream use. See Figure 1 for a summary.\nDiversity. The problems in CodeNet are mainly pedagogical and range from elementary exercises\nto sophisticated problems that require advanced algorithms. The submitters range from beginners\nto experienced coders. Some submissions are correct while others contain different ']","Rich metadata including problem descriptions, submission outcomes, and programming languages enable tasks like bug fixing, performance improvement, and understanding coding patterns.","The inclusion of specific metadata in CodeNet facilitates a wide range of code analysis tasks by enabling data queries and selections among the large collection of problems, languages, and source files. The metadata is organized in a two-level hierarchy, with dataset level information describing all problems and problem level information detailing submissions to a single problem. This metadata includes details such as CPU time and memory limits, problem descriptions, requirements, constraints, input-output examples, and submission outcomes. By providing this detailed metadata, CodeNet allows for tailored selections and analysis of code samples, making it easier for researchers and developers to extract relevant information for various tasks such as code classification, similarity analysis, code repair, code-to-code translation, natural language code search, text-to-code generation, and code summarization.",1.0,1.0,0.6897653937339783
"What types of tasks are included in SuperGLUE, and how do they enhance the benchmark's complexity?","['high-level goals, the original version of\nthe benchmark is no longer a suitable metric for quantifying such progress.\nIn response, we introduce SuperGLUE, a new benchmark designed to pose a more rigorous test of\nlanguage understanding. SuperGLUE has the same high-level motivation as GLUE: to provide a\nsimple, hard-to-game measure of progress toward general-purpose language understanding technolo-\ngies for English. We anticipate that signiﬁcant progress on SuperGLUE should require substantive\ninnovations in a number of core areas of machine learning, including sample-efﬁcient, transfer,\nmultitask, and unsupervised or self-supervised learning.\nSuperGLUE follows the basic design of GLUE: It consists of a public leaderboard built around\neight language understanding tasks, drawing on existing data, accompanied by a single-number\nperformance metric, and an analysis toolkit. However, it improves upon GLUE in several ways:\nMore challenging tasks: SuperGLUE retains the two hardest tasks in GLUE. The remaining tasks\nwere identiﬁed from those submitted to an open call for task proposals and were selected based on\ndifﬁculty for current NLP approaches.\nMore diverse task formats: The task formats in GLUE are limited to sentence- and sentence-pair\nclassiﬁcation. We expand the set of task formats in SuperGLUE to include coreference resolution\nand question answering (QA).\nComprehensive human baselines: We include human performance estimates for all benchmark\ntasks, which verify that substantial headroom exists between a strong BERT-based baseline and\nhuman performance.\nImproved code support: SuperGLUE is distributed with a new, modular toolkit for work on\npretraining, multi-task learning, and transfer learning in NLP, built around standard tools including\nPyTorch (Paszke et al., 2017) and AllenNLP (Gardner et al., 2017).\nReﬁned usage rules: The conditions for inclusion on the SuperGLUE leaderboard have been\nrevamped to ensure fair ', 'corresponds well to human\njudgments of output quality. Some text generation tasks fail to meet this criteria due to issues with\nautomatic metrics like ROUGE and BLEU (Callison-Burch et al., 2006; Liu et al., 2016, i.a.).\n4\x0cPublic data: We require that tasks have existing public training data in order to minimize the risks\ninvolved in newly-created datasets. We also prefer tasks for which we have access to (or could create)\na test set with private labels.\nTask format: We prefer tasks that had relatively simple input and output formats, to avoid incentiviz-\ning the users of the benchmark to create complex task-speciﬁc model architectures. Still, while GLUE\nis restricted to tasks involving single sentence or sentence pair inputs, for SuperGLUE we expand\nthe scope to consider tasks with longer inputs. This yields a set of tasks that requires understanding\nindividual tokens in context, complete sentences, inter-sentence relations, and entire paragraphs.\nLicense: Task data must be available under licences that allow use and redistribution for research\npurposes.\nTo identify possible tasks for SuperGLUE, we disseminated a public call for task proposals to the\nNLP community, and received approximately 30 proposals. We ﬁltered these proposals according\nto our criteria. Many proposals were not suitable due to licensing issues, complex formats, and\ninsufﬁcient headroom; we provide examples of such tasks in Appendix D. For each of the remaining\ntasks, we ran a BERT-based baseline and a human baseline, and ﬁltered out tasks which were either\ntoo challenging for humans without extensive training or too easy for our machine baselines.\n3.2 Selected Tasks\nFollowing this process, we arrived at eight tasks to use in SuperGLUE. See Tables 1 and 2 ', 'limitations, we believe that\nWinogender’s inclusion is worthwhile in providing a coarse sense of how social biases evolve with\nmodel performance and for keeping attention on the social ramiﬁcations of NLP models.\n4 Using SuperGLUE\nSoftware Tools To facilitate using SuperGLUE, we release jiant (Wang et al., 2019b),4a modular\nsoftware toolkit, built with PyTorch (Paszke et al., 2017), components from AllenNLP (Gardner\net al., 2017), and the transformers package.5jiant implements our baselines and supports the\nevaluation of custom models and training methods on the benchmark tasks. The toolkit includes\nsupport for existing popular pretrained models such as OpenAI GPT and BERT, as well as support\nfor multistage and multitask learning of the kind seen in the strongest models on GLUE.\nEligibility Any system or method that can produce predictions for the SuperGLUE tasks is eligible\nfor submission to the leaderboard, subject to the data-use and submission frequency policies stated\nimmediately below. There are no restrictions on the type of methods that may be used, and there is\nno requirement that any form of parameter sharing or shared initialization be used across the tasks in\nthe benchmark. To limit overﬁtting to the private test data, users are limited to a maximum of two\nsubmissions per day and six submissions per month.\nData Data for the tasks are available for download through the SuperGLUE site and through a\ndownload script included with the software toolkit. Each task comes with a standardized training set,\ndevelopment set, and unlabeled test set. Submitted systems may use any public or private data when\ndeveloping their systems, with a few exceptions: Systems may only use the SuperGLUE-distributed\nversions of the task datasets, as ']","SuperGLUE includes eight diverse tasks such as Boolean Questions (BoolQ), Choice of Plausible Alternatives (COPA), and Winograd Schema Challenge (WSC), enhancing complexity through a mix of question answering, natural language inference, coreference resolution, and word sense disambiguation tasks.","The types of tasks included in SuperGLUE are more diverse compared to GLUE, as they go beyond sentence- and sentence-pair classification tasks. SuperGLUE includes tasks such as coreference resolution and question answering (QA). This enhances the benchmark's complexity by requiring understanding of individual tokens in context, complete sentences, inter-sentence relations, and entire paragraphs, which are not limited to simple input and output formats.",1.0,1.0,0.7347041368484497
"What criteria were used to select tasks for inclusion in SuperGLUE, and how do these criteria benefit the benchmark?","['evaluation of GLM-130B on the SuperGLUE (Wang et al., 2019) benchmark,\nwhich consists 8 different natural language understanding challenges. Noted that these results\nare neither zero/few-shot nor fine-tuned results, because 7 out of 8 tasks’ training sets have been\nincluded in GLM-130B’s MIP training (except for ReCoRD) together with other 67 multi-task\ndatasets; however, GLM-130B is also not individually fine-tuned on any of them. Therefore, these\nresults are not for relative comparison for any other models’, but only for readers’ reference on\nGLM-130B’s absolute ability.\n44\x0cPublished as a conference paper at ICLR 2023\ncb record wsc multirc rte wic copa boolq20406080100\nGLM-130B (uni)\nGLM-130B (bi)\nFigure 17: GLM-130B (uni and bi)’s untuned results on SuperGLUE development set, using prompt-\nsource (Bach et al., 2022) prompts and task formulation. DISCLAIMER: Noted that some of the\nSuperGLUE training sets have been included in the MIP training. We report the results here\nonly for readers’ reference.\nSports LLC Coin Flip Coin Flip (OOD: 3) Reverse List Date020406080100\n54.0\n1.084.5\n47.953.1\n15.773.7\n13.495.0\n58.668.3\n27.9Standard Prompting Chain-of-Thoughts\nFigure 18: Chain-of-thought prompting can also improve GLM-130B’s performance on reasoning\ntasks compared to standard prompting.\nBoolQ CB COPA MultiRC ReCoRD RTE WiC WSC\nGLM-130B 89.69 98.21 100 89.32 92.11 94.22 76.96 88.5\nTable 21: The results of GLM-130B on the SuperGLUE dataset obtained using the P-tuning v2 (Liu\net al., 2022). We report the Accuracy metric for all datasets except for MultiRC (F1a) and ReCoRD\n(F1).\nThe results are presented in Figure 17. We ablate the unidirectional and bidirectional GLM-130B to\njustify the usefulness of GLM objective in boosting LLMs’ ability to understand. Each point in the\nfigure refers to a prompt-specific result, for which the prompt is from the promptsource (Bach et al.,\n2022) ', 'limitations, we believe that\nWinogender’s inclusion is worthwhile in providing a coarse sense of how social biases evolve with\nmodel performance and for keeping attention on the social ramiﬁcations of NLP models.\n4 Using SuperGLUE\nSoftware Tools To facilitate using SuperGLUE, we release jiant (Wang et al., 2019b),4a modular\nsoftware toolkit, built with PyTorch (Paszke et al., 2017), components from AllenNLP (Gardner\net al., 2017), and the transformers package.5jiant implements our baselines and supports the\nevaluation of custom models and training methods on the benchmark tasks. The toolkit includes\nsupport for existing popular pretrained models such as OpenAI GPT and BERT, as well as support\nfor multistage and multitask learning of the kind seen in the strongest models on GLUE.\nEligibility Any system or method that can produce predictions for the SuperGLUE tasks is eligible\nfor submission to the leaderboard, subject to the data-use and submission frequency policies stated\nimmediately below. There are no restrictions on the type of methods that may be used, and there is\nno requirement that any form of parameter sharing or shared initialization be used across the tasks in\nthe benchmark. To limit overﬁtting to the private test data, users are limited to a maximum of two\nsubmissions per day and six submissions per month.\nData Data for the tasks are available for download through the SuperGLUE site and through a\ndownload script included with the software toolkit. Each task comes with a standardized training set,\ndevelopment set, and unlabeled test set. Submitted systems may use any public or private data when\ndeveloping their systems, with a few exceptions: Systems may only use the SuperGLUE-distributed\nversions of the task datasets, as ', 'high-level goals, the original version of\nthe benchmark is no longer a suitable metric for quantifying such progress.\nIn response, we introduce SuperGLUE, a new benchmark designed to pose a more rigorous test of\nlanguage understanding. SuperGLUE has the same high-level motivation as GLUE: to provide a\nsimple, hard-to-game measure of progress toward general-purpose language understanding technolo-\ngies for English. We anticipate that signiﬁcant progress on SuperGLUE should require substantive\ninnovations in a number of core areas of machine learning, including sample-efﬁcient, transfer,\nmultitask, and unsupervised or self-supervised learning.\nSuperGLUE follows the basic design of GLUE: It consists of a public leaderboard built around\neight language understanding tasks, drawing on existing data, accompanied by a single-number\nperformance metric, and an analysis toolkit. However, it improves upon GLUE in several ways:\nMore challenging tasks: SuperGLUE retains the two hardest tasks in GLUE. The remaining tasks\nwere identiﬁed from those submitted to an open call for task proposals and were selected based on\ndifﬁculty for current NLP approaches.\nMore diverse task formats: The task formats in GLUE are limited to sentence- and sentence-pair\nclassiﬁcation. We expand the set of task formats in SuperGLUE to include coreference resolution\nand question answering (QA).\nComprehensive human baselines: We include human performance estimates for all benchmark\ntasks, which verify that substantial headroom exists between a strong BERT-based baseline and\nhuman performance.\nImproved code support: SuperGLUE is distributed with a new, modular toolkit for work on\npretraining, multi-task learning, and transfer learning in NLP, built around standard tools including\nPyTorch (Paszke et al., 2017) and AllenNLP (Gardner et al., 2017).\nReﬁned usage rules: The conditions for inclusion on the SuperGLUE leaderboard have been\nrevamped to ensure fair ']","Tasks were selected based on difficulty, evaluability, substance, public data availability, simple formats, and licensing conditions, ensuring a challenging, diverse, and accessible benchmark for advancing general-purpose language understanding technologies.","The criteria used to select tasks for inclusion in SuperGLUE were based on difficulty for current NLP approaches. These criteria benefit the benchmark by ensuring that it poses a more rigorous test of language understanding, requiring substantive innovations in machine learning areas such as sample-efficient, transfer, multitask, and unsupervised or self-supervised learning.",1.0,1.0,0.5628139972686768
"What are the main components of GLM-130B's pre-training objective, and how do they contribute to its performance?","['evaluation of GLM-130B on the SuperGLUE (Wang et al., 2019) benchmark,\nwhich consists 8 different natural language understanding challenges. Noted that these results\nare neither zero/few-shot nor fine-tuned results, because 7 out of 8 tasks’ training sets have been\nincluded in GLM-130B’s MIP training (except for ReCoRD) together with other 67 multi-task\ndatasets; however, GLM-130B is also not individually fine-tuned on any of them. Therefore, these\nresults are not for relative comparison for any other models’, but only for readers’ reference on\nGLM-130B’s absolute ability.\n44\x0cPublished as a conference paper at ICLR 2023\ncb record wsc multirc rte wic copa boolq20406080100\nGLM-130B (uni)\nGLM-130B (bi)\nFigure 17: GLM-130B (uni and bi)’s untuned results on SuperGLUE development set, using prompt-\nsource (Bach et al., 2022) prompts and task formulation. DISCLAIMER: Noted that some of the\nSuperGLUE training sets have been included in the MIP training. We report the results here\nonly for readers’ reference.\nSports LLC Coin Flip Coin Flip (OOD: 3) Reverse List Date020406080100\n54.0\n1.084.5\n47.953.1\n15.773.7\n13.495.0\n58.668.3\n27.9Standard Prompting Chain-of-Thoughts\nFigure 18: Chain-of-thought prompting can also improve GLM-130B’s performance on reasoning\ntasks compared to standard prompting.\nBoolQ CB COPA MultiRC ReCoRD RTE WiC WSC\nGLM-130B 89.69 98.21 100 89.32 92.11 94.22 76.96 88.5\nTable 21: The results of GLM-130B on the SuperGLUE dataset obtained using the P-tuning v2 (Liu\net al., 2022). We report the Accuracy metric for all datasets except for MultiRC (F1a) and ReCoRD\n(F1).\nThe results are presented in Figure 17. We ablate the unidirectional and bidirectional GLM-130B to\njustify the usefulness of GLM objective in boosting LLMs’ ability to understand. Each point in the\nfigure refers to a prompt-specific result, for which the prompt is from the promptsource (Bach et al.,\n2022) ', 'from all of our generous partners, we\nfinally succeeded in making our pre-training algorithms runnable across all the platforms—frankly,\na surprising achievement for this project. The timeline of GLM-130B in Figure 21 covers most of\nthe issues we have encountered and addressed as of this writing.\nOn April 26th, we received a generous computing sponsorship from Zhipu.AI — an AI startup that\naims to teach machines to think like humans. After another week of testing, we finally kicked off\nthe training of the GLM-130B model on its 96 A100 (40G * 8) servers on May 6th. Additionally,\nZhipu.AI also sent a team to help evaluate the pre-trained model and build a demonstration website.\nThe training period spanned two months, during which we began developing a toolkit to allow GLM-\n130B’s inference in low-resource setting with swapping technique and quantization. Though it is\nalready the most accessible model of its scale, together with our partner from Tsinghua NLP, we have\nbeen exploring the limit of popularized hardware platforms, which would truly make the 100B-scale\nmodel accessible to as many people as possible. To date, we managed to reach the INT4 weight\nquantization for GLM-130B. Importantly, the INT4 version of GLM-130B without post training\n16This section is largely extracted and updated from the blog introduction of GLM-130B at http://keg.\ncs.tsinghua.edu.cn/glm-130b/ (Posted date: August 4, 2022).\n53\x0cPublished as a conference paper at ICLR 2023\n2021.12•The “千亿”(100B) project towardsan opendensepre-trained GLM at 100B scale isconceived•Survey pre-trainingstrategies of existing models of similar scale,suchasGPT-3,Gopher=> Limited public infoabout how they were trainedand issues they met•SearchforpossibleGPUclusters&sponsors2022.1•TesttheperformanceofFP16/FP32at100Bscaleononetestingcluster•UnexpectedexcessivememoryusageinGLM=> Torchisbetterwithfixedlengthinputsequences•InabilitytoconvergeandtrytricksfromCogViewandViT=> UseSandwich-LN•Frequentrandomhardwarefailures=> HavetorunHCPGtestbeforeeachrun2022.2•Veryslowtrainingspeedthanpreviouslycalculated=>Optimizekernelsandfuseoperators=>Findtheinputshapeiscriticaltokernelperformance•Collectpre-trainingcorporaandtokenize=>Useicetk:thesentencepieceissettotheunigrammode•Debugthe3Dpipelineparallelinthenewly-releasedMegatronandDeepSpeed2022.3•Itcan’trecoverperfectlyfromcheckpoints=>Ourcustomizeddataloaderdonotsaveitsstateseedproperlyindistributedtraining•Thememoryperprocessoristoosmall=>Requiretoomanypipelinestages=>Batchsizeistoolarge(upto12,000)=>Harmthemodel’sconvergency•Itcan’tlaunchmorethan2,000computingnodes=>Overcomethisandsupport6,000-nodetrainingbytuningLinuxkernelTCPparameters•Collectdataformulti-taskinstructionpre-training•Receiveopportunitiestotesttrainingsonseveralotherclusters•Veryslowtrainingspeedthanexpected=>Theunderlyingelement-wiseoperatorsdon’tsupportfastcomputationonlarge-dimensionvectors.2022.4•OptimizeA100kernel’scomputingefficiency=>A100kernelsprefersquare-shapedinputs,andseq_len=2,048isoptimalforourhidden-statedimension(12,288)•Inabilitytoconvergeduetolargegradientnorms(170+)ofinputembeddings=>Tryembeddingnormandgradientshrink,whichturnouttobealmostequivalent•Naïvepost-LNorpre-LNdisconvergesafterseveralthousandsofsteps=>TrySandwich-LNwithPB-Relax•Itstilldisconvergesafteroneweek’strial=>Thedataloaderstateseedsarenotunifiedfordifferentpipelinestages,resultinginamismatchofinputdataandlabels.•Testtwopositionalencodings:RoPEandAlibi=>Alibicanbeslowerasitrequireselement-wisemanipulationonattentionmatrices---changingnum_heads*2,048* 2,048scalarsperlayer•TestGeGLUandGAU=>GAUconvergesfasterwithrelativelypoorperformanceonfine-tunedSuperGLUE•AbnormalGPUmemoryusageofnewly-addedfunctionsandclasses=>DeepSpeedhardcodesthefunctionnamesforcheckpointactivation•DecidetotrainGLMwith130billionparameters=>allowinferenceonaDGX-A10040Gnode2022.5-6•ImplementaRoPEcudaoperatorinC++=>Seeunexpectedprecisionerrorsandfinallyhaveitabandoned•Sandwich-LNstilldisconverges=>1)Reducinglearningratedoesnothelp;2)UsingHingecross-entropybecomesslowerandharmsperformance;3)ShiftingtoDeepNormstilldisconverges•UseFP32insoftmaxofattention=>Success•FindPB-RelaxunnecessaryforFP32softmax=>Italsoslowsdowntrainingasitneedstomanipulatethewholeattentionscorematrices•Experiencefewspikesinlatertraining=>1)Reducegradientshrinkfactorfrom1to0.1:useful;2)Reducethelearningrate:sometimesuseful;3)Jumpthenoisydatabatches:sometimesuseful•Findamistakeinmulti-taskdataaftertrainingfor20,000steps=>Usethecorrectdatabutitdoesnotforget2022.6-7•AdaptthepipelineparallelcheckpointstoordinaryparallelcheckpointsforefficientinferenceonasingleA100•Workonevaluationscriptsondatasets:MMLU,Big-bench,CLUE,SuperCLUE,etc.•ImplementP-TuningandP-Tuningv2forparameter-efficienttuningonGLM-130BfortuningonSuperGLUE•WorkwithBMInfonadaptingGLM-130BtoperforminferenceonasingleV100or3090=>Usepipeline-styleasynchronousswappingbetweenmainmemoryandGPUmemory•Trytofine-tuneGLM-130BwithfewerA100nodes(i.e.,12-16nodes)=>Pipeline-stylefailsduetotoomanypipelinestages=>Findthatdataparallelcannotbeintroducedforfine-tuning=>Use32-waymodelparallelforfine-tuningwithreasonableperformance\nMajorIssuesEncounteredforTrainingGLM-130B\nhttps://github.com/THUDM/GLM-130BTsinghuaKEG\nFigure 21: The timeline of major issues that training GLM-130B encountered and ', 'major challenge for training\nLLMs (Zhang et al., 2022; Scao et al., 2022; Chowdhery et al., 2022) (Cf. Figure 10 in Appendix\nfor collapses in training several 100B-scale models). A proper choice of LNs can help stabilize\nthe training of LLMs. We experiment with existing practices, e.g., Pre-LN (Xiong et al., 2020),\n3\x0cPublished as a conference paper at ICLR 2023\nPost-LN (Ba et al., 2016), Sandwich-LN (Ding et al., 2021), which are unfortunately incapable of\nstabilizing our GLM-130B test runs (Cf. Figure 3 (a) and Appendix B.2 for details).\nOur search is later focused on Post-LN due to its favorable downstream results in preliminary ex-\nperiments though it does not stabilize GLM-130B. Fortunately, one of the attempts on Post-LN\ninitialized with the newly-proposed DeepNorm (Wang et al., 2022b) generates promising training\nstability. Specifically, given the number of GLM-130B’s layers N, we adopt DeepNorm (x) =\nLayerNorm (α·x+Network (x)), where α= (2N)1\n2, and apply the Xavier normal initialization\nwith the scaling factor of (2N)−1\n2toffn,v_proj andout_proj . Additionally, all bias terms\nare initialized to zero. Figure 3 shows it significantly benefits the training stability of GLM-130B.\nPositional Encoding and FFNs. We empirically test different options for positional encoding (PE)\nand FFN improvements in terms of both training stability and downstream performance (Cf. Ap-\npendix B.3 for details). For PEs in GLM-130B, we adopt Rotary Positional Encoding (RoPE, Su\net al. (2021)) rather than ALiBi (Press et al., 2021). To improve FFNs in Transformer, we pick GLU\nwith the GeLU (Hendrycks & Gimpel, 2016) activation as the replacement.\n2.2 GLM-130B’ SPRE-TRAINING SETUP\nInspired by recent works (Aribandi et al., 2022; Wei et al., 2022a; Sanh et al., 2022), the ']","GLM-130B's pre-training includes self-supervised blank infilling for 95% of tokens and multi-task instruction pre-training (MIP) for 5% of tokens, enhancing downstream zero-shot performance.","The main components of GLM-130B's pre-training objective include Post-LN, DeepNorm, Rotary Positional Encoding (RoPE), and GeLU activation in the FFNs. These components contribute to GLM-130B's performance by stabilizing training runs, improving training stability, and enhancing downstream performance on various natural language understanding tasks.",0.6,1.0,0.6972342729568481
How does GLM-130B address ethical concerns and biases compared to its counterparts?,"['to agree that they will not use it\nfor any deeds that may be harmful to society and human beings.\nAdditionally, from a technical perspective, we argue that we must also understand LLMs’ toxic\nand biased behaviors and ultimately eliminate them. This aligns with our commitment to “LLM\nInclusivity”, as it is necessary to include more people in the open-sourced LLM research to facilitate\nthe process. Moreover, if an LLM is shown to be good at identifying toxic and biased content,\ntechniques such as self-diagnoses (Schick et al., 2021) can help to reduce the harmful generation\nin a self-consistent post-processing procedure. Therefore, as an initial step, we evaluate GLM-\n130B over a variety of related benchmarks to shed light on the challenging topic. Despite their\nlimitations (Blodgett et al., 2021; Jacobs & Wallach, 2021) which should be addressed in future\nwork, they still serve as a good start to arouse the community’s awareness of the problem.\nA.1 B IASMEASUREMENT : CROW S-P AIRSTable 5: CrowS-Pairs (Nangia et al., 2020) Bias\nMeasurement. The lower scores the better.\nCategory GPT-3 OPT-175B GLM-130B\nGender 62.6 65.7 55.7\nReligion 73.3 68.6 73.3\nRace/Color 64.7 68.6 58.5\nSexual orientation 76.2 78.6 60.7\nAge 64.4 67.8 63.2\nNationality 61.6 62.9 64.1\nDisability 76.7 76.7 71.6\nPhysical appearance 74.6 76.2 74.6\nSocioeconomic status 73.8 76.2 70.9\nOverall 67.2 69.5 65.8CrowS-Pairs (Nangia et al., 2020), or namely\nCrowdsourced Stereotype Pairs benchmark, is\nwidely used for measuring biases for masked\nlanguage models. It collects 1508 examples with\nnine different conventional biases and adopts a\nprobing-based approach to compare the pseudo-\nlog-likelihood of a pair of stereotypical and anti-\nstereotypical sentences. Since GLM-130B is\npre-trained with autoregressive blanking infill-\ning, CrowS-Pairs evaluation is directly appli-\ncable. We compare the ', 'evaluation of GLM-130B on the SuperGLUE (Wang et al., 2019) benchmark,\nwhich consists 8 different natural language understanding challenges. Noted that these results\nare neither zero/few-shot nor fine-tuned results, because 7 out of 8 tasks’ training sets have been\nincluded in GLM-130B’s MIP training (except for ReCoRD) together with other 67 multi-task\ndatasets; however, GLM-130B is also not individually fine-tuned on any of them. Therefore, these\nresults are not for relative comparison for any other models’, but only for readers’ reference on\nGLM-130B’s absolute ability.\n44\x0cPublished as a conference paper at ICLR 2023\ncb record wsc multirc rte wic copa boolq20406080100\nGLM-130B (uni)\nGLM-130B (bi)\nFigure 17: GLM-130B (uni and bi)’s untuned results on SuperGLUE development set, using prompt-\nsource (Bach et al., 2022) prompts and task formulation. DISCLAIMER: Noted that some of the\nSuperGLUE training sets have been included in the MIP training. We report the results here\nonly for readers’ reference.\nSports LLC Coin Flip Coin Flip (OOD: 3) Reverse List Date020406080100\n54.0\n1.084.5\n47.953.1\n15.773.7\n13.495.0\n58.668.3\n27.9Standard Prompting Chain-of-Thoughts\nFigure 18: Chain-of-thought prompting can also improve GLM-130B’s performance on reasoning\ntasks compared to standard prompting.\nBoolQ CB COPA MultiRC ReCoRD RTE WiC WSC\nGLM-130B 89.69 98.21 100 89.32 92.11 94.22 76.96 88.5\nTable 21: The results of GLM-130B on the SuperGLUE dataset obtained using the P-tuning v2 (Liu\net al., 2022). We report the Accuracy metric for all datasets except for MultiRC (F1a) and ReCoRD\n(F1).\nThe results are presented in Figure 17. We ablate the unidirectional and bidirectional GLM-130B to\njustify the usefulness of GLM objective in boosting LLMs’ ability to understand. Each point in the\nfigure refers to a prompt-specific result, for which the prompt is from the promptsource (Bach et al.,\n2022) ', 'GPT-3 Davinci and\nOPT-175B’s results on CrowS-Pairs reported\nin (Zhang et al., 2022) with GLM-130B.\nOur results are presented in Table 5. GLM-130B shows fewer biases on almost all kinds of stereo-\ntypes except for religion and nationality. We speculate that it is because GLM-130B is a bilingual\npre-trained LLM that learns the semantics for certain content from both English and Chinese cor-\npora. Since CrowsS-Pairs’ stereotypes mainly draw from the US Equal Employment Opportunities\nCommission’s list2, the bias distributions in two different cultures and languages may be different\nand consequently reconcile social biases in GLM-130B on a benchmark originally designed for\nEnglish-language society. We think this is an interesting finding, as multi-lingual pre-training may\nhelp LLMs to present less harmful biases for better fairness. Finally, we also admit that GLM-\n130B may in turn presents some special Chinese biases which currently lack testing benchmarks\nand require considerable future efforts to detect and prevent.\nA.2 B IASMEASUREMENT : STEREO SET\nAnother widely used bias and stereotype evaluation benchmark is StereoSet (Nadeem et al., 2021),\nwhich is also adopted in (Lieber et al., 2021; Artetxe et al., 2021; Zhang et al., 2022). To balance\nthe evaluation between bias detecting and language modeling quality, StereoSet reports a series of\nmetrics including Language Modeling Scores (LMS), Stereotype Score (SS), and Idealized Context\nAssociation Test Score (ICAT) as an overall averaged metric. For example, given the premise “ She\n2https://www.eeoc.gov/prohibited-employment-policiespractices\n21\x0cPublished as a conference paper at ICLR 2023\nis the twin’s mother ”, StereoSet provides three candidate hypothesis: 1) “ the water is deep ”, 2)\n“she is a lazy, unkind person ”, and 3) “ she is a kind, caring woman ']","Through comprehensive ethical evaluations, GLM-130B exhibits significantly less bias and toxicity generation than similar-scale models, highlighting its consideration for ethical AI development.","GLM-130B addresses ethical concerns and biases by showing fewer biases on almost all kinds of stereotypes except for religion and nationality. The bilingual pre-training of GLM-130B allows it to learn semantics from both English and Chinese corpora, potentially reconciling social biases present in different cultures and languages. The multi-lingual pre-training may help LLMs present less harmful biases for better fairness. However, it is acknowledged that GLM-130B may introduce special Chinese biases that require further detection and prevention efforts.",1.0,1.0,0.5764378309249878
How does Megatron-LM's implementation ensure training stability for extremely large transformer models?,"['in\nour training data.\n5.3. Bi-directional Transformer Results Using BERT\nIn this section, we apply our methodology to BERT-style\ntransformer models and study the effect of model scaling\non several downstream tasks. Prior work (Lan et al., 2019)\nfound that increasing model size beyond BERT-large with\n336M parameters results in unexpected model degradation.\nTo address this degradation, the authors of that work (Lan\net al., 2019) introduced parameter sharing and showed that\nthat their models scale much better compared to the original\nBERT model.\nWe further investigated this behaviour and empirically\ndemonstrated that rearranging the order of the layer nor-\nmalization and the residual connections as shown in Figure\n7 is critical to enable the scaling of the BERT-style mod-\nels beyond BERT-Large. The architecture (b) in Figure 7\neliminates instabilities observed using the original BERT\narchitecture in (a) and also has a lower training loss. To\nthe best of our knowledge, we are the ﬁrst to report such a\nchange enables training larger BERT models.\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 5. Development set results for MNLI, QQP, SQuAD 1.1 and SQuAD 2.0 and test set results for RACE. The trained tokens represents\nconsumed tokens during model pretraining (proportional to batch size times number of iterations) normalized by consumed tokens during\nmodel pretraining for our 336M model.\nModeltrained tokens MNLI m/mm QQP SQuAD 1.1 SQuAD 2.0 RACE m/h\nratio accuracy accuracy F1 / EM F1 / EM accuracy\n(dev set) (dev set) (dev set) (dev set) (test set)\nRoBERTa (Liu et al., 2019b) 2 90.2 / 90.2 92.2 94.6 / 88.9 89.4 / 86.5 83.2 (86.5 / 81.8)\nALBERT (Lan et al., 2019) 3 90.8 92.2 94.8 / 89.3 90.2 ', 'by1√\n2Nwhere\nN is the number of transformer layers comprised of self at-\ntention and MLP blocks. For our optimizer we utilize Adam\n(Kingma & Ba, 2014) with weight decay (Loshchilov &\nHutter, 2019) λ= 0.01. Additionally, we use global gradi-\nent norm clipping of 1.0 to improve the stability of training\nlarge models. In all cases, a dropout of 0.1 is used. Lastly,\nto better manage our memory footprint we utilize activation\ncheckpointing (Chen et al., 2016) after every transformer\nlayer.\nFor GPT-2 models, all training is performed with sequences\nof 1024 subword units at a batch size of 512 for 300k itera-\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\ntions. Our learning rate of 1.5e-4 utilizes a warmup period\nof 3k iterations before following a single cycle cosine decay\nover the remaining 297k iterations. We stop the decay at a\nminimum learning rate of 1e-5.\nFor BERT models, we largely follow the training process\ndescribed in (Lan et al., 2019). We use the original BERT\ndictionary with vocab size of 30,522. In addition, we re-\nplace the next sentence prediction head with sentence order\nprediction as suggested by (Lan et al., 2019) and use whole\nword n-gram masking of (Joshi et al., 2019). For all cases,\nwe set the batch size to 1024 and use a learning rate of 1.0e-\n4 warmed up over 10,000 iterations and decayed linearly\nover 2 million iterations. Other training parameters are kept\nthe same as (Devlin et al., 2018).\n5. Experiments\nAll of our experiments use up to 32 DGX-2H servers (a total\nof 512 Tesla V100 SXM3 32GB GPUs). Our infrastruc-\nture is optimized for multi-node deep learning applications,\nwith 300 GB/sec bandwidth between GPUs inside a ', 'and conﬁgurations listed in Table 2. The 355M\nmodel is equivalent in size and conﬁguration of BERT-Large\nmodel (Devlin et al., 2018). The 2.5B model is bigger than\nthe previous largest GPT-2 model, and the 8.3B model is\nlarger than any left-to-right transformer language model\never trained, to the best of our knowledge. To train and eval-\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 2. Model conﬁgurations used for GPT-2.\nHidden Time\nParameter Layers Hidden Attn Size Total per\nCount Size Heads per GPUs Epoch\nHead (days)\n355M 24 1024 16 64 64 0.86\n2.5B 54 1920 20 96 128 2.27\n8.3B 72 3072 24 128 512 2.10\nTable 3. Zero-shot results. SOTA are from (Khandelwal et al.,\n2019) for Wikitext103 and (Radford et al., 2019) for LAMBADA.\nModel Wikitext103 LAMBADA\nPerplexity↓ Accuracy↑\n355M 19.31 45.18%\n2.5B 12.76 61.73%\n8.3B 10.81 66.51%\nPrevious SOTA 15.79 63.24%\nuate our language models we use the procedure described in\nsection 4. Table 2 also lists the time it takes to advance one\nepoch which is equivalent to 68,507 iterations. For example,\nfor the 8.3B model on 512 GPUs, each epoch takes around\ntwo days. Compared to the conﬁgurations used for our scal-\ning studies in Table 1, the 2.5B model is the same, the 8.3B\nmodel has 24 attention heads instead of 32, and the 355M is\nmuch smaller than any seen previously while still using 64\nGPUs to train, leading to the much lower time per epoch.\nFigure 6 shows validation perpelixity as a function of num-\nber of iterations. As the model size increases, the validation\nperpelixity decreases and reaches a validation perplexity of\n9.27 for the 8.3B model. We report the zero-shot evaluation\nof the trained models on the ']","Through techniques like embedding gradient shrink (EGS) and DeepNorm layer normalization, Megatron-LM stabilizes training of models with billions of parameters.","Megatron-LM's implementation ensures training stability for extremely large transformer models by utilizing techniques such as rearranging the order of layer normalization and residual connections, utilizing Adam optimizer with weight decay, global gradient norm clipping, dropout of 0.1, and activation checkpointing. Additionally, they use a warmup period for learning rate, decay linearly, and keep other training parameters consistent.",1.0,1.0,0.7286889553070068
How does PAL's performance on the GSM8K benchmark compare to other advanced models?,"['times, but halfway through also\nsay quack” ).5. Results\n5.1. Math Results\nTable 1 shows the following results: across all tasks,\nPALusing Codex sets a new few-shot state-of-the-art top-\n1 decoding across all datasets, outperforming COTCodex,\nCOTPaLM-540 B, and COTMinerva 540B which was ﬁne-tuned\non explicit mathematical content.\nInterestingly, COTalso beneﬁts from Codex over PaLM-\n540 Bin some of the datasets such as ASDIV , but performs\nworse than PaLM-540 Bin others such as SVAMP . Yet,\nusing PALfurther improves the solve rate across all datasets.\nGSM-HARD On GSM -HARD (Table 1), the accuracy of\nDIRECT drops dramatically from 19.7% to 5.0% (a relative\ndrop of 74%), the accuracy of COTdrops from 65.6% to\n20.1% (a relative drop of almost 70%), while PALremains\nstable at 61.5%, dropping by only 14.3%. The results of\nCOTonGSM-HARD did not improve even when we replaced\nits prompts with prompts that include large numbers (Ap-\npendix B). This shows how PALprovides not only better\x0cPAL: Program-aided Language Models 6\nCOLORED OBJECT PENGUINS DATE REPEAT COPY OBJECT COUNTING\nDIRECT Codex 75.7 71.1 49.9 81.3 37.6\nCOTLaMDA-137B - - 26.8 - -\nCOTPaLM-540 B - 65.1 65.3 - -\nCOTCodex 86.3 79.2 64.8 68.8 73.0\nPALCodex 95.1 93.3 76.2 90.6 96.7\nTable 2: Solve rate on three symbolic reasoning datasets and two algorithmic datasets, In all datasets, PALachieves a much\nhigher accuracy than chain-of-thought. Results with closed models LaMDA-137B and PaLM-540B are included if available\nto public (Wei et al., 2022; Suzgun et al., 2022).\nresults on the standard benchmarks, but is also much more\nrobust . In fact, since PALofﬂoads the computation to the\nPython interpreter, any complex computation can be per-\nformed accurately given the correctly generated program.\nLarge Numbers or Incorrect Reasoning? Are the ', 'program itself. While this is not guaranteed due to possible spurious\ncorrelations, we manually checked 25 programs and found all of them are correct. For the incorrect 29% of the cases, we\nrunPALagain and perform nucleus sampling (Holtzman et al., 2019) with temperature 0.7, and repeat the above process if\nany correct solution is found. Finally, the authors manually annotate the correct answer for 50remaining cases that PALwas\nnot able to solve after 100 iterations.\nH.2. GSM-HARD Analysis\nTable 11 shows thoughts generated with COTonGSM 8Kand GSM -HARD . A manual analysis reveals that a majority of the\ngenerated thoughts (16/25) were identical for GSM 8Kand GSM -HARD , indicating that larger numbers primarily diminish\nperformance due to failure of LLM to do arithmetic..\x0cPAL: Program-aided Language Models 24\nI. Generalization of PAL to Least-to-Most Prompting\nQ: Four years ago, Kody was only half as old as Mohamed. If Mohamed is currently\ntwice 30 years old, how old is Kody? ↪→\nA: To answer the question ""How old is Kody?"", we need to know: ""How old is Mohamed?"",\n""How old was Mohamed four years ago?"", ""How old was Kody four years ago?"". ↪→\n(a) Least-to-Most Math Reducing Prompt\nFour years ago, Kody was only half as old as Mohamed. If Mohamed is currently twice\n30 years old, how old is Kody? ↪→\nQ: How old was Mohamed four years ago?\nA: We were told that Mohamed is currently twice 30 years old, so he is currently 30 *\n2 = 60 years old. That means that four years ago he must have been 60 - 4 = 56\nyears old. The answer is 56.↪→\n↪→\nQ: How old is ', 'Samples on P AL 14\nE Standard Deviations Across Multiple Order of Prompts 17\nF P AL Beyond Benchmarks 17\nG Closer Look into Token-level Behaviors of Different Mechanisms 20\nH Datasets 20\nH.1 Creating GSM -HARD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\nH.2 GSM -HARD Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\nI Generalization of PAL to Least-to-Most Prompting 24\nJ Prompts 26\nJ.1 Reasoning about Colored Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\nJ.2 Penguins in a Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\nJ.3 Date Understanding . . . . . . . . . . . . . . . . . . . . . . . . . . . ']","PAL achieves state-of-the-art few-shot accuracy on the GSM8K benchmark, surpassing PaLM-540B by a significant 15% top-1 accuracy improvement, demonstrating its effectiveness in handling complex arithmetic and symbolic reasoning tasks.",None,1.0,1.0,0.14914825558662415
Can PAL's approach be generalized to models trained primarily on natural language rather than code?,"['2022) was also submitted to arXiv. Their\nmethod is conceptually similar to ours, but PoT (1) only\ndemonstrates efﬁcacy on mathematical problems, whereas\nwe demonstrate gains on symbolic and algorithmic bench-\nmarks as well, and (2) chose benchmark-speciﬁc prompt\nexamples, while we used the same prompt examples as pre-\nvious work, to disentangled the beneﬁt of our approach from\nthe beneﬁt of the choice of examples.\nSemantic parsing Our work can also be seen as a very\ngeneral form of semantic parsing, where instead of parsing\ninto strict domain-speciﬁc languages, the model generates\nfree-form Python code. Some works constrain the decoder\nusing a Context-Free Grammar (CFG) to generate a domain-\nspeciﬁc meaning representation (Shin & Van Durme, 2021)\nor a canonical utterance, which can be converted to a Lisp-\nlike meaning representation (Shin et al., 2021). In contrast,\nPALdoes not require any constraining or domain-speciﬁc\nrepresentations other than Python code. Further, LMs that\nwere pretrained on Python are abundant compared to other\ndomain-speciﬁc languages, making Python code a much\nmore preferable representation. Andor et al. (2019) generate\ntask-speciﬁc arithmetic operations for reading comprehen-\nsion tasks; Gupta et al. (2019) design neural modules such\nascount to deal with arithmetic operations. PALgener-\nalizes these works by generating general Python programs,\nwithout the need for deﬁning specialized modules. The clos-\nest work to ours technically may be Binder (Cheng et al.,\n2022), but it addressed mostly answering questions about\ntables using SQL and SQL-like Python.\x0cPAL: Program-aided Language Models 9\n8. Conclusion\nWe introduce PAL, a new method for natural language rea-\nsoning, using programs as intermediate reasoning steps.\nDifferently from existing LM-based reasoning approaches,\nthe main idea is to ofﬂoad solving and calculating to an\nexternal Python interpreter, instead of using the LLM ', 'ChatGPT tool.1In contrast to\nthe in-context-learning methods we used in the main paper, here we instruct ChatGPT to perform program-aided reasoning\nthrough one of the user utterances.\nIn Figure 13, in COT-style reasoning, while the reasoning chain is correct, the ﬁnal answer is wrong. In contrast, PAL-style\nreasoning could not only accurately extract the color of objects from the question but also produce the correct lines of code\nto branch to different situations that yield their corresponding correct answers.\nA more intriguing example is letting an LLM count the number of letters in the word “intriguing”. In Figure 14a, while the\nstep-by-step explanation appears reasonable by splitting the letters by spaces, ChatGPT does not change the answer after\nthis explicit reasoning and insists on the wrong answer. Explicitly instructing the model to perform step-by-step reasoning\nbefore answering the question still yields the wrong answer. In contrast, PAL-style reasoning only takes a few lines of code,\nand the execution does produce the correct answer, in this case. These examples indicate that PALcan beneﬁt even an\nostensibly powerful model like ChatGPT.\n1chat.openai.com\x0cPAL: Program-aided Language Models 18\n(a) In C OT style reasoning, the correct intermediate reasoning chain leads to wrong answers.\n(b) In P AL, the execution of the code will produce the correct answer.\nFigure 13: ChatGPT with P AL and C OT to answer a user-posted question\x0cPAL: Program-aided Language Models 19\n(a) Step-by-step reasoning struggle on counting the number of letters in the word “intrigu-\ning” which has ten letters.\n(b) Explicitly instructing ChatGPT to reason step-by-step before generating answer still\nleads to the wrong answer.\n(c) P AL takes a few lines of code and ', 'NLP Models\nReally Able to Solve Simple Math Word Problems? arXiv\npreprint arXiv:2103.07191 , 2021.\nPi, X., Liu, Q., Chen, B., Ziyadi, M., Lin, Z., Gao, Y ., Fu,\nQ., Lou, J.-G., and Chen, W. Reasoning like program\nexecutors. arXiv preprint arXiv:2201.11473 , 2022.\nQian, J., Wang, H., Li, Z., Li, S., and Yan, X. Limitations\nof language models in arithmetic and symbolic induction.\narXiv preprint arXiv:2208.05051 , 2022.\x0cPAL: Program-aided Language Models 11\nReif, E., Ippolito, D., Yuan, A., Coenen, A., Callison-\nBurch, C., and Wei, J. A Recipe for Arbitrary Text Style\nTransfer with Large Language Models. arXiv preprint\narXiv:2109.03910 , 2021.\nSanh, V ., Webson, A., Raffel, C., Bach, S. H., Sutawika, L.,\nAlyafeai, Z., Chafﬁn, A., Stiegler, A., Scao, T. L., Raja,\nA., Dey, M., Bari, M. S., Xu, C., Thakker, U., Sharma,\nS. S., Szczechla, E., Kim, T., Chhablani, G., Nayak, N.,\nDatta, D., Chang, J., Jiang, M. T.-J., Wang, H., Manica,\nM., Shen, S., Yong, Z. X., Pandey, H., Bawden, R., Wang,\nT., Neeraj, T., Rozen, J., Sharma, A., Santilli, A., Fevry,\nT., Fries, J. A., Teehan, R., Biderman, S., Gao, L., Bers, T.,\nWolf, T., and Rush, A. M. Multitask Prompted Training\nEnables Zero-Shot Task Generalization, 2021.\nShin, R. and Van Durme, B. Few-shot semantic parsing\nwith language models trained on code. arXiv preprint\narXiv:2112.08696 , 2021.\nShin, R., Lin, C. H., Thomson, S., Chen, C., Roy, S., Platan-\nios, E. A., Pauls, A., Klein, D., Eisner, J., and Van Durme,\nB. Constrained language models yield few-shot semantic\nparsers. arXiv preprint arXiv:2104.08768 , 2021.\nSuzgun, M., Scales, N., Scharli, N., Gehrmann, S., Tay, Y .,\nChung, H. W., Chowdhery, A., Le, Q. V ., Chi, E., Zhou,\nD., and Wei, J. Challenging ']","PAL is effective with models trained on code, but experiments indicate it can also enhance models primarily trained on natural language, provided they possess sufficient coding ability, demonstrating PAL's versatility.",None,0.8333333333333334,0.0,0.0657445639371872
What contributions does CodeNet make towards the creation of AI models capable of understanding and generating code?,"['be readily used as inputs into machine learning models. Results of code classi-\nﬁcation and code similarity experiments using the CodeNet dataset are provided as\na reference. We hope that the scale, diversity and rich, high-quality annotations of\nCodeNet will offer unprecedented research opportunities at the intersection of AI\nand Software Engineering.\n1 Introduction\nThere is a growing trend towards leveraging AI for building tools that support software engineering\nand development [ 1,2]. AI can manipulate and generate computer code, but can it do so with\nhigh quality? Many researchers are fascinated by this possibility, encouraged by AI successes in\nother domains and tantalized by the vision of computers programming computers. Some recent\ndeep-learning models [ 3,4] for code have received a lot of publicity: trained on vast amounts of\ndata and using novel architectures with billions of parameters, they sometimes generate surprisingly\nplausible code.\nPreprint. Under review.arXiv:2105.12655v2 [cs.SE] 29 Aug 2021\x0cGiven the success of non-AI tools for code, why should we consider AI to augment or possibly\nreplace them? Firstly, AI can help reﬁne and re-tune the heuristics used by traditional coding tools.\nSecondly, based on the training data from past experience, AI can help prioritize when there is more\nthan one sound answer [ 5]. Thirdly, an AI-based tool may handle incomplete or invalid code more\nrobustly, thus expanding its scope. Finally, AI can incorporate signals usually ignored by traditional\ntools for code, such as the natural language in identiﬁers or comments.\nIn the enterprise environment, developers often face code written by large teams over many years\nand geographies. Developers must manipulate such code to modernize it, ﬁx bugs, improve its\nperformance, evolve it when ', 'CodeNet: A Large-Scale AI for Code Dataset for\nLearning a Diversity of Coding Tasks\nRuchir Puri1, David S. Kung1, Geert Janssen1, Wei Zhang1,\nGiacomo Domeniconi1,Vladimir Zolotov1,Julian Dolby1,Jie Chen2,1,\nMihir Choudhury1,Lindsey Decker1,Veronika Thost2,1,Luca Buratti1,\nSaurabh Pujar1,Shyam Ramji1,Ulrich Finkler1,Susan Malaika3,Frederick Reiss1\n1IBM Research\n2MIT-IBM Watson AI Lab\n3IBM Worldwide Ecosystems\nAbstract\nOver the last several decades, software has been woven into the fabric of every\naspect of our society. As software development surges and code infrastructure of\nenterprise applications ages, it is now more critical than ever to increase software\ndevelopment productivity and modernize legacy applications. Advances in deep\nlearning and machine learning algorithms have enabled breakthroughs in computer\nvision, speech recognition, natural language processing and beyond, motivating\nresearchers to leverage AI techniques to improve software development efﬁciency.\nThus, the fast-emerging research area of “AI for Code” has garnered new interest\nand gathered momentum. In this paper, we present a large-scale dataset CodeNet ,\nconsisting of over 14 million code samples and about 500 million lines of code\nin 55 different programming languages, which is aimed at teaching AI to code.\nIn addition to its large scale, CodeNet has a rich set of high-quality annotations\nto benchmark and help accelerate research in AI techniques for a variety of crit-\nical coding tasks, including code similarity and classiﬁcation, code translation\nbetween a large variety of programming languages, and code performance (runtime\nand memory) improvement techniques. Additionally, CodeNet provides sample\ninput and output test sets for 98.5% of the code samples, which can be used as\nan oracle for determining code correctness and potentially guide reinforcement\nlearning for code quality improvements. As a usability feature, we provide several\npre-processing tools in CodeNet to transform source code into representations that\ncan ', 'in code recommendation algorithms, and code translation\nbetween a large variety of programming languages, to advances in code performance improvement\ntechniques. We hope that the scale, diversity and rich, high-quality annotations of CodeNet will offer\nunprecedented research opportunities at the intersection of AI and Software Engineering.\n11 Acknowledgements\nWe would like to acknowledge AIZU and AtCoder for making the code submissions publicly available.\nWe would like to thank the IBM Data Asset eXchange team for providing a platform to host the\nCodeNet dataset. We would like to thank the Women in Data Science team at Stanford University\nand the IBM Call for Code team for their collaboration in launching the CodeNet challenge.\n12 Bibliography\n[1]Miltiadis Allamanis, Earl T Barr, Premkumar Devanbu, and Charles Sutton. A survey of\nmachine learning for big code and naturalness. ACM Computing Surveys (CSUR) , 51(4):1–37,\n2018.\n[2]Yanming Yang, Xin Xia, David Lo, and John Grundy. A survey on deep learning for software\nengineering. arXiv preprint arXiv:2011.14597 , 2020.\n[3]Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira Pinto,\nJared Kaplan, Harri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, Alex Ray, Raul\nPuri, Gretchen Krueger, Michael Petrov, Heidy Khlaaf, Girish Sastry, Pamela Mishkin, Brooke\nChan, Scott Gray, Nick Ryder, Mikhail Pavlov, Alethea Power, Lukasz Kaiser, Mohammad\nBavarian, Clemens Winter, Philippe Tillet, Felipe Petroski Such, Dave Cummings, Matthias\nPlappert, Fotios Chantzis, Elizabeth Barnes, Ariel Herbert-V oss, William Hebgen Guss, Alex\nNichol, Alex Paino, Nikolas Tezak, Jie Tang, Igor Babuschkin, Suchir Balaji, Shantanu Jain,\nWilliam Saunders, Christopher Hesse, Andrew N. Carr, Jan Leike, Josh Achiam, Vedant Misra,\nEvan Morikawa, Alec Radford, Matthew Knight, Miles Brundage, Mira Murati, Katie Mayer,\nPeter Welinder, Bob McGrew, Dario Amodei, ']"," By providing a comprehensive dataset with diverse programming tasks and solutions, CodeNet accelerates the development of AI models for code generation and understanding.","CodeNet makes contributions towards the creation of AI models capable of understanding and generating code by providing a large-scale dataset consisting of over 14 million code samples and about 500 million lines of code in 55 different programming languages. It also includes high-quality annotations to benchmark and accelerate research in AI techniques for critical coding tasks such as code similarity and classification, code translation between different programming languages, and code performance improvement techniques. Additionally, CodeNet provides sample input and output test sets for the majority of the code samples, which can be used to determine code correctness and guide reinforcement learning for code quality improvements. Overall, CodeNet offers unprecedented research opportunities at the intersection of AI and Software Engineering.",1.0,1.0,0.8313649892807007
How does SuperGLUE facilitate the development and evaluation of models across its diverse set of tasks?,"['limitations, we believe that\nWinogender’s inclusion is worthwhile in providing a coarse sense of how social biases evolve with\nmodel performance and for keeping attention on the social ramiﬁcations of NLP models.\n4 Using SuperGLUE\nSoftware Tools To facilitate using SuperGLUE, we release jiant (Wang et al., 2019b),4a modular\nsoftware toolkit, built with PyTorch (Paszke et al., 2017), components from AllenNLP (Gardner\net al., 2017), and the transformers package.5jiant implements our baselines and supports the\nevaluation of custom models and training methods on the benchmark tasks. The toolkit includes\nsupport for existing popular pretrained models such as OpenAI GPT and BERT, as well as support\nfor multistage and multitask learning of the kind seen in the strongest models on GLUE.\nEligibility Any system or method that can produce predictions for the SuperGLUE tasks is eligible\nfor submission to the leaderboard, subject to the data-use and submission frequency policies stated\nimmediately below. There are no restrictions on the type of methods that may be used, and there is\nno requirement that any form of parameter sharing or shared initialization be used across the tasks in\nthe benchmark. To limit overﬁtting to the private test data, users are limited to a maximum of two\nsubmissions per day and six submissions per month.\nData Data for the tasks are available for download through the SuperGLUE site and through a\ndownload script included with the software toolkit. Each task comes with a standardized training set,\ndevelopment set, and unlabeled test set. Submitted systems may use any public or private data when\ndeveloping their systems, with a few exceptions: Systems may only use the SuperGLUE-distributed\nversions of the task datasets, as ', 'high-level goals, the original version of\nthe benchmark is no longer a suitable metric for quantifying such progress.\nIn response, we introduce SuperGLUE, a new benchmark designed to pose a more rigorous test of\nlanguage understanding. SuperGLUE has the same high-level motivation as GLUE: to provide a\nsimple, hard-to-game measure of progress toward general-purpose language understanding technolo-\ngies for English. We anticipate that signiﬁcant progress on SuperGLUE should require substantive\ninnovations in a number of core areas of machine learning, including sample-efﬁcient, transfer,\nmultitask, and unsupervised or self-supervised learning.\nSuperGLUE follows the basic design of GLUE: It consists of a public leaderboard built around\neight language understanding tasks, drawing on existing data, accompanied by a single-number\nperformance metric, and an analysis toolkit. However, it improves upon GLUE in several ways:\nMore challenging tasks: SuperGLUE retains the two hardest tasks in GLUE. The remaining tasks\nwere identiﬁed from those submitted to an open call for task proposals and were selected based on\ndifﬁculty for current NLP approaches.\nMore diverse task formats: The task formats in GLUE are limited to sentence- and sentence-pair\nclassiﬁcation. We expand the set of task formats in SuperGLUE to include coreference resolution\nand question answering (QA).\nComprehensive human baselines: We include human performance estimates for all benchmark\ntasks, which verify that substantial headroom exists between a strong BERT-based baseline and\nhuman performance.\nImproved code support: SuperGLUE is distributed with a new, modular toolkit for work on\npretraining, multi-task learning, and transfer learning in NLP, built around standard tools including\nPyTorch (Paszke et al., 2017) and AllenNLP (Gardner et al., 2017).\nReﬁned usage rules: The conditions for inclusion on the SuperGLUE leaderboard have been\nrevamped to ensure fair ', 'evaluation of GLM-130B on the SuperGLUE (Wang et al., 2019) benchmark,\nwhich consists 8 different natural language understanding challenges. Noted that these results\nare neither zero/few-shot nor fine-tuned results, because 7 out of 8 tasks’ training sets have been\nincluded in GLM-130B’s MIP training (except for ReCoRD) together with other 67 multi-task\ndatasets; however, GLM-130B is also not individually fine-tuned on any of them. Therefore, these\nresults are not for relative comparison for any other models’, but only for readers’ reference on\nGLM-130B’s absolute ability.\n44\x0cPublished as a conference paper at ICLR 2023\ncb record wsc multirc rte wic copa boolq20406080100\nGLM-130B (uni)\nGLM-130B (bi)\nFigure 17: GLM-130B (uni and bi)’s untuned results on SuperGLUE development set, using prompt-\nsource (Bach et al., 2022) prompts and task formulation. DISCLAIMER: Noted that some of the\nSuperGLUE training sets have been included in the MIP training. We report the results here\nonly for readers’ reference.\nSports LLC Coin Flip Coin Flip (OOD: 3) Reverse List Date020406080100\n54.0\n1.084.5\n47.953.1\n15.773.7\n13.495.0\n58.668.3\n27.9Standard Prompting Chain-of-Thoughts\nFigure 18: Chain-of-thought prompting can also improve GLM-130B’s performance on reasoning\ntasks compared to standard prompting.\nBoolQ CB COPA MultiRC ReCoRD RTE WiC WSC\nGLM-130B 89.69 98.21 100 89.32 92.11 94.22 76.96 88.5\nTable 21: The results of GLM-130B on the SuperGLUE dataset obtained using the P-tuning v2 (Liu\net al., 2022). We report the Accuracy metric for all datasets except for MultiRC (F1a) and ReCoRD\n(F1).\nThe results are presented in Figure 17. We ablate the unidirectional and bidirectional GLM-130B to\njustify the usefulness of GLM objective in boosting LLMs’ ability to understand. Each point in the\nfigure refers to a prompt-specific result, for which the prompt is from the promptsource (Bach et al.,\n2022) ']","SuperGLUE provides a public leaderboard, a single-number performance metric for easy comparison, a software toolkit for model analysis, and detailed task instructions, supporting the development, evaluation, and comparison of models on its comprehensive suite of tasks.","SuperGLUE facilitates the development and evaluation of models across its diverse set of tasks by providing a public leaderboard with eight language understanding tasks, including challenging tasks selected based on difficulty for current NLP approaches, diverse task formats such as coreference resolution and question answering, human performance estimates for benchmark tasks, a new modular toolkit for pretraining, multi-task learning, and transfer learning in NLP, and refined usage rules to ensure fair evaluation of models.",1.0,1.0,0.6456328630447388
 What tools and support does SuperGLUE offer to researchers working on language understanding models?,"['high-level goals, the original version of\nthe benchmark is no longer a suitable metric for quantifying such progress.\nIn response, we introduce SuperGLUE, a new benchmark designed to pose a more rigorous test of\nlanguage understanding. SuperGLUE has the same high-level motivation as GLUE: to provide a\nsimple, hard-to-game measure of progress toward general-purpose language understanding technolo-\ngies for English. We anticipate that signiﬁcant progress on SuperGLUE should require substantive\ninnovations in a number of core areas of machine learning, including sample-efﬁcient, transfer,\nmultitask, and unsupervised or self-supervised learning.\nSuperGLUE follows the basic design of GLUE: It consists of a public leaderboard built around\neight language understanding tasks, drawing on existing data, accompanied by a single-number\nperformance metric, and an analysis toolkit. However, it improves upon GLUE in several ways:\nMore challenging tasks: SuperGLUE retains the two hardest tasks in GLUE. The remaining tasks\nwere identiﬁed from those submitted to an open call for task proposals and were selected based on\ndifﬁculty for current NLP approaches.\nMore diverse task formats: The task formats in GLUE are limited to sentence- and sentence-pair\nclassiﬁcation. We expand the set of task formats in SuperGLUE to include coreference resolution\nand question answering (QA).\nComprehensive human baselines: We include human performance estimates for all benchmark\ntasks, which verify that substantial headroom exists between a strong BERT-based baseline and\nhuman performance.\nImproved code support: SuperGLUE is distributed with a new, modular toolkit for work on\npretraining, multi-task learning, and transfer learning in NLP, built around standard tools including\nPyTorch (Paszke et al., 2017) and AllenNLP (Gardner et al., 2017).\nReﬁned usage rules: The conditions for inclusion on the SuperGLUE leaderboard have been\nrevamped to ensure fair ', 'SuperGLUE: A Stickier Benchmark for\nGeneral-Purpose Language Understanding Systems\nAlex Wang∗\nNew York UniversityYada Pruksachatkun∗\nNew York UniversityNikita Nangia∗\nNew York University\nAmanpreet Singh∗\nFacebook AI ResearchJulian Michael\nUniversity of WashingtonFelix Hill\nDeepMindOmer Levy\nFacebook AI Research\nSamuel R. Bowman\nNew York University\nAbstract\nIn the last year, new models and methods for pretraining and transfer learning have\ndriven striking performance improvements across a range of language understand-\ning tasks. The GLUE benchmark, introduced a little over one year ago, offers\na single-number metric that summarizes progress on a diverse set of such tasks,\nbut performance on the benchmark has recently surpassed the level of non-expert\nhumans, suggesting limited headroom for further research. In this paper we present\nSuperGLUE, a new benchmark styled after GLUE with a new set of more difﬁ-\ncult language understanding tasks, a software toolkit, and a public leaderboard.\nSuperGLUE is available at super.gluebenchmark.com .\n1 Introduction\nRecently there has been notable progress across many natural language processing (NLP) tasks, led\nby methods such as ELMo (Peters et al., 2018), OpenAI GPT (Radford et al., 2018), and BERT\n(Devlin et al., 2019). The unifying theme of these methods is that they couple self-supervised learning\nfrom massive unlabelled text corpora with effective adapting of the resulting model to target tasks.\nThe tasks that have proven amenable to this general approach include question answering, textual\nentailment, and parsing, among many others (Devlin et al., 2019; Kitaev et al., 2019, i.a.).\nIn this context, the GLUE benchmark (Wang et al., 2019a) has become a prominent evaluation\nframework for research towards general-purpose language understanding technologies. GLUE is\na collection of nine language understanding tasks built on existing public datasets, together with\nprivate test data, an evaluation server, a single-number ', 'a year since the release of SuperGLUE, performance is again essentially human-level\n(Raffel et al., 2019). While these benchmarks evaluate linguistic skills more than overall language\nunderstanding, an array of commonsense benchmarks have been proposed to measure basic reasoning\nand everyday knowledge (Zellers et al., 2019; Huang et al., 2019; Bisk et al., 2019). However, these\nrecent benchmarks have similarly seen rapid progress (Khashabi et al., 2020). Overall, the near\nhuman-level performance on these benchmarks suggests that they are not capturing important facets\nof language understanding.\nTransformer models have driven this recent progress by pretraining on massive text corpora, including\nall of Wikipedia, thousands of books, and numerous websites. These models consequently see\nextensive information about specialized topics, most of which is not assessed by existing NLP\nbenchmarks. It consequently remains an open question just how capable current language models are\nat learning and applying knowledge from many domains.\nTo bridge the gap between the wide-ranging knowledge that models see during pretraining and the\nexisting measures of success, we introduce a new benchmark for assessing models across a diverse\nset of subjects that humans learn. We design the benchmark to measure knowledge acquired during\npretraining by evaluating models exclusively in zero-shot and few-shot settings. This makes the\nbenchmark more challenging and more similar to how we evaluate humans. The benchmark covers\n57subjects across STEM, the humanities, the social sciences, and more. It ranges in difﬁculty from\nan elementary level to an advanced professional level, and it tests both world knowledge and problem\nsolving ability. Subjects range from traditional areas, such as mathematics and history, to more\n1arXiv:2009.03300v3 [cs.CY] 12 Jan 2021\x0cPublished as a conference paper at ']","SuperGLUE offers jiant, a software toolkit for pretraining, multi-task learning, and transfer learning in NLP, built around standard tools and supporting popular pretrained models, facilitating research and experimentation on the benchmark's tasks.","SuperGLUE is distributed with a new, modular toolkit for work on pretraining, multi-task learning, and transfer learning in NLP, built around standard tools including PyTorch and AllenNLP.",1.0,1.0,0.8499625325202942
In what ways does GLM-130B's bilingual capability extend its application compared to monolingual models?,"['Jie\nTang\n•Project Leader: Jie Tang\nE.5 C OMPUTATION SPONSOR\n•GPU Sponsor: Zhipu.AI\n52\x0cPublished as a conference paper at ICLR 2023\nF A B RIEF HISTORY OF GLM-130B\nThe GLM-130B project16was conceived in Dec. 2021 in a brainstorming meeting at Tsinghua KEG.\nWe firmly believe that it is of value to pre-train a highly accurate language model, in particular for\nboth Chinese and English. Though GPT-3 (Brown et al., 2020) is the pioneer for this effort, it is not\navailable to most people in the world. In addition, it supports English only. We therefore decide to\ninitialize the project GLM-130B. Please note that the WuDao 1.75T model we built last year is a\nsparse model with 480 mixture-of-experts (MoE), rather than a dense one as GPT-3. Our goal then\nis to train a bilingual pre-trained dense model with high accuracy on downstream tasks, and to make\nit open to everyone in the world-anyone, anywhere can download it and use it on a single server with\nappropriate GPUs.\nThe ambitious project soon faced several important challenges:\n•Lack of computational resources : No organization is willing to sponsor such a big project and\nfreely make it public.\n•Lack of a robust pre-training algorithm : Despite GPT-3’s success on English corpus, it is\nunclear how to train a high-accurate bilingual model for both English and Chinese.\n•Lack of fast inference solutions : Since the goal is to have the model public to everyone, we need\nto design fast inference solutions with low resource requirements to run the model.\nFor the pre-training algorithm, we finally chose GLM (Du et al., 2022) due to its high performance\nin practice. We eventually decided to train a ', 'Published as a conference paper at ICLR 2023\nGLM-130B: A NOPEN BILINGUAL PRE-TRAINED\nMODEL\nAohan Zeng⋄†∗, Xiao Liu⋄†∗, Zhengxiao Du⋄†, Zihan Wang⋄, Hanyu Lai⋄, Ming Ding⋄,\nZhuoyi Yang⋄, Yifan Xu⋄, Wendi Zheng⋄, Xiao Xia⋄, Weng Lam Tam⋄§, Zixuan Ma⋄,\nYufei Xue§, Jidong Zhai⋄, Wenguang Chen⋄, Peng Zhang§, Yuxiao Dong⋄‡, Jie Tang⋄‡\nTsinghua University⋄Zhipu.AI§\nABSTRACT\nWe introduce GLM-130B, a bilingual (English and Chinese) pre-trained language\nmodel with 130 billion parameters. It is an attempt to open-source a 100B-scale\nmodel at least as good as GPT-3 (davinci) and unveil how models of such a scale\ncan be successfully pre-trained. Over the course of this effort, we face numer-\nous unexpected technical and engineering challenges, particularly on loss spikes\nand divergence. In this paper, we introduce the training process of GLM-130B\nincluding its design choices, training strategies for both efficiency and stabil-\nity, and engineering efforts. The resultant GLM-130B model offers significant\noutperformance over GPT-3 175B (davinci) on a wide range of popular English\nbenchmarks while the performance advantage is not observed in OPT-175B and\nBLOOM-176B. It also consistently and significantly outperforms ERNIE TITAN\n3.0 260B—the largest Chinese language model—across related benchmarks. Fi-\nnally, we leverage a unique scaling property of GLM-130B to reach INT4 quanti-\nzation without post training, with almost no performance loss, making it the first\namong 100B-scale models and more importantly, allowing its effective inference\non 4×RTX 3090 (24G) or 8 ×RTX 2080 Ti (11G) GPUs, the most affordable\nGPUs required for using 100B-scale models. The GLM-130B model weights are\npublicly accessible and its code, training logs, related toolkit, and lessons learned\nare open-sourced at https://github.com/THUDM/GLM-130B/ .\n1 I NTRODUCTION\nLarge language models (LLMs), particularly those with over 100 billion (100B) parameters (Brown\net ', 'GPT-3 Davinci and\nOPT-175B’s results on CrowS-Pairs reported\nin (Zhang et al., 2022) with GLM-130B.\nOur results are presented in Table 5. GLM-130B shows fewer biases on almost all kinds of stereo-\ntypes except for religion and nationality. We speculate that it is because GLM-130B is a bilingual\npre-trained LLM that learns the semantics for certain content from both English and Chinese cor-\npora. Since CrowsS-Pairs’ stereotypes mainly draw from the US Equal Employment Opportunities\nCommission’s list2, the bias distributions in two different cultures and languages may be different\nand consequently reconcile social biases in GLM-130B on a benchmark originally designed for\nEnglish-language society. We think this is an interesting finding, as multi-lingual pre-training may\nhelp LLMs to present less harmful biases for better fairness. Finally, we also admit that GLM-\n130B may in turn presents some special Chinese biases which currently lack testing benchmarks\nand require considerable future efforts to detect and prevent.\nA.2 B IASMEASUREMENT : STEREO SET\nAnother widely used bias and stereotype evaluation benchmark is StereoSet (Nadeem et al., 2021),\nwhich is also adopted in (Lieber et al., 2021; Artetxe et al., 2021; Zhang et al., 2022). To balance\nthe evaluation between bias detecting and language modeling quality, StereoSet reports a series of\nmetrics including Language Modeling Scores (LMS), Stereotype Score (SS), and Idealized Context\nAssociation Test Score (ICAT) as an overall averaged metric. For example, given the premise “ She\n2https://www.eeoc.gov/prohibited-employment-policiespractices\n21\x0cPublished as a conference paper at ICLR 2023\nis the twin’s mother ”, StereoSet provides three candidate hypothesis: 1) “ the water is deep ”, 2)\n“she is a lazy, unkind person ”, and 3) “ she is a kind, caring woman ']","As a bilingual model in English and Chinese, GLM-130B significantly outperforms monolingual models in related benchmarks, showcasing its superior performance in cross-lingual understanding and applications.","GLM-130B's bilingual capability extends its application by allowing it to learn semantics from both English and Chinese corpora, which may result in presenting fewer biases on stereotypes from different cultures and languages. Additionally, being bilingual enables GLM-130B to potentially reconcile social biases in benchmark tests designed for English-language society, ultimately contributing to better fairness in language models.",1.0,1.0,0.8220937252044678
What intrinsic model characteristic allows Megatron-LM to achieve efficient training with multi-billion parameter transformer models?,"['in\nour training data.\n5.3. Bi-directional Transformer Results Using BERT\nIn this section, we apply our methodology to BERT-style\ntransformer models and study the effect of model scaling\non several downstream tasks. Prior work (Lan et al., 2019)\nfound that increasing model size beyond BERT-large with\n336M parameters results in unexpected model degradation.\nTo address this degradation, the authors of that work (Lan\net al., 2019) introduced parameter sharing and showed that\nthat their models scale much better compared to the original\nBERT model.\nWe further investigated this behaviour and empirically\ndemonstrated that rearranging the order of the layer nor-\nmalization and the residual connections as shown in Figure\n7 is critical to enable the scaling of the BERT-style mod-\nels beyond BERT-Large. The architecture (b) in Figure 7\neliminates instabilities observed using the original BERT\narchitecture in (a) and also has a lower training loss. To\nthe best of our knowledge, we are the ﬁrst to report such a\nchange enables training larger BERT models.\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 5. Development set results for MNLI, QQP, SQuAD 1.1 and SQuAD 2.0 and test set results for RACE. The trained tokens represents\nconsumed tokens during model pretraining (proportional to batch size times number of iterations) normalized by consumed tokens during\nmodel pretraining for our 336M model.\nModeltrained tokens MNLI m/mm QQP SQuAD 1.1 SQuAD 2.0 RACE m/h\nratio accuracy accuracy F1 / EM F1 / EM accuracy\n(dev set) (dev set) (dev set) (dev set) (test set)\nRoBERTa (Liu et al., 2019b) 2 90.2 / 90.2 92.2 94.6 / 88.9 89.4 / 86.5 83.2 (86.5 / 81.8)\nALBERT (Lan et al., 2019) 3 90.8 92.2 94.8 / 89.3 90.2 ', 'and conﬁgurations listed in Table 2. The 355M\nmodel is equivalent in size and conﬁguration of BERT-Large\nmodel (Devlin et al., 2018). The 2.5B model is bigger than\nthe previous largest GPT-2 model, and the 8.3B model is\nlarger than any left-to-right transformer language model\never trained, to the best of our knowledge. To train and eval-\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 2. Model conﬁgurations used for GPT-2.\nHidden Time\nParameter Layers Hidden Attn Size Total per\nCount Size Heads per GPUs Epoch\nHead (days)\n355M 24 1024 16 64 64 0.86\n2.5B 54 1920 20 96 128 2.27\n8.3B 72 3072 24 128 512 2.10\nTable 3. Zero-shot results. SOTA are from (Khandelwal et al.,\n2019) for Wikitext103 and (Radford et al., 2019) for LAMBADA.\nModel Wikitext103 LAMBADA\nPerplexity↓ Accuracy↑\n355M 19.31 45.18%\n2.5B 12.76 61.73%\n8.3B 10.81 66.51%\nPrevious SOTA 15.79 63.24%\nuate our language models we use the procedure described in\nsection 4. Table 2 also lists the time it takes to advance one\nepoch which is equivalent to 68,507 iterations. For example,\nfor the 8.3B model on 512 GPUs, each epoch takes around\ntwo days. Compared to the conﬁgurations used for our scal-\ning studies in Table 1, the 2.5B model is the same, the 8.3B\nmodel has 24 attention heads instead of 32, and the 355M is\nmuch smaller than any seen previously while still using 64\nGPUs to train, leading to the much lower time per epoch.\nFigure 6 shows validation perpelixity as a function of num-\nber of iterations. As the model size increases, the validation\nperpelixity decreases and reaches a validation perplexity of\n9.27 for the 8.3B model. We report the zero-shot evaluation\nof the trained models on the ', 'seas. Investigators have launched a\ncriminal probe into the crash, which ofﬁcials said was likely\ncaused by a technical fault.\nRussian President Vladimir Putin declared Wednesday a\nday of mourning for the victims.\nD. Further Scaling Analysis\nIn this section we study the effect of number of attention\nheads on the scaling results. We also present strong scaling\nresults for our 1.2 billion parameter model.\nD.1. Attention Heads and Scaling\nThis section studies the effect of attention heads on model\nparallel scaling. To this end, we consider the 8.3 billion\nparameter conﬁguration with 8-way model parallelism and\nvary the number of heads from 16 to 32. The results are\npresented in Table 7. As the number of attention heads\nincreases, some of the GEMMS inside the self-attention\nlayer become smaller and also the number of elements in\nthe self attention softmax increases. This results in a slight\ndecrease in scaling efﬁciency. Future research should be\nwary of this hyperparameter to design large transformer\nmodels that balance model speed and model accuracy.\nD.2. Strong Scaling\nOur model parallelism is primarily designed to enable train-\ning models larger than what can ﬁt in the memory of a\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 7. Effect of number of attention heads on scaling on 8.3\nbillion of parameters with 8-way model parallelism.\nAttention heads Hidden size per head Scaling Efﬁciency\n16 192 82%\n24 128 80%\n32 96 77%\nTable 8. Speedup obtained for the 1.2 billion parameters model\nusing model parallelism while keeping the batch size constant.\n# of GPUs 1 2 4 8\nSpeedup 1.0 1.64 2.34 2.98\nsingle GPU, but it can also accelerate the training of smaller\nmodels without increasing the batch size. To measure this\nacceleration we ']","Megatron-LM utilizes intra-layer model parallelism exploiting the inherent structure of transformer-based language models, enabling efficient training without custom C++ or compiler requirements.","It is primarily due to their model parallelism design, which enables training models larger than what can fit in the memory of a single GPU and accelerates the training of smaller models without increasing the batch size.",1.0,1.0,0.36763906478881836
Describe Megatron-LM's approach to handling the output embedding weight matrix for model parallelism.,"['Megatron-LM: Training Multi-Billion Parameter Language Models Using\nModel Parallelism\nMohammad Shoeybi1 2Mostofa Patwary1 2Raul Puri1 2Patrick LeGresley2Jared Casper2\nBryan Catanzaro2\nAbstract\nRecent work in language modeling demonstrates\nthat training large transformer models advances\nthe state of the art in Natural Language Processing\napplications. However, very large models can be\nquite difﬁcult to train due to memory constraints.\nIn this work, we present our techniques for train-\ning very large transformer models and implement\na simple, efﬁcient intra-layer model parallel ap-\nproach that enables training transformer models\nwith billions of parameters. Our approach does\nnot require a new compiler or library changes, is\northogonal and complimentary to pipeline model\nparallelism, and can be fully implemented with\nthe insertion of a few communication operations\nin native PyTorch. We illustrate this approach\nby converging transformer based models up to\n8.3 billion parameters using 512 GPUs. We sus-\ntain 15.1 PetaFLOPs across the entire applica-\ntion with 76% scaling efﬁciency when compared\nto a strong single GPU baseline that sustains 39\nTeraFLOPs, which is 30% of peak FLOPs. To\ndemonstrate that large language models can fur-\nther advance the state of the art (SOTA), we train\nan 8.3 billion parameter transformer language\nmodel similar to GPT-2 and a 3.9 billion parame-\nter model similar to BERT. We show that careful\nattention to the placement of layer normalization\nin BERT-like models is critical to achieving in-\ncreased performance as the model size grows. Us-\ning the GPT-2 model we achieve SOTA results\non the WikiText103 (10.8 compared to SOTA per-\nplexity of 15.8) and LAMBADA (66.5% com-\npared to SOTA accuracy of 63.2%) datasets. Our\nBERT model achieves SOTA results on the RACE\ndataset (90.9% compared to SOTA accuracy of\n89.4%).\n1Equal contribution2NVIDIA. Correspondence to: Mohammad\nShoeybi <mshoeybi@nvidia.com >.1. Introduction\nNatural Language Processing (NLP) ', 'problem size they can tackle: the model must ﬁt\nentirely on one worker. With language models of increasing\nsize and complexity like BERT and GPT-2, neural networks\nhave approached the memory capacity of modern hardware\naccelerators. One solution to this problem is to employ\nparameter sharing to reduce the memory footprint of the\nmodel (Lan et al., 2019), but this limits the overall capacity\nof the model. Our approach is to utilize model parallelism\nto split the model across multiple accelerators. This not\nonly alleviates the memory pressure, but also increases the\namount of parallelism independently of the microbatch size.\nWithin model parallelism, there are two further paradigms:\nlayer-wise pipeline parallelism, and more general distributed\ntensor computation. In pipeline model parallelism, groups\nof operations are performed on one device before the outputs\nare passed to the next device in the pipeline where a differ-\nent group of operations are performed. Some approaches\n(Harlap et al., 2018; Chen et al., 2018) use a parameter\nserver (Li et al., 2014) in conjunction with pipeline par-\nallelism. However these suffer from inconsistency issues.\nThe GPipe framework for TensorFlow (Huang et al., 2018)\novercomes this inconsistency issue by using synchronous\ngradient decent. This approach requires additional logic to\nhandle the efﬁcient pipelining of these communication and\ncomputation operations, and suffers from pipeline bubbles\nthat reduce efﬁciency, or changes to the optimizer itself\nwhich impact accuracy.\nDistributed tensor computation is an orthogonal and more\ngeneral approach that partitions a tensor operation across\nmultiple devices to accelerate computation or increase\nmodel size. FlexFlow (Jia et al., 2018), a deep learning\nframework orchestrating such parallel computation, pro-\nvides a method to pick the best parallelization strategy. Re-\ncently, Mesh-TensorFlow (Shazeer et al., 2018) introduced\na language for ', 'specifying a general class of distributed ten-\nsor computations in TensorFlow (Abadi et al., 2015). The\nparallel dimensions are speciﬁed in the language by the\nend user and the resulting graph is compiled with proper\ncollective primitives. We utilize similar insights to those\nleveraged in Mesh-TensorFlow and exploit parallelism in\ncomputing the transformer’s attention heads to parallelize\nour transformer model. However, rather than implementing\na framework and compiler for model parallelism, we make\nonly a few targeted modiﬁcations to existing PyTorch trans-\nformer implementations. Our approach is simple, does not\x0cMegatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nrequire any new compiler or code re-writing, and can be\nfully implemented by inserting a few simple primitives, as\ndescribed in the next section.\n3. Model Parallel Transformers\nWe take advantage of the structure of transformer networks\nto create a simple model parallel implementation by adding a\nfew synchronization primitives. A transformer layer consists\nof a self attention block followed by a two-layer, multi-layer\nperceptron (MLP) as shown in Figure 2. We introduce\nmodel parallelism in both of these blocks separately.\nWe start by detailing the MLP block. The ﬁrst part of the\nblock is a GEMM followed by a GeLU nonlinearity:\nY=GeLU (XA) (1)\nOne option to parallelize the GEMM is to split the weight\nmatrixAalong its rows and input Xalong its columns as:\nX= [X1,X2], A=[A1\nA2]\n. (2)\nThis partitioning will result in Y=GeLU (X1A1+\nX2A2). Since GeLU is a nonlinear function, GeLU (X1A1+\nX2A2)̸=GeLU (X1A1)+GeLU (X2A2)and this approach\nwill require a synchronization point before the GeLU func-\ntion.\nAnother option is to split Aalong its columns A= [A1,A2].\nThis partitioning allows the GeLU nonlinearity to be inde-\npendently applied to the output of each partitioned GEMM:\n[Y1,Y2] = [ GeLU (XA ']","The output embedding weight matrix is parallelized along the vocabulary dimension, requiring minimal communication and maximizing compute efficiency during training.","Megatron-LM splits the weight matrix A along its columns for the output embedding, allowing the GeLU nonlinearity to be independently applied to the output of each partitioned GEMM.",1.0,1.0,0.384351909160614
How does the addition of a Python interpreter in PAL's framework influence the accuracy of solutions?,"['return a single line expression (see Figure 11b) to\ncalculate the result? Results in Table 6 ( 4throw) shows that is not the case. With single-line expressions, the performance of\nPAL falls to the level of direct prompting.\nGenerating the answer directly PALﬁrst generates a reasoning chain in the form of a Python program, and passes the\ngenerated program to a runtime to obtain an answer. Is PALbetter only because of the program-style intermediate reasoning\nchains, or are the improvements derived from ofﬂoading execution to the Python runtime? To investigate this, we experiment\nwith a variant that forces the LLM to generate the answer after generating the reasoning chain (Figure 11e). This setting\ncompels the LLM to condition on the generated code-based reasoning to generate an answer, simulating the runtime. The\nresults in Table 6 ( 5throw) show that the solve rate drops to near DIRECT levels. This reinforces our hypothesis that while\ncurrent LLMs can be excellent at specifying a high-level plan to solve a task—they are still incapable of executing them.\nAblation Solve Rate\nDIRECT (no intermediate reasoning) 19.7\nCOT 65.6\nPAL 72.0\nSuccinct Code 47.8\nLLM Simulating Runtime 23.2\nTable 6: Solve Rates for Ablations\nC. Effect of Using Language Models of Code\nIn our experiments, we focused on evaluating the performance of a language model for code. We aimed to investigate\nwhether the additional performance boost observed in our results was due to the use of models like Codex, or whether our\nformulation was useful even for text-based models. To this end, we conducted additional experiments using text-based\nlanguage models. Our ﬁndings indicate that the PAL approach is not restricted to working solely ', ""the original solving script needs to explicitly re-cite answers from\nprevious answers.\nDataset (500 examples) L EAST -TO-MOST LEAST -TO-MOST + PAL\nGSM 8K 67.2 72.8\nSVAMP 75.2 78.2\nTable 12: Results on GSM 8Kand SVAMP with L EAST -TO-MOST and L EAST -TO-MOST with P AL solving prompt.\nFor our analysis, we consider the Math data sets GSM8K, and SVAMP as Zhou et al. (2022) found Least-to-Most helps solve\ncomplex math problems. We patch the GSM 8Kprompt from the Zhou et al. (2022) into PAL. Note that the other tasks in\x0cPAL: Program-aided Language Models 25\nZhou et al. (2022), like “concatenating last letters” from several words, require simple routines and are trivially solvable by\nPAL. We experiment with subsets of 500 examples and record results in Table 12. Here we see PALcan take advantage of\nthe problem decomposition offered by the L EAST -TO-MOST reducing and further leverage the arithmetic capability in the\nPython runtime to achieve additional performance gains.\x0cPAL: Program-aided Language Models 26\nJ. Prompts\nWe show here example PALprompts we used for each data set. We show one example for each of the few-shot prompts.\nThe fulls prompt can be found in our released code.\nJ.1. Reasoning about Colored Objects\n# Q: On the table, you see a bunch of objects arranged in a row: a purple paperclip,\na pink stress ball, a brown keychain, a green scrunchiephone charger, a mauve\nfidget spinner, and a burgundy pen. What is the color of the object directly to\nthe right of the stress ball?\n# Put objects into a list to record ordering\nobjects = []\nobjects += [('paperclip', 'purple')] *1\nobjects += [('stress ball', 'pink')] *1\nobjects += "", 'ChatGPT tool.1In contrast to\nthe in-context-learning methods we used in the main paper, here we instruct ChatGPT to perform program-aided reasoning\nthrough one of the user utterances.\nIn Figure 13, in COT-style reasoning, while the reasoning chain is correct, the ﬁnal answer is wrong. In contrast, PAL-style\nreasoning could not only accurately extract the color of objects from the question but also produce the correct lines of code\nto branch to different situations that yield their corresponding correct answers.\nA more intriguing example is letting an LLM count the number of letters in the word “intriguing”. In Figure 14a, while the\nstep-by-step explanation appears reasonable by splitting the letters by spaces, ChatGPT does not change the answer after\nthis explicit reasoning and insists on the wrong answer. Explicitly instructing the model to perform step-by-step reasoning\nbefore answering the question still yields the wrong answer. In contrast, PAL-style reasoning only takes a few lines of code,\nand the execution does produce the correct answer, in this case. These examples indicate that PALcan beneﬁt even an\nostensibly powerful model like ChatGPT.\n1chat.openai.com\x0cPAL: Program-aided Language Models 18\n(a) In C OT style reasoning, the correct intermediate reasoning chain leads to wrong answers.\n(b) In P AL, the execution of the code will produce the correct answer.\nFigure 13: ChatGPT with P AL and C OT to answer a user-posted question\x0cPAL: Program-aided Language Models 19\n(a) Step-by-step reasoning struggle on counting the number of letters in the word “intrigu-\ning” which has ten letters.\n(b) Explicitly instructing ChatGPT to reason step-by-step before generating answer still\nleads to the wrong answer.\n(c) P AL takes a few lines of code and ']","Incorporating a Python interpreter allows PAL to execute generated programs accurately, bridging the gap in LLMs' arithmetic and logical capabilities, thus significantly improving solution accuracy compared to relying solely on LLMs.","The addition of a Python interpreter in PAL's framework influences the accuracy of solutions by improving the solve rate compared to directly generating the answer, but the performance falls compared to the original PAL approach where Python runtime is utilized for execution.",1.0,1.0,0.768832266330719
How does CodeNet's dataset size and diversity support advanced AI for code research compared to previous datasets?,"['be readily used as inputs into machine learning models. Results of code classi-\nﬁcation and code similarity experiments using the CodeNet dataset are provided as\na reference. We hope that the scale, diversity and rich, high-quality annotations of\nCodeNet will offer unprecedented research opportunities at the intersection of AI\nand Software Engineering.\n1 Introduction\nThere is a growing trend towards leveraging AI for building tools that support software engineering\nand development [ 1,2]. AI can manipulate and generate computer code, but can it do so with\nhigh quality? Many researchers are fascinated by this possibility, encouraged by AI successes in\nother domains and tantalized by the vision of computers programming computers. Some recent\ndeep-learning models [ 3,4] for code have received a lot of publicity: trained on vast amounts of\ndata and using novel architectures with billions of parameters, they sometimes generate surprisingly\nplausible code.\nPreprint. Under review.arXiv:2105.12655v2 [cs.SE] 29 Aug 2021\x0cGiven the success of non-AI tools for code, why should we consider AI to augment or possibly\nreplace them? Firstly, AI can help reﬁne and re-tune the heuristics used by traditional coding tools.\nSecondly, based on the training data from past experience, AI can help prioritize when there is more\nthan one sound answer [ 5]. Thirdly, an AI-based tool may handle incomplete or invalid code more\nrobustly, thus expanding its scope. Finally, AI can incorporate signals usually ignored by traditional\ntools for code, such as the natural language in identiﬁers or comments.\nIn the enterprise environment, developers often face code written by large teams over many years\nand geographies. Developers must manipulate such code to modernize it, ﬁx bugs, improve its\nperformance, evolve it when ', 'requirements change, make it more secure, and/or comply with regu-\nlations. These tasks are challenging, and it is crucial to provide tool support for developers to be\nmore productive at performing them. It is well known that the latest advancements in deep learning\nalgorithms rely on best-of-breed datasets, such as ImageNet, to create increasingly complex and\npowerful models. In this paper, we present ""CodeNet"", a ﬁrst-of-its-kind dataset in scale, diversity,\nand quality, to accelerate the algorithmic advances in AI for Code.\nTo promote widespread adoption of CodeNet, we will be launching contests involving use cases based\non the dataset. The ﬁrst contest [ 6] will focus on diversity, inclusion and spurring interest among\naspiring data scientists. We are partnering with the Global Women in Data Science organization (with\npresence in over 50 countries) founded by Stanford University [ 7] and targeting teams with at least\nﬁfty percent women. We are planning follow-up contests that target experienced AI practitioners.\nThe rest of the paper is organized as follows. Section 2 introduces the CodeNet dataset. Related\ndatasets are discussed in Section 3, and the differentiation of CodeNet with respect to these related\ndatasets is elaborated in Section 4. Section 5 describes how CodeNet was curated and Section 6\nenumerates the usability features of CodeNet with several pre-processing tools to transform source\ncodes into representations that can be readily used as inputs into machine learning models. Section 7\ndiscusses the upcoming CodeNet contest and Section 8 describes important baseline experiments\nwith the CodeNet dataset. Section 9 presents further uses of the CodeNet dataset and Section 10\nconcludes the paper.\n2 The CodeNet Dataset\nThe CodeNet dataset consists of a ', 'in code recommendation algorithms, and code translation\nbetween a large variety of programming languages, to advances in code performance improvement\ntechniques. We hope that the scale, diversity and rich, high-quality annotations of CodeNet will offer\nunprecedented research opportunities at the intersection of AI and Software Engineering.\n11 Acknowledgements\nWe would like to acknowledge AIZU and AtCoder for making the code submissions publicly available.\nWe would like to thank the IBM Data Asset eXchange team for providing a platform to host the\nCodeNet dataset. We would like to thank the Women in Data Science team at Stanford University\nand the IBM Call for Code team for their collaboration in launching the CodeNet challenge.\n12 Bibliography\n[1]Miltiadis Allamanis, Earl T Barr, Premkumar Devanbu, and Charles Sutton. A survey of\nmachine learning for big code and naturalness. ACM Computing Surveys (CSUR) , 51(4):1–37,\n2018.\n[2]Yanming Yang, Xin Xia, David Lo, and John Grundy. A survey on deep learning for software\nengineering. arXiv preprint arXiv:2011.14597 , 2020.\n[3]Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira Pinto,\nJared Kaplan, Harri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, Alex Ray, Raul\nPuri, Gretchen Krueger, Michael Petrov, Heidy Khlaaf, Girish Sastry, Pamela Mishkin, Brooke\nChan, Scott Gray, Nick Ryder, Mikhail Pavlov, Alethea Power, Lukasz Kaiser, Mohammad\nBavarian, Clemens Winter, Philippe Tillet, Felipe Petroski Such, Dave Cummings, Matthias\nPlappert, Fotios Chantzis, Elizabeth Barnes, Ariel Herbert-V oss, William Hebgen Guss, Alex\nNichol, Alex Paino, Nikolas Tezak, Jie Tang, Igor Babuschkin, Suchir Balaji, Shantanu Jain,\nWilliam Saunders, Christopher Hesse, Andrew N. Carr, Jan Leike, Josh Achiam, Vedant Misra,\nEvan Morikawa, Alec Radford, Matthew Knight, Miles Brundage, Mira Murati, Katie Mayer,\nPeter Welinder, Bob McGrew, Dario Amodei, ']","CodeNet surpasses previous datasets with over 14 million code samples and around 500 million lines of code in 55 languages, providing unparalleled scale and diversity for AI for code research.","CodeNet's dataset size and diversity offer unprecedented research opportunities at the intersection of AI and Software Engineering, providing a larger scale and richer annotations than previous datasets.",0.8571428571428571,1.0,0.8536567091941833
What methodologies were employed in SuperGLUE to establish robust human baseline performances across its tasks?,"['limitations, we believe that\nWinogender’s inclusion is worthwhile in providing a coarse sense of how social biases evolve with\nmodel performance and for keeping attention on the social ramiﬁcations of NLP models.\n4 Using SuperGLUE\nSoftware Tools To facilitate using SuperGLUE, we release jiant (Wang et al., 2019b),4a modular\nsoftware toolkit, built with PyTorch (Paszke et al., 2017), components from AllenNLP (Gardner\net al., 2017), and the transformers package.5jiant implements our baselines and supports the\nevaluation of custom models and training methods on the benchmark tasks. The toolkit includes\nsupport for existing popular pretrained models such as OpenAI GPT and BERT, as well as support\nfor multistage and multitask learning of the kind seen in the strongest models on GLUE.\nEligibility Any system or method that can produce predictions for the SuperGLUE tasks is eligible\nfor submission to the leaderboard, subject to the data-use and submission frequency policies stated\nimmediately below. There are no restrictions on the type of methods that may be used, and there is\nno requirement that any form of parameter sharing or shared initialization be used across the tasks in\nthe benchmark. To limit overﬁtting to the private test data, users are limited to a maximum of two\nsubmissions per day and six submissions per month.\nData Data for the tasks are available for download through the SuperGLUE site and through a\ndownload script included with the software toolkit. Each task comes with a standardized training set,\ndevelopment set, and unlabeled test set. Submitted systems may use any public or private data when\ndeveloping their systems, with a few exceptions: Systems may only use the SuperGLUE-distributed\nversions of the task datasets, as ', 'a transfer task for COPA sees an 8 point improvement.\nOur best baselines still lag substantially behind human performance. On average, there is a nearly 20\npoint gap between BERT++ and human performance. The largest gap is on WSC, with a 35 point\ndifference between the best model and human performance. The smallest margins are on BoolQ,\nCB, RTE, and WiC, with gaps of around 10 points on each of these. We believe these gaps will be\nchallenging to close: On WSC and COPA, human performance is perfect. On three other tasks, it is\nin the mid-to-high 90s. On the diagnostics, all models continue to lag signiﬁcantly behind humans.\nThough all models obtain near perfect gender parity scores on Winogender, this is due to the fact that\nthey are obtaining accuracy near that of random guessing.\n6 Conclusion\nWe present SuperGLUE, a new benchmark for evaluating general-purpose language understanding\nsystems. SuperGLUE updates the GLUE benchmark by identifying a new set of challenging NLU\ntasks, as measured by the difference between human and machine baselines. The set of eight tasks in\nour benchmark emphasizes diverse task formats and low-data training data tasks, with nearly half the\ntasks having fewer than 1k examples and all but one of the tasks having fewer than 10k examples.\nWe evaluate BERT-based baselines and ﬁnd that they still lag behind humans by nearly 20 points.\nGiven the difﬁculty of SuperGLUE for BERT, we expect that further progress in multi-task, transfer,\nand unsupervised/self-supervised learning techniques will be necessary to approach human-level per-\nformance on the benchmark. Overall, we argue that SuperGLUE offers a rich and challenging testbed\nfor work developing new general-purpose ', 'corresponds well to human\njudgments of output quality. Some text generation tasks fail to meet this criteria due to issues with\nautomatic metrics like ROUGE and BLEU (Callison-Burch et al., 2006; Liu et al., 2016, i.a.).\n4\x0cPublic data: We require that tasks have existing public training data in order to minimize the risks\ninvolved in newly-created datasets. We also prefer tasks for which we have access to (or could create)\na test set with private labels.\nTask format: We prefer tasks that had relatively simple input and output formats, to avoid incentiviz-\ning the users of the benchmark to create complex task-speciﬁc model architectures. Still, while GLUE\nis restricted to tasks involving single sentence or sentence pair inputs, for SuperGLUE we expand\nthe scope to consider tasks with longer inputs. This yields a set of tasks that requires understanding\nindividual tokens in context, complete sentences, inter-sentence relations, and entire paragraphs.\nLicense: Task data must be available under licences that allow use and redistribution for research\npurposes.\nTo identify possible tasks for SuperGLUE, we disseminated a public call for task proposals to the\nNLP community, and received approximately 30 proposals. We ﬁltered these proposals according\nto our criteria. Many proposals were not suitable due to licensing issues, complex formats, and\ninsufﬁcient headroom; we provide examples of such tasks in Appendix D. For each of the remaining\ntasks, we ran a BERT-based baseline and a human baseline, and ﬁltered out tasks which were either\ntoo challenging for humans without extensive training or too easy for our machine baselines.\n3.2 Selected Tasks\nFollowing this process, we arrived at eight tasks to use in SuperGLUE. See Tables 1 and 2 ']","SuperGLUE's human baseline performances were established through careful collection of non-expert annotations for a sample of each test set, following structured annotation procedures that included a short training phase for annotators, ensuring reliable estimates of human performance.",None. The context does not provide information on the specific methodologies employed in SuperGLUE to establish robust human baseline performances across its tasks.,1.0,0.0,0.7659310102462769
How do the selected tasks in SuperGLUE reflect the benchmark's goals for advancing language understanding technologies?,"['high-level goals, the original version of\nthe benchmark is no longer a suitable metric for quantifying such progress.\nIn response, we introduce SuperGLUE, a new benchmark designed to pose a more rigorous test of\nlanguage understanding. SuperGLUE has the same high-level motivation as GLUE: to provide a\nsimple, hard-to-game measure of progress toward general-purpose language understanding technolo-\ngies for English. We anticipate that signiﬁcant progress on SuperGLUE should require substantive\ninnovations in a number of core areas of machine learning, including sample-efﬁcient, transfer,\nmultitask, and unsupervised or self-supervised learning.\nSuperGLUE follows the basic design of GLUE: It consists of a public leaderboard built around\neight language understanding tasks, drawing on existing data, accompanied by a single-number\nperformance metric, and an analysis toolkit. However, it improves upon GLUE in several ways:\nMore challenging tasks: SuperGLUE retains the two hardest tasks in GLUE. The remaining tasks\nwere identiﬁed from those submitted to an open call for task proposals and were selected based on\ndifﬁculty for current NLP approaches.\nMore diverse task formats: The task formats in GLUE are limited to sentence- and sentence-pair\nclassiﬁcation. We expand the set of task formats in SuperGLUE to include coreference resolution\nand question answering (QA).\nComprehensive human baselines: We include human performance estimates for all benchmark\ntasks, which verify that substantial headroom exists between a strong BERT-based baseline and\nhuman performance.\nImproved code support: SuperGLUE is distributed with a new, modular toolkit for work on\npretraining, multi-task learning, and transfer learning in NLP, built around standard tools including\nPyTorch (Paszke et al., 2017) and AllenNLP (Gardner et al., 2017).\nReﬁned usage rules: The conditions for inclusion on the SuperGLUE leaderboard have been\nrevamped to ensure fair ', 'SuperGLUE: A Stickier Benchmark for\nGeneral-Purpose Language Understanding Systems\nAlex Wang∗\nNew York UniversityYada Pruksachatkun∗\nNew York UniversityNikita Nangia∗\nNew York University\nAmanpreet Singh∗\nFacebook AI ResearchJulian Michael\nUniversity of WashingtonFelix Hill\nDeepMindOmer Levy\nFacebook AI Research\nSamuel R. Bowman\nNew York University\nAbstract\nIn the last year, new models and methods for pretraining and transfer learning have\ndriven striking performance improvements across a range of language understand-\ning tasks. The GLUE benchmark, introduced a little over one year ago, offers\na single-number metric that summarizes progress on a diverse set of such tasks,\nbut performance on the benchmark has recently surpassed the level of non-expert\nhumans, suggesting limited headroom for further research. In this paper we present\nSuperGLUE, a new benchmark styled after GLUE with a new set of more difﬁ-\ncult language understanding tasks, a software toolkit, and a public leaderboard.\nSuperGLUE is available at super.gluebenchmark.com .\n1 Introduction\nRecently there has been notable progress across many natural language processing (NLP) tasks, led\nby methods such as ELMo (Peters et al., 2018), OpenAI GPT (Radford et al., 2018), and BERT\n(Devlin et al., 2019). The unifying theme of these methods is that they couple self-supervised learning\nfrom massive unlabelled text corpora with effective adapting of the resulting model to target tasks.\nThe tasks that have proven amenable to this general approach include question answering, textual\nentailment, and parsing, among many others (Devlin et al., 2019; Kitaev et al., 2019, i.a.).\nIn this context, the GLUE benchmark (Wang et al., 2019a) has become a prominent evaluation\nframework for research towards general-purpose language understanding technologies. GLUE is\na collection of nine language understanding tasks built on existing public datasets, together with\nprivate test data, an evaluation server, a single-number ', ""Singh, J. Michael, F. Hill, O. Levy, and S. R. Bowman.\nSuperglue: A stickier benchmark for general-purpose language understanding systems, 2019.\nR. Zellers, A. Holtzman, Y . Bisk, A. Farhadi, and Y . Choi. Hellaswag: Can a machine really ﬁnish\nyour sentence?, 2019.\nR. Zellers, A. Holtzman, E. Clark, L. Qin, A. Farhadi, and Y . Choi. Evaluating machines by their\nreal-world language use, 2020.\n10\x0cPublished as a conference paper at ICLR 2021\nA A DDITIONAL ANALYSIS\nThis appendix includes ﬁgures with sorted results (Figure 9), few-shot examples vs. accuracy\n(Figure 10), and few-shot calibration (Figure 11). It also includes sections on ﬁne-tuning, error\nanalysis, and format sensitivity.\n0 20 40 60 80 100\nAccuracy (%)College ChemistryMoral ScenariosCollege PhysicsHigh School PhysicsHigh School MathematicsFormal LogicElementary MathematicsAbstract AlgebraHigh School StatisticsMachine LearningEconometricsHigh School ChemistryProfessional AccountingProfessional LawCollege MathematicsProfessional MedicineConceptual PhysicsGlobal FactsHigh School Comp SciMedical GeneticsHigh School MacroeconomicsHigh School MicroeconomicsMoral DisputesProfessional PsychologyCollege BiologyVirologyCollege Comp SciBusiness EthicsNutritionCollege MedicineAnatomyClinical KnowledgeLogical FallaciesHigh School BiologyPublic RelationsAstronomyElectrical EngineeringHuman AgingPhilosophySecurity StudiesPrehistoryHigh School US HistorySociologyHigh School European HistoryHuman SexualityJurisprudenceWorld ReligionsInternational LawHigh School World HistoryManagementComputer SecurityHigh School GeographyHigh School Gov't and PoliticsMarketingMiscellaneousHigh School PsychologyUS Foreign PolicyGPT-3 Results\nRandom Chance\n0102030405060708090100\nAccuracy (%)Moral ScenariosFormal LogicAbstract AlgebraEconometricsHigh School MathematicsCollege PhysicsMachine LearningHigh School StatisticsCollege ChemistryElementary MathematicsCollege MathematicsHigh School ChemistryGlobal FactsProfessional LawMedical GeneticsProfessional AccountingCollege BiologyHigh School PhysicsAnatomyCollege Comp SciConceptual PhysicsCollege MedicineVirologyProfessional MedicineAstronomyHigh School MacroeconomicsElectrical EngineeringProfessional PsychologySecurity StudiesHuman SexualityNutritionHigh School Comp SciPrehistoryClinical KnowledgeHigh School BiologyHuman AgingHigh School MicroeconomicsPhilosophyPublic RelationsWorld ReligionsMoral DisputesLogical FallaciesHigh School European HistoryHigh School US HistoryHigh School World HistoryMiscellaneousUS Foreign PolicyComputer SecuritySociologyInternational LawHigh School GeographyJurisprudenceBusiness EthicsHigh School PsychologyManagementHigh School Gov't and PoliticsMarketingUnifiedQA Results\nRandom Chance\nFigure 9: On the left are GPT-3 few shot accuracies for all of the ""]","The selected tasks, chosen for their difficulty and diversity, reflect SuperGLUE's goals by requiring substantive innovations in machine learning to improve sample-efficient transfer, multitask, and unsupervised learning, driving forward the capabilities of language understanding systems.","The selected tasks in SuperGLUE reflect the benchmark's goals for advancing language understanding technologies by including more challenging tasks, expanding task formats to include coreference resolution and question answering, providing comprehensive human baselines for benchmark tasks, improving code support with a modular toolkit for pretraining, multi-task learning, and transfer learning in NLP, and refining usage rules to ensure fairness on the leaderboard.",1.0,1.0,0.8197615742683411
"In the context of PAL, what role do meaningful variable names play in the generated program's effectiveness?","['the PALprompt without intermediate\nNL comments.\n2. P AL−var\n−comment – the PALprompt without intermediate\nNL comments and with variable names substituted\nwith random characters.\nThe results are shown in Figure 9. In COLORED OBJECTED\nandDATE, removing intermediate NL comments but keep-\ning meaningful variable names ( PAL−comment ) – slightly re-\nduces the results compared to the full PALprompt, but it still\nachieves higher accuracy than the baselines COT. Remov-\ning variable names as well ( PAL−var\n−comment ) further decreases\naccuracy, and performs worse than COT. Since variable\nnames have an important part in code quality (Gellenbeck\n& Cook, 1991; Takang et al., 1996), meaningful variable\nnames are only expected to ease reasoning for Codex, which\nwas trained on mostly meaningful names, as was also found\nby Madaan et al. (2022).\n7. Related Work\nPrompting Few-shot prompting (Brown et al., 2020) has\nbeen shown to be an effective approach for a variety of\ntasks (Liu et al., 2021) ranging from text- (Gehrmann et al.,\x0cPAL: Program-aided Language Models 8\nColored Objects Date Penguins60708090100\n84.4\n64.879.295.2\n76.293.391.1\n69.191.3\n79.9\n63.491.9COT PAL PAL−comment PAL−var\n−comment\nFigure 9: Ablation study of PALprompt formats. We consider the original PALprompt, it with natural language comments\nremoved ( PAL−comment ), and further variable names replaced with random character ( PAL−var\n−comment ). As a reference, we also\nshow the C OT performance (blue).\n2021; Reif et al., 2021; Wei et al., 2021; Sanh et al., 2021)\nto code-generation (Chen et al., 2021b). Methods such as\nchain-of-thought prompting ( COT) have further unlocked a\nvariety of reasoning tasks, boosting the performance of mod-\nels on a variety of benchmarks. Nevertheless, all previous\napproaches suffer from inaccuracy in arithmetic calculation\nand incorrect reasoning (Lewkowycz et al., 2022; Hendrycks\net al., 2021; Madaan & Yazdanbakhsh, 2022). ', 'the execution could result in the correct answer.\nFigure 14: ChatGPT with P AL and C OT to answer a user-posted question\x0cPAL: Program-aided Language Models 20\nG. Closer Look into Token-level Behaviors of Different Mechanisms\nBeyond empirical results, we make initial attempts to gain a deeper understanding of the behavior of LLMs with different\nreasoning mechanisms by looking into the token-level log-likelihood of reasoning chains produced by COTandPAL.\nWe randomly selected 20 questions from the COLORED OBJECTS dataset, along with their corresponding COTandPAL\nsolutions. We then manually compared the two mechanisms by focusing on tokens with a low log-likelihood.\nOur analysis reveals that COToften has lower conﬁdence in tokens related to numbers and quantitative information, the\ngrounded position of spatial adjectives ( e.g., right-most), properties such as the color of objects, and nouns that refer to the\nobjects. Speciﬁcally, we found that this occurred in seven, six, two, and six examples out of the 20 we examined. In contrast,\nPALuses list manipulations, such as len(objects) , and accesses objects and their associated properties through list\nindexing ( e.g.,object[3][0] ). We found that the LLM is typically conﬁdent in producing these programs. Furthermore,\nwe observed that while COTrequires different expressions for the same concept in different contexts, PALalmost always\nuses the same expression, which is presumably more robust. For example, when there are ﬁve objects, COTpredicts “the\nright-most thing is the ﬁfth item on the list”, and “the right-most thing is the third item on the list” when the number of\nobjects is three. Occasionally, COTalso predicts “the right-most thing is lastitem on the list” which does not provide more\nconcrete information. On ', '. . . . . . . . . . . . . . . . . . . . . . . . . . . 33\nK.3 Date Understanding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\x0cPAL: Program-aided Language Models 13\nA. Alternative Prompts without Meaningful Variable Names\na = 23\nb = 5\nc = 3\nd = b*c\ne = a - d\nprint(e)\n(a) Structured explanation with uninformative variable names (P AL -var)\n# Olivia has $23\na = 23\n# number of bagels bought\nb = 5\n# price of each bagel\nc = 3\n# total price of bagels\nd = b*c\n# money left\ne = a - d\nprint(e)\n(b) Structured explanation with uninformative variable names, but useful comments (P AL -var +comms )\nmoneyinitial = 23\nbagels = 5\nbagelcost = 3\nmoneyspent = bagels *bagelcost\nmoneyleft = money initial - money spent\nresult = money left\nprint(result)\n(c) P AL prompts\nFigure 10: Role of text in P AL: three different reasoning steps for the question Olivia has $23. She bought ﬁve bagels for\n$3 each. How much money does she have left? Uninformative variable names (left), Uninformative variable names with\nuseful comments (left), and P AL. Including text description\nSetting C OT P AL -var PAL -var +comms PAL\nSolve Rate 63.1 59.0 69.0 71.8\nTable 4: Role of text: including text either as informative variable names ( PAL) or comments is important ( PAL-var +\ncomms ). Uninformative variable names PAL-var ']","Meaningful variable names in PAL's generated code are crucial for linking programmatic steps to natural language problem entities, enhancing readability and maintainability of the code, and improving the model's reasoning and execution accuracy.","In the context of PAL, meaningful variable names play a crucial role in the generated program's effectiveness by easing reasoning for Codex. They are expected to improve code quality, aid in understanding, and contribute to better performance compared to using uninformative variable names or removing variable names altogether.",0.5714285714285714,1.0,0.7987232208251953
How does PAL address the execution of complex computations in natural language processing tasks?,"['the execution could result in the correct answer.\nFigure 14: ChatGPT with P AL and C OT to answer a user-posted question\x0cPAL: Program-aided Language Models 20\nG. Closer Look into Token-level Behaviors of Different Mechanisms\nBeyond empirical results, we make initial attempts to gain a deeper understanding of the behavior of LLMs with different\nreasoning mechanisms by looking into the token-level log-likelihood of reasoning chains produced by COTandPAL.\nWe randomly selected 20 questions from the COLORED OBJECTS dataset, along with their corresponding COTandPAL\nsolutions. We then manually compared the two mechanisms by focusing on tokens with a low log-likelihood.\nOur analysis reveals that COToften has lower conﬁdence in tokens related to numbers and quantitative information, the\ngrounded position of spatial adjectives ( e.g., right-most), properties such as the color of objects, and nouns that refer to the\nobjects. Speciﬁcally, we found that this occurred in seven, six, two, and six examples out of the 20 we examined. In contrast,\nPALuses list manipulations, such as len(objects) , and accesses objects and their associated properties through list\nindexing ( e.g.,object[3][0] ). We found that the LLM is typically conﬁdent in producing these programs. Furthermore,\nwe observed that while COTrequires different expressions for the same concept in different contexts, PALalmost always\nuses the same expression, which is presumably more robust. For example, when there are ﬁve objects, COTpredicts “the\nright-most thing is the ﬁfth item on the list”, and “the right-most thing is the third item on the list” when the number of\nobjects is three. Occasionally, COTalso predicts “the right-most thing is lastitem on the list” which does not provide more\nconcrete information. On ', 'ChatGPT tool.1In contrast to\nthe in-context-learning methods we used in the main paper, here we instruct ChatGPT to perform program-aided reasoning\nthrough one of the user utterances.\nIn Figure 13, in COT-style reasoning, while the reasoning chain is correct, the ﬁnal answer is wrong. In contrast, PAL-style\nreasoning could not only accurately extract the color of objects from the question but also produce the correct lines of code\nto branch to different situations that yield their corresponding correct answers.\nA more intriguing example is letting an LLM count the number of letters in the word “intriguing”. In Figure 14a, while the\nstep-by-step explanation appears reasonable by splitting the letters by spaces, ChatGPT does not change the answer after\nthis explicit reasoning and insists on the wrong answer. Explicitly instructing the model to perform step-by-step reasoning\nbefore answering the question still yields the wrong answer. In contrast, PAL-style reasoning only takes a few lines of code,\nand the execution does produce the correct answer, in this case. These examples indicate that PALcan beneﬁt even an\nostensibly powerful model like ChatGPT.\n1chat.openai.com\x0cPAL: Program-aided Language Models 18\n(a) In C OT style reasoning, the correct intermediate reasoning chain leads to wrong answers.\n(b) In P AL, the execution of the code will produce the correct answer.\nFigure 13: ChatGPT with P AL and C OT to answer a user-posted question\x0cPAL: Program-aided Language Models 19\n(a) Step-by-step reasoning struggle on counting the number of letters in the word “intrigu-\ning” which has ten letters.\n(b) Explicitly instructing ChatGPT to reason step-by-step before generating answer still\nleads to the wrong answer.\n(c) P AL takes a few lines of code and ', '2022) was also submitted to arXiv. Their\nmethod is conceptually similar to ours, but PoT (1) only\ndemonstrates efﬁcacy on mathematical problems, whereas\nwe demonstrate gains on symbolic and algorithmic bench-\nmarks as well, and (2) chose benchmark-speciﬁc prompt\nexamples, while we used the same prompt examples as pre-\nvious work, to disentangled the beneﬁt of our approach from\nthe beneﬁt of the choice of examples.\nSemantic parsing Our work can also be seen as a very\ngeneral form of semantic parsing, where instead of parsing\ninto strict domain-speciﬁc languages, the model generates\nfree-form Python code. Some works constrain the decoder\nusing a Context-Free Grammar (CFG) to generate a domain-\nspeciﬁc meaning representation (Shin & Van Durme, 2021)\nor a canonical utterance, which can be converted to a Lisp-\nlike meaning representation (Shin et al., 2021). In contrast,\nPALdoes not require any constraining or domain-speciﬁc\nrepresentations other than Python code. Further, LMs that\nwere pretrained on Python are abundant compared to other\ndomain-speciﬁc languages, making Python code a much\nmore preferable representation. Andor et al. (2019) generate\ntask-speciﬁc arithmetic operations for reading comprehen-\nsion tasks; Gupta et al. (2019) design neural modules such\nascount to deal with arithmetic operations. PALgener-\nalizes these works by generating general Python programs,\nwithout the need for deﬁning specialized modules. The clos-\nest work to ours technically may be Binder (Cheng et al.,\n2022), but it addressed mostly answering questions about\ntables using SQL and SQL-like Python.\x0cPAL: Program-aided Language Models 9\n8. Conclusion\nWe introduce PAL, a new method for natural language rea-\nsoning, using programs as intermediate reasoning steps.\nDifferently from existing LM-based reasoning approaches,\nthe main idea is to ofﬂoad solving and calculating to an\nexternal Python interpreter, instead of using the LLM ']"," PAL addresses complex computations by generating programmatic reasoning steps for LLMs and executing them via an interpreter, ensuring accurate and efficient problem-solving acros various domains.","PAL addresses the execution of complex computations in natural language processing tasks by using programs as intermediate reasoning steps. Instead of relying solely on the language model to solve and calculate complex tasks, PAL offloads this process to an external Python interpreter. This allows PAL to generate general Python programs that can accurately execute the necessary computations, leading to more robust and accurate answers in natural language reasoning tasks.",1.0,1.0,0.6623445749282837
How does SuperGLUE's design ensure it presents a more challenging benchmark than its predecessor GLUE for evaluating language understanding models?,"['high-level goals, the original version of\nthe benchmark is no longer a suitable metric for quantifying such progress.\nIn response, we introduce SuperGLUE, a new benchmark designed to pose a more rigorous test of\nlanguage understanding. SuperGLUE has the same high-level motivation as GLUE: to provide a\nsimple, hard-to-game measure of progress toward general-purpose language understanding technolo-\ngies for English. We anticipate that signiﬁcant progress on SuperGLUE should require substantive\ninnovations in a number of core areas of machine learning, including sample-efﬁcient, transfer,\nmultitask, and unsupervised or self-supervised learning.\nSuperGLUE follows the basic design of GLUE: It consists of a public leaderboard built around\neight language understanding tasks, drawing on existing data, accompanied by a single-number\nperformance metric, and an analysis toolkit. However, it improves upon GLUE in several ways:\nMore challenging tasks: SuperGLUE retains the two hardest tasks in GLUE. The remaining tasks\nwere identiﬁed from those submitted to an open call for task proposals and were selected based on\ndifﬁculty for current NLP approaches.\nMore diverse task formats: The task formats in GLUE are limited to sentence- and sentence-pair\nclassiﬁcation. We expand the set of task formats in SuperGLUE to include coreference resolution\nand question answering (QA).\nComprehensive human baselines: We include human performance estimates for all benchmark\ntasks, which verify that substantial headroom exists between a strong BERT-based baseline and\nhuman performance.\nImproved code support: SuperGLUE is distributed with a new, modular toolkit for work on\npretraining, multi-task learning, and transfer learning in NLP, built around standard tools including\nPyTorch (Paszke et al., 2017) and AllenNLP (Gardner et al., 2017).\nReﬁned usage rules: The conditions for inclusion on the SuperGLUE leaderboard have been\nrevamped to ensure fair ', 'SuperGLUE: A Stickier Benchmark for\nGeneral-Purpose Language Understanding Systems\nAlex Wang∗\nNew York UniversityYada Pruksachatkun∗\nNew York UniversityNikita Nangia∗\nNew York University\nAmanpreet Singh∗\nFacebook AI ResearchJulian Michael\nUniversity of WashingtonFelix Hill\nDeepMindOmer Levy\nFacebook AI Research\nSamuel R. Bowman\nNew York University\nAbstract\nIn the last year, new models and methods for pretraining and transfer learning have\ndriven striking performance improvements across a range of language understand-\ning tasks. The GLUE benchmark, introduced a little over one year ago, offers\na single-number metric that summarizes progress on a diverse set of such tasks,\nbut performance on the benchmark has recently surpassed the level of non-expert\nhumans, suggesting limited headroom for further research. In this paper we present\nSuperGLUE, a new benchmark styled after GLUE with a new set of more difﬁ-\ncult language understanding tasks, a software toolkit, and a public leaderboard.\nSuperGLUE is available at super.gluebenchmark.com .\n1 Introduction\nRecently there has been notable progress across many natural language processing (NLP) tasks, led\nby methods such as ELMo (Peters et al., 2018), OpenAI GPT (Radford et al., 2018), and BERT\n(Devlin et al., 2019). The unifying theme of these methods is that they couple self-supervised learning\nfrom massive unlabelled text corpora with effective adapting of the resulting model to target tasks.\nThe tasks that have proven amenable to this general approach include question answering, textual\nentailment, and parsing, among many others (Devlin et al., 2019; Kitaev et al., 2019, i.a.).\nIn this context, the GLUE benchmark (Wang et al., 2019a) has become a prominent evaluation\nframework for research towards general-purpose language understanding technologies. GLUE is\na collection of nine language understanding tasks built on existing public datasets, together with\nprivate test data, an evaluation server, a single-number ', ""Singh, J. Michael, F. Hill, O. Levy, and S. R. Bowman.\nSuperglue: A stickier benchmark for general-purpose language understanding systems, 2019.\nR. Zellers, A. Holtzman, Y . Bisk, A. Farhadi, and Y . Choi. Hellaswag: Can a machine really ﬁnish\nyour sentence?, 2019.\nR. Zellers, A. Holtzman, E. Clark, L. Qin, A. Farhadi, and Y . Choi. Evaluating machines by their\nreal-world language use, 2020.\n10\x0cPublished as a conference paper at ICLR 2021\nA A DDITIONAL ANALYSIS\nThis appendix includes ﬁgures with sorted results (Figure 9), few-shot examples vs. accuracy\n(Figure 10), and few-shot calibration (Figure 11). It also includes sections on ﬁne-tuning, error\nanalysis, and format sensitivity.\n0 20 40 60 80 100\nAccuracy (%)College ChemistryMoral ScenariosCollege PhysicsHigh School PhysicsHigh School MathematicsFormal LogicElementary MathematicsAbstract AlgebraHigh School StatisticsMachine LearningEconometricsHigh School ChemistryProfessional AccountingProfessional LawCollege MathematicsProfessional MedicineConceptual PhysicsGlobal FactsHigh School Comp SciMedical GeneticsHigh School MacroeconomicsHigh School MicroeconomicsMoral DisputesProfessional PsychologyCollege BiologyVirologyCollege Comp SciBusiness EthicsNutritionCollege MedicineAnatomyClinical KnowledgeLogical FallaciesHigh School BiologyPublic RelationsAstronomyElectrical EngineeringHuman AgingPhilosophySecurity StudiesPrehistoryHigh School US HistorySociologyHigh School European HistoryHuman SexualityJurisprudenceWorld ReligionsInternational LawHigh School World HistoryManagementComputer SecurityHigh School GeographyHigh School Gov't and PoliticsMarketingMiscellaneousHigh School PsychologyUS Foreign PolicyGPT-3 Results\nRandom Chance\n0102030405060708090100\nAccuracy (%)Moral ScenariosFormal LogicAbstract AlgebraEconometricsHigh School MathematicsCollege PhysicsMachine LearningHigh School StatisticsCollege ChemistryElementary MathematicsCollege MathematicsHigh School ChemistryGlobal FactsProfessional LawMedical GeneticsProfessional AccountingCollege BiologyHigh School PhysicsAnatomyCollege Comp SciConceptual PhysicsCollege MedicineVirologyProfessional MedicineAstronomyHigh School MacroeconomicsElectrical EngineeringProfessional PsychologySecurity StudiesHuman SexualityNutritionHigh School Comp SciPrehistoryClinical KnowledgeHigh School BiologyHuman AgingHigh School MicroeconomicsPhilosophyPublic RelationsWorld ReligionsMoral DisputesLogical FallaciesHigh School European HistoryHigh School US HistoryHigh School World HistoryMiscellaneousUS Foreign PolicyComputer SecuritySociologyInternational LawHigh School GeographyJurisprudenceBusiness EthicsHigh School PsychologyManagementHigh School Gov't and PoliticsMarketingUnifiedQA Results\nRandom Chance\nFigure 9: On the left are GPT-3 few shot accuracies for all of the ""]","SuperGLUE introduces more challenging tasks retained from GLUE, diversifies task formats beyond sentence- and sentence-pair classification to include coreference resolution and question answering, and features comprehensive human baseline performances to ensure significant headroom for model improvement.","SuperGLUE's design ensures it presents a more challenging benchmark than its predecessor GLUE for evaluating language understanding models by including more challenging tasks, such as coreference resolution and question answering, retaining the two hardest tasks from GLUE, introducing comprehensive human baselines for benchmark tasks, providing improved code support, and refining the usage rules for fair inclusion on the leaderboard.",1.0,1.0,0.8439749479293823
" In what ways does SuperGLUE expand beyond GLUE's task formats, and why is this expansion significant?","['limitations, we believe that\nWinogender’s inclusion is worthwhile in providing a coarse sense of how social biases evolve with\nmodel performance and for keeping attention on the social ramiﬁcations of NLP models.\n4 Using SuperGLUE\nSoftware Tools To facilitate using SuperGLUE, we release jiant (Wang et al., 2019b),4a modular\nsoftware toolkit, built with PyTorch (Paszke et al., 2017), components from AllenNLP (Gardner\net al., 2017), and the transformers package.5jiant implements our baselines and supports the\nevaluation of custom models and training methods on the benchmark tasks. The toolkit includes\nsupport for existing popular pretrained models such as OpenAI GPT and BERT, as well as support\nfor multistage and multitask learning of the kind seen in the strongest models on GLUE.\nEligibility Any system or method that can produce predictions for the SuperGLUE tasks is eligible\nfor submission to the leaderboard, subject to the data-use and submission frequency policies stated\nimmediately below. There are no restrictions on the type of methods that may be used, and there is\nno requirement that any form of parameter sharing or shared initialization be used across the tasks in\nthe benchmark. To limit overﬁtting to the private test data, users are limited to a maximum of two\nsubmissions per day and six submissions per month.\nData Data for the tasks are available for download through the SuperGLUE site and through a\ndownload script included with the software toolkit. Each task comes with a standardized training set,\ndevelopment set, and unlabeled test set. Submitted systems may use any public or private data when\ndeveloping their systems, with a few exceptions: Systems may only use the SuperGLUE-distributed\nversions of the task datasets, as ', 'high-level goals, the original version of\nthe benchmark is no longer a suitable metric for quantifying such progress.\nIn response, we introduce SuperGLUE, a new benchmark designed to pose a more rigorous test of\nlanguage understanding. SuperGLUE has the same high-level motivation as GLUE: to provide a\nsimple, hard-to-game measure of progress toward general-purpose language understanding technolo-\ngies for English. We anticipate that signiﬁcant progress on SuperGLUE should require substantive\ninnovations in a number of core areas of machine learning, including sample-efﬁcient, transfer,\nmultitask, and unsupervised or self-supervised learning.\nSuperGLUE follows the basic design of GLUE: It consists of a public leaderboard built around\neight language understanding tasks, drawing on existing data, accompanied by a single-number\nperformance metric, and an analysis toolkit. However, it improves upon GLUE in several ways:\nMore challenging tasks: SuperGLUE retains the two hardest tasks in GLUE. The remaining tasks\nwere identiﬁed from those submitted to an open call for task proposals and were selected based on\ndifﬁculty for current NLP approaches.\nMore diverse task formats: The task formats in GLUE are limited to sentence- and sentence-pair\nclassiﬁcation. We expand the set of task formats in SuperGLUE to include coreference resolution\nand question answering (QA).\nComprehensive human baselines: We include human performance estimates for all benchmark\ntasks, which verify that substantial headroom exists between a strong BERT-based baseline and\nhuman performance.\nImproved code support: SuperGLUE is distributed with a new, modular toolkit for work on\npretraining, multi-task learning, and transfer learning in NLP, built around standard tools including\nPyTorch (Paszke et al., 2017) and AllenNLP (Gardner et al., 2017).\nReﬁned usage rules: The conditions for inclusion on the SuperGLUE leaderboard have been\nrevamped to ensure fair ', 'recent work in this area.\nSince its release, GLUE has been used as a testbed and showcase by the developers of several\ninﬂuential models, including GPT (Radford et al., 2018) and BERT (Devlin et al., 2019). As shown\nin Figure 1, progress on GLUE since its release has been striking. On GLUE, GPT and BERT\nachieved scores of 72.8 and 80.2 respectively, relative to 66.5 for an ELMo-based model (Peters\net al., 2018) and 63.7 for the strongest baseline with no multitask learning or pretraining above the\nword level. Recent models (Liu et al., 2019d; Yang et al., 2019) have clearly surpassed estimates of\nnon-expert human performance on GLUE (Nangia and Bowman, 2019). The success of these models\non GLUE has been driven by ever-increasing model capacity, compute power, and data quantity, as\nwell as innovations in model expressivity (from recurrent to bidirectional recurrent to multi-headed\ntransformer encoders) and degree of contextualization (from learning representation of words in\nisolation to using uni-directional contexts and ultimately to leveraging bidirectional contexts).\nIn parallel to work scaling up pretrained models, several studies have focused on complementary\nmethods for augmenting performance of pretrained models. Phang et al. (2018) show that BERT can\nbe improved using two-stage pretraining, i.e., ﬁne-tuning the pretrained model on an intermediate\ndata-rich supervised task before ﬁne-tuning it again on a data-poor target task. Liu et al. (2019d,c) and\nBach et al. (2018) get further improvements respectively via multi-task ﬁnetuning and using massive\namounts of weak supervision. Clark et al. (2019b) demonstrate that knowledge distillation (Hinton\net al., 2015; Furlanello et al., 2018) can lead to student networks that outperform their teachers.\nOverall, the quantity and ']","By including coreference resolution and question answering formats, SuperGLUE expands the scope of evaluated linguistic phenomena, testing models' abilities in more varied contexts and reflecting a broader range of natural language understanding challenges.","SuperGLUE expands beyond GLUE's task formats by including coreference resolution and question answering (QA) in addition to sentence- and sentence-pair classification tasks. This expansion is significant because it diversifies the types of tasks that models are tested on, challenging them in new ways and pushing for innovations in core areas of machine learning such as sample-efficient, transfer, multitask, and unsupervised or self-supervised learning. Additionally, it allows for a more comprehensive evaluation of language understanding abilities, moving beyond simple classification tasks to more complex and real-world tasks.",1.0,1.0,0.832733690738678
